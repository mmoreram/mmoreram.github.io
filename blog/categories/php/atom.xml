<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Because yes]]></title>
  <link href="http://mmoreram.com/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://mmoreram.com/"/>
  <updated>2014-09-13T21:01:05+02:00</updated>
  <id>http://mmoreram.com/</id>
  <author>
    <name><![CDATA[Marc Morera]]></name>
    <email><![CDATA[yuhu@mmoreram.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Extractor, a PHP Library for compressed packages]]></title>
    <link href="http://mmoreram.com/blog/2014/09/13/extractor/"/>
    <updated>2014-09-13T00:00:00+02:00</updated>
    <id>http://mmoreram.com/blog/2014/09/13/extractor</id>
    <content type="html"><![CDATA[<p>Extractor is a simple php library for extracting all files from compressed
packages. Available formats are</p>

<ul>
<li>zip</li>
<li>Rar</li>
<li>Phar</li>
<li>Tar</li>
<li>Gz</li>
<li>Bz2</li>
</ul>


<p>You can find the source in the
<a href="https://github.com/mmoreram/extractor">Github repository</a>.</p>

<p>Extractor uses the Finder Symfony component, so the result of extracting all
compressed files given a package is nothing more than a Finder instance ready
to be iterated and configured.</p>

<p>``` php
&lt;?php</p>

<p>use Symfony\Component\Finder\Finder;
use Mmoreram\Extractor\Filesystem\TemporaryDirectory;
use Mmoreram\Extractor\Resolver\ExtensionResolver;
use Mmoreram\Extractor\Extractor;</p>

<p>$temporaryDirectory = new TemporaryDirectory();
$extensionResolver = new ExtensionResolver();
$extractor = new Extractor(</p>

<pre><code>$temporaryDirectory,
$extensionResolver
</code></pre>

<p>);</p>

<p>/<em>*
 * @var Finder $files
 </em>/
$files = $extractor->extractFromFile(&lsquo;/tmp/myfile.rar&rsquo;);
foreach ($files as $file) {</p>

<pre><code>echo $file-&gt;getRealpath() . PHP_EOL;
</code></pre>

<p>}
```</p>

<p>You can use the temporary folder of your Filesystem using a <code>TemporaryDirectory</code>
instance or you can use a <code>SpecificDirectory</code> instance if you want to specify
where all files should be extracted.</p>

<p>``` php
use Mmoreram\Extractor\Filesystem\SpecificDirectory;
use Mmoreram\Extractor\Resolver\ExtensionResolver;
use Mmoreram\Extractor\Extractor;</p>

<p>$specificDirectory = new SpecificDirectory(&lsquo;/my/specific/path&rsquo;);
$extensionResolver = new ExtensionResolver();
$extractor = new Extractor(</p>

<pre><code>$specificDirectory,
$extensionResolver
</code></pre>

<p>);
```</p>

<p>You can also work with remote files.</p>

<p>``` php
use Symfony\Component\Finder\Finder;
use Mmoreram\Extractor\Filesystem\TemporaryDirectory;
use Mmoreram\Extractor\Resolver\ExtensionResolver;
use Mmoreram\Extractor\Extractor;</p>

<p>$specificDirectory = new TemporaryDirectory();
$extensionResolver = new ExtensionResolver();
$extractor = new Extractor(</p>

<pre><code>$specificDirectory,
$extensionResolver
</code></pre>

<p>);</p>

<p>/<em>*
 * @var Finder $files
 </em>/
$files = $extractor</p>

<pre><code>-&gt;extractFromFile('http://host.com/my-compressed-file.zip');
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Porque el orden importa]]></title>
    <link href="http://mmoreram.com/blog/2014/07/30/porque-el-orden-importa/"/>
    <updated>2014-07-30T11:07:00+02:00</updated>
    <id>http://mmoreram.com/blog/2014/07/30/porque-el-orden-importa</id>
    <content type="html"><![CDATA[<p>La verdad es que reconozco que soy un poco neurótico con el código. Y es que en
mi caso me gusta definir la belleza de mis lineas no tan solo en el aspecto
funcional y en el aspecto de arquitectura, sino en el aspecto visual. Y en
realidad considero que descuidar este aspecto es un problema muy grande a la
larga.</p>

<p>Tratemos de pensar en la cantidad de horas que estamos ante estas lineas de
código, y luego tratemos de analizar el impacto que estas tienen en nuestro día
a día. ¿No creéis que importa el hecho de que esté ordenado, limpio y tratable?</p>

<p>Pues bien, es para esto que, y dado que llevo un tiempo con la manía de ordenar
los namespaces de mis ficheros php, he decidido empezar el proyecto
<a href="https://github.com/mmoreram/php-formatter">php-formatter</a>.</p>

<p>``` bash
Console Tool</p>

<p>Usage:
  [options] command [arguments]</p>

<p>Options:
  &mdash;help           -h Display this help message.
  &mdash;quiet          -q Do not output any message.
  &mdash;verbose        -v|vv|vvv Increase the verbosity of messages
  &mdash;version        -V Display this application version.
  &mdash;ansi              Force ANSI output.
  &mdash;no-ansi           Disable ANSI output.
  &mdash;no-interaction -n Do not ask any interactive question.</p>

<p>Available commands:
  help       Displays help for a command
  list       Lists commands
use
  use:sort   Sort Use statements
```</p>

<p>Lejos de ser un analizador de PSR, cuya función ya cumple a la perfección el
proyecto de Fabien Potencier <a href="https://github.com/fabpot/php-cs-fixer">php-cs-fixer</a>,
se trata de añadir, en modo comando, algunas funcionalidades tediosas que para mí
son importantes, como es el caso de los Use Statements ( Poder ordenarlos por
grupos, alfabéticamente o por longitud, ascendiente o descendiente&hellip; )</p>

<p>De momento solo hay esta funcionalidad, y aún le faltan un par de opciones, pero
no dudéis en proponer comandos que nos puedan ser útiles a todos.</p>

<p>Os invito a que tengáis reglas estructurales y visuales en vuestros proyectos,
ya que ayudan un poco a que el código quede un poco más estandarizado con el
paso del tiempo, aunque sea a nivel visual.</p>

<p>Vuestros ojos os lo agradecerán.</p>
]]></content>
  </entry>
  
</feed>
