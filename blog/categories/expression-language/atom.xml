<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Expression Language | Because yes]]></title>
  <link href="http://mmoreram.github.io/blog/categories/expression-language/atom.xml" rel="self"/>
  <link href="http://mmoreram.github.io/"/>
  <updated>2016-03-03T17:28:59+01:00</updated>
  <id>http://mmoreram.github.io/</id>
  <author>
    <name><![CDATA[Marc Morera]]></name>
    <email><![CDATA[yuhu@mmoreram.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Defeating Expression Language]]></title>
    <link href="http://mmoreram.github.io/blog/2015/05/18/defeating-expression-language/"/>
    <updated>2015-05-18T09:53:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2015/05/18/defeating-expression-language</id>
    <content type="html"><![CDATA[<p>How beautiful Expression Language definitions are, right? I mean, inserting that
complex expressions in a Dependency Injection configuration file is so nice and
fast if you need to inject the result of a method in a service (one of the
multiple examples we can see)</p>

<p>Let&rsquo;s see a simple example of how we use this library.</p>

<p>``` yaml
services:</p>

<pre><code>#
# My managers
#
some_manager:
    class: This\Is\My\Manager
    arguments:
        - @=service("another_manager").someCall("value")
        - @=service("yet_another_manager").getInjectableInstance(parameter("my_parameter"))
</code></pre>

<p>```</p>

<p>This is not a bad idea, really, but because we are engineers and we should have
as much information as possible in order to be able to choose between the best
option, always, I will show you another way of defining this piece of code.</p>

<p>Let&rsquo;s do that!</p>

<h3>Factories</h3>

<p>Remember the <a href="http://mmoreram.com/blog/2013/12/23/factory-pattern-in-symfony2/">Factory pattern in Symfony2</a>
post I wrote some time ago? I talked about how this pattern can be implemented
in your Symfony projects.</p>

<p>Well, just for your information, most of your Expression Language definitions
can be nicely done using Factories.</p>

<p>Let&rsquo;s reproduce the same example using factories.</p>

<p>``` yaml
services:</p>

<pre><code>#
# My managers
#
some_manager:
    class: This\Is\My\Manager
    arguments:
        - @my_injectable_value
        - @my_injectable_service

my_injectable_value:
    class: StdClass
    factory: 
        - @another_manager
        - someCall
    arguments:
        - value

my_injectable_service:
    class: This\Is\My\Injectable\Class
    factory: 
        - @yet_another_manager
        - getInjectableInstance
    arguments:
        - %my_parameter%
</code></pre>

<p>```</p>

<h3>Dependency</h3>

<p>Take a look and realise that we&rsquo;ve removed a package dependency from your
project, as you don&rsquo;t need <code>symfony/expression-language</code> anymore, and your DIC
definition will be easily exportable to another format if someday is needed.</p>

<h3>Reflexion</h3>

<p>Is Expression Language a bad choice? Well, only you should be able to know if
using this library is a good choice or not, because only you know your needs and
your resources, but every time you add a new Expression Language line, just ask
yourself&hellip;</p>

<p>Can I use simple DI definitions here? Is the only way I can do that?</p>
]]></content>
  </entry>
  
</feed>
