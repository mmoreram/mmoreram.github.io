<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Because yes]]></title>
  <link href="http://mmoreram.github.io/atom.xml" rel="self"/>
  <link href="http://mmoreram.github.io/"/>
  <updated>2014-10-17T18:19:57+02:00</updated>
  <id>http://mmoreram.github.io/</id>
  <author>
    <name><![CDATA[Marc Morera]]></name>
    <email><![CDATA[yuhu@mmoreram.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Symfony Walk, the Conference section]]></title>
    <link href="http://mmoreram.github.io/blog/2014/10/15/symfony-walk-symfony-con-section/"/>
    <updated>2014-10-15T11:48:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2014/10/15/symfony-walk-symfony-con-section</id>
    <content type="html"><![CDATA[<p>The day is getting closer. I am really exited about the idea of the <a href="http://mmoreram.com/blog/2014/08/07/symfony-walk-zaragoza-madrid/">Symfony Walk</a>.</p>

<p>As you may know, the walk will consists in 12 days (10 walking, 2 resting, 1
resting day added as announced for my health), from Zaragoza to Madrid, so today
I want to announce formally the last section of the Walk, dedicated to the
people in the conference and to the entirely Symfony Community.</p>

<p>I want to open source the last part of my experience. I&rsquo;d like everyone excited
with the idea to walk beside me for the last 38km.</p>

<p>That&rsquo;s the plan:</p>

<p><img src="http://mmoreram.github.io/images/zaragoza-madrid-last-section.png" title="[Zaragoza Madrid Last Section [Zaragoza Madrid Las Section]]" ></p>

<ul>
<li>From &ndash; 26 Nov at 10.00 &ndash; <a href="https://www.google.es/maps/place/Hotel+Azuqueca/@40.574603,-3.260397,17z/data=!3m1!4b1!4m2!3m1!1s0xd424d58faf1da8d:0x4d83f8902082a9e8?hl=ca">Hotel Azuqueca, Azuqueca de Henares, Guadalajara</a></li>
<li>To &ndash; 26 November at 19.00 &ndash; <a href="https://www.google.es/maps/search/hotel+auditorium/@40.448706,-3.5586655,17z/data=!3m2!4b1!5s0xd4230487e9da459:0xa7e56b7dca610362?hl=ca">Hotel Auditorium, Madrid</a></li>
<li>Good shoes, important!</li>
<li>We could talk about symfony stuff and some interesting topics.</li>
</ul>


<p>Excited about that? Good! Once in Madrid, a cold beer will be our best friend&hellip;
ever!</p>

<p>Let me know if you want to join us through the
<a href="https://www.eventbrite.com/e/symfony-walk-symfonycon-section-tickets-13728858385">Eventbrite event</a>,
so we can organize based on the total number of people. You can also contact me
through my email, <a href="&#x6d;&#x61;&#105;&#108;&#116;&#x6f;&#58;&#x79;&#x75;&#104;&#117;&#64;&#109;&#x6d;&#111;&#114;&#x65;&#114;&#97;&#x6d;&#x2e;&#x63;&#111;&#x6d;&#46;">&#x79;&#117;&#104;&#x75;&#64;&#x6d;&#x6d;&#111;&#x72;&#x65;&#114;&#97;&#x6d;&#46;&#99;&#x6f;&#109;&#46;</a></p>

<p>Looking forward to meet you there, it is going to be amazing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PDD, Pragmatic Driven Development]]></title>
    <link href="http://mmoreram.github.io/blog/2014/10/06/pdd/"/>
    <updated>2014-10-06T12:00:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2014/10/06/pdd</id>
    <content type="html"><![CDATA[<p>Hay una tendencia, a mi parecer, extremadamente molesta sobre como se tiene que
trabajar en cualquier proyecto técnico. Hemos pasado de ser un sector con poca
voz, a ser, desde hace un tiempo, un pequeño movimiento ególatra de pensamientos
categóricos que hacen que según qué lecturas monotemáticas aburran al lector con
tópicos iterados por enésima vez y con un discurso teórico, nada práctico, muy
lejos de la realidad.</p>

<p>Y esto es lo que necesitamos, una buena dosis de realidad. Porque la realidad es
práctica, no teórica.</p>

<p>Desde mi punto de vista, y según la lectura que puedo tener según mi pequeña
experiencia, creo que este movimiento debe terminar para dar paso a lo que
circunstancialmente podría referirme como PDD, Pragmatic Driven Development
(Siguiendo con las directrices&hellip; yo también puedo ser muy molón con nombres que
quedan de lujo en mi currículum). Y es que estoy cansado de ver como la gente me
dice como tengo que enfocar mi proyecto, que prácticas debo seguir para hacerlo
&ldquo;bien&rdquo; y que directrices debo tomar para no estar lejos de la verdad absoluta.</p>

<p>La verdad absoluta no existe, o no debería existir. Cualquier discurso debería
tener una parte objetiva, basado en las buenas prácticas, pero también debería
tener una parte subjetiva, relativa a las circunstancias reales y propias del
proyecto. Pues parece ser que no se entiende. Parece ser que, y como si un
movimiento político desfasado y arcaico se tratara, el Ego ciega demasiado como
para poder entender tanta obviedad junta (será lo acostumbrados que nos tienen
a ser tratados como borregos).</p>

<p>Es por esto que personalmente me niego a escuchar más estupidez modernista sin
argumentos sólidos. Me niego a ser víctima de <em>hype</em> por parte de personas que no
tienen más formas de destacar que vender su pensamiento único como si de la
entrada al cielo de la sabiduría se tratara. Hemos llegado a un punto enfermizo.</p>

<p>Personalmente siempre exijo que la gente que me escucha tenga un pensamiento
propio, que trate mi opinión como otro punto de vista, aunque sea incorrecto,
distinto o distante, y que sirva como punto de soporte para dar aún más robustez
al argumento que pueda darle uno a un tema específico, dado un punto de partida
y un objetivo final.</p>

<p><strong>Que conste, no digo que las buenas prácticas no importen, no digo que tener
conocimientos sobre arquitectura no importe, no digo que aplicar una buena
metodología no importe&hellip;</strong> Creo que todas estas prácticas nacidas en grandes
mentes y probadas con grandes resultados son herramientas que nos hace mejores,
con más recursos y más capaces de trabajar problemas de forma satisfactoria.
Debo añadir que soy practicante de muchas de ellas en el punto en que las
necesito, y doy gracias a ello. Me hace mejor profesional. Lo que digo es que
somos desarrolladores, no gente estúpida sin capacidad de análisis. En el
momento que perdemos este análisis, perdemos completamente nuestro valor.</p>

<ul>
<li>Estoy haciendo este proyecto, ¿te gusta?</li>
<li>Espero que lo estés haciendo con Arquitectura Hexagonal&hellip;</li>
<li>Pues la verdad es que no la necesito&hellip;</li>
<li>¿Que no la necesitas? ¡Claro que la necesitas!</li>
<li>Pues no, en este caso no los necesito&hellip;</li>
<li>Lo estás haciendo mal.</li>
</ul>


<p>Se trata de pensar las cosas, y decidir por uno mismo qué necesitas en cada
momento, sin dejar que nadie, absolutamente nadie, te diga de forma categórica
como debes hacer su trabajo.</p>

<p>Espero de verdad que toda esta borrachera se acabe pronto, espero que en un
futuro empiece a haber comportamientos un poco más profesionales para trabajar
todos como un equipo o comunidad, que es lo que necesitamos, teniendo en cuenta
las cosas que verdaderamente importan: aprender y hacer buenos proyectos, no
importa el Framework, el lenguaje o la arquitectura.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extractor, a PHP Library for compressed packages]]></title>
    <link href="http://mmoreram.github.io/blog/2014/09/13/extractor/"/>
    <updated>2014-09-13T00:00:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2014/09/13/extractor</id>
    <content type="html"><![CDATA[<p>Extractor is a simple php library for extracting all files from compressed
packages. Available formats are</p>

<ul>
<li>zip</li>
<li>Rar</li>
<li>Phar</li>
<li>Tar</li>
<li>Gz</li>
<li>Bz2</li>
</ul>


<p>You can find the source in the
<a href="https://github.com/mmoreram/extractor">Github repository</a>.</p>

<p>Extractor uses the Finder Symfony component, so the result of extracting all
compressed files given a package is nothing more than a Finder instance ready
to be iterated and configured.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Finder\Finder</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\Extractor\Filesystem\TemporaryDirectory</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\Extractor\Resolver\ExtensionResolver</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\Extractor\Extractor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$temporaryDirectory</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TemporaryDirectory</span><span class="p">();</span>
</span><span class='line'><span class="nv">$extensionResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ExtensionResolver</span><span class="p">();</span>
</span><span class='line'><span class="nv">$extractor</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Extractor</span><span class="p">(</span>
</span><span class='line'>    <span class="nv">$temporaryDirectory</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">$extensionResolver</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * @var Finder $files</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="nv">$files</span> <span class="o">=</span> <span class="nv">$extractor</span><span class="o">-&gt;</span><span class="na">extractFromFile</span><span class="p">(</span><span class="s1">&#39;/tmp/myfile.rar&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$files</span> <span class="k">as</span> <span class="nv">$file</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$file</span><span class="o">-&gt;</span><span class="na">getRealpath</span><span class="p">()</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can use the temporary folder of your Filesystem using a <code>TemporaryDirectory</code>
instance or you can use a <code>SpecificDirectory</code> instance if you want to specify
where all files should be extracted.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\Extractor\Filesystem\SpecificDirectory</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\Extractor\Resolver\ExtensionResolver</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\Extractor\Extractor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$specificDirectory</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SpecificDirectory</span><span class="p">(</span><span class="s1">&#39;/my/specific/path&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$extensionResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ExtensionResolver</span><span class="p">();</span>
</span><span class='line'><span class="nv">$extractor</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Extractor</span><span class="p">(</span>
</span><span class='line'>    <span class="nv">$specificDirectory</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">$extensionResolver</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also work with remote files.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Finder\Finder</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\Extractor\Filesystem\TemporaryDirectory</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\Extractor\Resolver\ExtensionResolver</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\Extractor\Extractor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$specificDirectory</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TemporaryDirectory</span><span class="p">();</span>
</span><span class='line'><span class="nv">$extensionResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ExtensionResolver</span><span class="p">();</span>
</span><span class='line'><span class="nv">$extractor</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Extractor</span><span class="p">(</span>
</span><span class='line'>    <span class="nv">$specificDirectory</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">$extensionResolver</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * @var Finder $files</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="nv">$files</span> <span class="o">=</span> <span class="nv">$extractor</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">extractFromFile</span><span class="p">(</span><span class="s1">&#39;http://host.com/my-compressed-file.zip&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bye Bye Symfony]]></title>
    <link href="http://mmoreram.github.io/blog/2014/09/01/bye-bye-symfony/"/>
    <updated>2014-09-01T00:00:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2014/09/01/bye-bye-symfony</id>
    <content type="html"><![CDATA[<p>Don&rsquo;t be afraid. You know what I think about the Symfony components and how I
love them. Until now any circumstance has changed my mind about using them in my
projects, and over the time, after discover every hidden single piece of code, I
have turned more amazed of their power.</p>

<p>The reason of this post is just to tell you, with a simple example, how to say
<em>Bye Bye, Symfony!</em> and say <em>Hi PHP!</em>. This really means uncouple from Symfony
Components and still use them as the default implementation, while we can
securely remove, from the composer <em>require</em> block, our Symfony dependencies.</p>

<p>One of the poor things I have heard these last months has been the word <em>you must</em>
or <em>you should</em> event without knowing exactly what is the real direction of my
project, so every word in this post will be just an idea you could have in mind
when you design your own architecture, thinking about your real needs, far from
the things you should or you must do.</p>

<p>To explain that, how we can say goodbye to Symfony, we will start with a simple
example. A simple class we could find in every project. Our class will have no
sense but will be useful in our specific example, helping us to understand what
is all this about.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * For the full copyright and license information, please view the LICENSE</span>
</span><span class='line'><span class="sd"> * file that was distributed with this source code.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * Feel free to edit as you please, and have fun.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @author Marc Morera &lt;yuhu@mmoreram.com&gt;</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Package\Generator</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Routing\Generator\UrlGeneratorInterface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Class UrlPrinter</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UrlPrinter</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var UrlGeneratorInterface</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Url generator</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$urlGenerator</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Construct method</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param UrlGeneratorInterface $urlGenerator Url generator</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">UrlGeneratorInterface</span> <span class="nv">$urlGenerator</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">urlGenerator</span> <span class="o">=</span> <span class="nv">$urlGenerator</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Generates Homepage route and print complete path</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return string Route path</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">printHomePageRoute</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">urlGenerator</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">generate</span><span class="p">(</span><span class="s1">&#39;homepage&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we can see, use this class means use <code>UrlGeneratorInterface</code>. This class is
part of the Symfony Routing Component, so is a really bad idea if you really
want to make your project multi-environment</p>

<p>Is that good? Well, it depends on your both product requirements and technical
requirements. If you want to use always the Symfony router component, this piece
of code is good enough. Otherwise, If you want to use another router, you have a
problem.</p>

<p>Say your project must work with and without Symfony. Our class should not depend
on this interface. One of the strategies to uncouple external implementations is
using ports and adapters.</p>

<p>I will explain how it works and how we can implement it.</p>

<h2>Real life example</h2>

<p>Let&rsquo;s imagine we want to sell an USB device. We have decided in our product
definition that this device will connect to external devices using USB Standard
A (the big one). One of the possible approaches would be to design our device
with the external connector coupled. This means selling it with the USB wire
(like an USB camera, for example).</p>

<p>But why coupling our device with an specific output? Do you know what it really
means?</p>

<ul>
<li>If the wire breaks, we must change all the device.</li>
<li>You can connect with devices that accept only USB-A</li>
<li>Wire improvements means new device versions.</li>
</ul>


<p>What would be an alternative decision? Well, why don&rsquo;t we focus our efforts in
the camera and we just let other companies to help us with the wire? This means
more flexibility for the final user and capability of removing and changing the
cable when is broken. And&hellip; they could connect their camera to many different
formats, even for the most adventurous, their own formats.</p>

<p>So, in fact, our device should have one female USB port with an specification
of how connect it with another device. The wire would be just an adapter of our
device so many of them could be plugged-in.</p>

<p>We have talked about devices, ports, adapters, specifications, but&hellip; how can
this help me with my project? Is that hard?</p>

<p>The answer is No.</p>

<h2>Solution</h2>

<p>Our goal is to create an specification for URL generators and force each adapter
to implement it in their own way. As we know, the OOP languages resolve the
specification with the interfaces.</p>

<p>Let&rsquo;s create our specification.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * For the full copyright and license information, please view the LICENSE</span>
</span><span class='line'><span class="sd"> * file that was distributed with this source code.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * Feel free to edit as you please, and have fun.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @author Marc Morera &lt;yuhu@mmoreram.com&gt;</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Package\Specification</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Interface PackageUrlGeneratorInterface</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">interface</span> <span class="nx">PackageUrlGeneratorInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Generates a route given its name.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return string Route path</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">generateUrl</span><span class="p">(</span><span class="nv">$routeName</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We are just specifying. We want that, whatever is the implementation, each
adapter must fulfill this rule: Has a method called <code>generateRoute</code> that, given
the route name, will return its complete path.</p>

<p>Let&rsquo;s adapt our UrlPrinter to work with specification instead of implementation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * For the full copyright and license information, please view the LICENSE</span>
</span><span class='line'><span class="sd"> * file that was distributed with this source code.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * Feel free to edit as you please, and have fun.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @author Marc Morera &lt;yuhu@mmoreram.com&gt;</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Package\Generator</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Package\Specification\PackageUrlGeneratorInterface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Class UrlPrinter</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UrlPrinter</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var PackageUrlGeneratorInterface</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Url generator</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$urlGenerator</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Construct method</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param UrlGeneratorInterface $urlGenerator Url generator</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">PackageUrlGeneratorInterface</span> <span class="nv">$urlGenerator</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">urlGenerator</span> <span class="o">=</span> <span class="nv">$urlGenerator</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Generates Homepage route and print complete path</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return string Route path</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">printHomePageRoute</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">urlGenerator</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">generateUrl</span><span class="p">(</span><span class="s1">&#39;homepage&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, our UrlPrinter does not depends on any external library. Goal reached!</p>

<p>But, now what? I mean, we should implement our adapter, am I right? What is a
camera with a great specification and without wire plugged in? (A wireless
camera, welcome to the twenty century ^^. Just joking)</p>

<p>Our UrlPrinter needs a <em>PackageUrlGeneratorInterface</em> implementation to be
built, so we have to implement an adapter. And because we still want to work with
Symfony Routing Component as my first option, we will create the Symfony Adapter
for my specification.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * For the full copyright and license information, please view the LICENSE</span>
</span><span class='line'><span class="sd"> * file that was distributed with this source code.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * Feel free to edit as you please, and have fun.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @author Marc Morera &lt;yuhu@mmoreram.com&gt;</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Package\Adapter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Package\Specification\PackageUrlGeneratorInterface</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Routing\Generator\UrlGeneratorInterface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Class SymfonyUrlGeneratorAdapter</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">SymfonyUrlGeneratorAdapter</span> <span class="k">implements</span> <span class="nx">PackageUrlGeneratorInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var UrlGeneratorInterface</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Url generator</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$urlGenerator</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Construct method</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param UrlGeneratorInterface $urlGenerator Url generator</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">UrlGeneratorInterface</span> <span class="nv">$urlGenerator</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">urlGenerator</span> <span class="o">=</span> <span class="nv">$urlGenerator</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Generates a route given its name</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return string Route path</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">generateUrl</span><span class="p">(</span><span class="nv">$routeName</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">urlGenerator</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">generate</span><span class="p">(</span><span class="nv">$routeName</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This an adapter, my friends. Each adapter has one mission, and is just transform
the way we understand the method <code>generateUrl</code> must work (specification) to the
way each external project understands it (implementation). In this case, very
easy, our <code>generateUrl</code> is the same as Symfony Router Component&rsquo;s <code>generate</code>.</p>

<p>Symfony Component is now required by this adapter, but because we are not
required to use this adapter (Maybe we can use a dummy one for our tests, or a
mocked one), Symfony Component is not required by our package anymore, just
suggested.</p>

<p>Let&rsquo;s see another Adapter implementation, requiring another external library.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * For the full copyright and license information, please view the LICENSE</span>
</span><span class='line'><span class="sd"> * file that was distributed with this source code.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * Feel free to edit as you please, and have fun.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @author Marc Morera &lt;yuhu@mmoreram.com&gt;</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Package\Adapter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Package\Specification\PackageUrlGeneratorInterface</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">AnotherProject\UrlGeneratorInterface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Class SymfonyUrlGeneratorAdapter</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">SymfonyUrlGeneratorAdapter</span> <span class="k">implements</span> <span class="nx">PackageUrlGeneratorInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var UrlGeneratorInterface</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Url generator</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$urlGenerator</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Construct method</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param UrlGeneratorInterface $urlGenerator Url generator</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">UrlGeneratorInterface</span> <span class="nv">$urlGenerator</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">urlGenerator</span> <span class="o">=</span> <span class="nv">$urlGenerator</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Generates a route given its name</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return string Route path</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">generateUrl</span><span class="p">(</span><span class="nv">$routeName</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$routeName</span> <span class="o">=</span> <span class="s1">&#39;_&#39;</span> <span class="o">.</span> <span class="nv">$routeName</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">urlGenerator</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">anotherGenerateMethod</span><span class="p">(</span><span class="nv">$routeName</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both adapters would be placed in the <code>Adapter/</code> folder, and the final user
should be able to switch them and even implement new ones.</p>

<h2>From require to suggest</h2>

<p>With our changes, we can remove &ldquo;symfony/routing&rdquo; from the require block and add
it into the suggest block in <code>composer.json</code> file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="s">&quot;require&quot;</span><span class="p-Indicator">:</span> <span class="p-Indicator">{</span>
</span><span class='line'>    <span class="s">&quot;php&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;&gt;=5.4&quot;</span><span class="p-Indicator">,</span>
</span><span class='line'>    <span class="nv">...</span>
</span><span class='line'><span class="p-Indicator">}</span><span class="err">,</span>
</span><span class='line'><span class="s">&quot;suggest&quot;</span><span class="p-Indicator">:</span> <span class="p-Indicator">{</span>
</span><span class='line'>    <span class="s">&quot;symfony/routing&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;Required</span><span class="nv"> </span><span class="s">if</span><span class="nv"> </span><span class="s">using</span><span class="nv"> </span><span class="s">Routing</span><span class="nv"> </span><span class="s">adapter&quot;</span><span class="p-Indicator">,</span>
</span><span class='line'>    <span class="s">&quot;mmoreram/another-project&quot;</span><span class="p-Indicator">:</span> <span class="nv">Required if using AnotherProject Routing adapter&quot;</span>
</span><span class='line'><span class="p-Indicator">}</span><span class="err">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>We will only require the packages needed by the adapter we are using.</p>

<h2>What we win</h2>

<p>Much. We win maximum implementation flexibility and minimum coupling. Would be
wise to say that a PHP project should tend to this thought, but once again, it
depends on many factors.</p>

<h2>What we lose</h2>

<p>It Depends. If you want your project to be understandable by a lot of developing
knowledge levels, this architecture goes away from the comprehensibility of a
simple code. You also can lose by having lot of files, so you should respect
some kind of best practices code, to make people working on your project
comfortable dealing with it.</p>

<h2>Best practices</h2>

<p>I should talk about <em>Marc practices</em> instead of <em>Best practices</em>. I am used to
adding my adapters always in the folder <code>/Adapter/{PortName}/</code>, being <em>PortName</em>
the name of the port we are dealing with in camel case format. In this case, we
should add both adapters in <code>/Adapter/UrlGenerator/</code>.</p>

<p>Given this format we can determine what adapters we can use in our project in a
very agile way.</p>

<h2>Reference projects</h2>

<p>First project that comes in my mind when I think about Ports/Adapters is
<a href="https://github.com/KnpLabs/Gaufrette/tree/master/src/Gaufrette">Gaufrette</a>, a
filesystem abstraction layer with a lot of adapters implemented.</p>

<p>In <a href="https://github.com/elcodi/elcodi">Elcodi</a> we are actually using this
library and its really awesome how easy is using it.</p>

<p>We have also implemented internally some features using this architecture, for
example, the <a href="https://github.com/elcodi/elcodi/tree/master/src/Elcodi/Component/Geo/Adapter/Populator">Geo Schema Populator</a>,
a new feature under development that will allow you to populate all Geo schema
using some adapters. Right now only GeoData adapter is implemented.</p>

<p>Another example, the
<a href="https://github.com/elcodi/elcodi/tree/master/src/Elcodi/Component/Currency/Adapter/CurrencyExchangeRatesProvider">Currency Exchange Rates Populator</a>
with OpenExchangeRates implementation already done.</p>

<h2>Final thoughts</h2>

<p>Using ports and adapters is really a great tool for those who want to uncouple
from implementations and a great pattern if you develop open source. Open source
should satisfy as people as possible, so remember, specify and then implement.</p>

<p>Try it and then tell us your experience :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One section, one component]]></title>
    <link href="http://mmoreram.github.io/blog/2014/08/12/one-section-one-component/"/>
    <updated>2014-08-12T11:29:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2014/08/12/one-section-one-component</id>
    <content type="html"><![CDATA[<p><a href="http://mmoreram.github.io/blog/2014/08/07/symfony-walk-zaragoza-madrid/">Symfony Walk</a></p>

<p><img class="[class names]" src="http://mmoreram.github.io/images/zaragoza-madrid.png" title="[Zaragoza Madrid [Zaragoza Madrid]]" ></p>

<p>Symfony Walk will contain a total of 10 sections, and each one will have the
name of one Symfony Component. One of the sections will be named <em>Doctrine</em> (yes,
our big friend Doctrine) and last Component will be named like the project I am
so proud to work in, <a href="http://elcodi.io">Elcodi</a>.</p>

<ul>
<li><a href="http://symfony.com/doc/current/components/routing/index.html">Routing</a> Section</li>
<li><a href="http://symfony.com/doc/current/components/security/index.html">Security</a> Section</li>
<li><a href="http://symfony.com/doc/current/components/console/index.html">Console</a> Section</li>
<li><a href="http://symfony.com/doc/current/components/finder.html">Finder</a> Section</li>
<li><a href="http://doctrine-orm.readthedocs.org/en/latest/">Doctrine</a> Section</li>
<li><a href="http://symfony.com/doc/current/components/event_dispatcher/index.html">EventDispatcher</a> Section</li>
<li><a href="http://symfony.com/doc/current/components/http_kernel/index.html">HttpKernel</a> Section</li>
<li><a href="http://symfony.com/doc/current/components/form/index.html">Form</a> Section</li>
<li><a href="http://symfony.com/doc/current/components/dependency_injection/index.html">DependencyInjection</a> Section</li>
<li><a href="http://elcodi.io">Elcodi</a> Section</li>
</ul>


<p>Each day, after walking around 35 Km in about 6 hours, I will post a small
introduction about the component that names the current section. I&rsquo;ll talk also
about some scenarios that this component can be useful.</p>

<p>Happy Symfony Walk.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symfony Walk: Zaragoza - Madrid]]></title>
    <link href="http://mmoreram.github.io/blog/2014/08/07/symfony-walk-zaragoza-madrid/"/>
    <updated>2014-08-07T13:49:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2014/08/07/symfony-walk-zaragoza-madrid</id>
    <content type="html"><![CDATA[<p>The 2014 Madrid SymfonyCon is closer every day, and I have to admit that
I admire this community. A community that has been able to feed the php world
with valuable projects and better people.</p>

<p>I admire the synergies that are created in different repositories that make
Symfony one of the best options when developing any
web project, and the entire ecosystem that has been created around, an ecosystem
very healthy and social.</p>

<p>That&rsquo;s why I&rsquo;ll pay my own tribute the coming months.</p>

<h3>Symfony Walk 2014</h3>

<p>The goal is to walk a path to SymfonyCon Madrid with no more tools than a
backpack and good music. The principle of such route will be Zaragoza, so the
road will be a total of about 360 kilometers.</p>

<p>I will divide the challenge in 10 days plus one resting day. During the next few
days I will also define the final route and all resting points, where I will
spend nights.</p>

<p>My reasons are none other than a mixture of personal challenge of something I&rsquo;ve
wanted to do for a long time and my gratitude to this community for all
help I&rsquo;ve received indirectly.</p>

<p>As you know I work on a project called [Elcodi] (<a href="http://elcodi.io">http://elcodi.io</a>). we have
very clear which is our philosophy and the details that we care until the
last sighs of the project, and we know it&rsquo;s not easy.</p>

<p>We have overcome challenges as an <em>open source</em> project , we are overcoming
challenges as an <em>open source</em> project, and hopefully over the next few years we
should overcome greater challenges as <em>open source</em> project .</p>

<p>Well, I think the act of walking for 70 hours in 10 days is a good
representation of what needs hard work, effort and time, but finally, in the
bottom of the road, a great reward awaits your arrival.</p>

<p>In my case, the conference .</p>

<p>I&rsquo;ll post more details about my little adventure soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Porque el orden importa]]></title>
    <link href="http://mmoreram.github.io/blog/2014/07/30/porque-el-orden-importa/"/>
    <updated>2014-07-30T11:07:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2014/07/30/porque-el-orden-importa</id>
    <content type="html"><![CDATA[<p>La verdad es que reconozco que soy un poco neurótico con el código. Y es que en
mi caso me gusta definir la belleza de mis lineas no tan solo en el aspecto
funcional y en el aspecto de arquitectura, sino en el aspecto visual. Y en
realidad considero que descuidar este aspecto es un problema muy grande a la
larga.</p>

<p>Tratemos de pensar en la cantidad de horas que estamos ante estas lineas de
código, y luego tratemos de analizar el impacto que estas tienen en nuestro día
a día. ¿No creéis que importa el hecho de que esté ordenado, limpio y tratable?</p>

<p>Pues bien, es para esto que, y dado que llevo un tiempo con la manía de ordenar
los namespaces de mis ficheros php, he decidido empezar el proyecto
<a href="https://github.com/mmoreram/php-formatter">php-formatter</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Console Tool
</span><span class='line'>
</span><span class='line'>Usage:
</span><span class='line'>  <span class="o">[</span>options<span class="o">]</span> <span class="nb">command</span> <span class="o">[</span>arguments<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>  --help           -h Display this <span class="nb">help </span>message.
</span><span class='line'>  --quiet          -q Do not output any message.
</span><span class='line'>  --verbose        -v|vv|vvv Increase the verbosity of messages
</span><span class='line'>  --version        -V Display this application version.
</span><span class='line'>  --ansi              Force ANSI output.
</span><span class='line'>  --no-ansi           Disable ANSI output.
</span><span class='line'>  --no-interaction -n Do not ask any interactive question.
</span><span class='line'>
</span><span class='line'>Available commands:
</span><span class='line'>  <span class="nb">help       </span>Displays <span class="nb">help </span><span class="k">for </span>a <span class="nb">command</span>
</span><span class='line'><span class="nb">  </span>list       Lists commands
</span><span class='line'>use
</span><span class='line'>  use:sort   Sort Use statements
</span></code></pre></td></tr></table></div></figure>


<p>Lejos de ser un analizador de PSR, cuya función ya cumple a la perfección el
proyecto de Fabien Potencier <a href="https://github.com/fabpot/php-cs-fixer">php-cs-fixer</a>,
se trata de añadir, en modo comando, algunas funcionalidades tediosas que para mí
son importantes, como es el caso de los Use Statements ( Poder ordenarlos por
grupos, alfabéticamente o por longitud, ascendiente o descendiente&hellip; )</p>

<p>De momento solo hay esta funcionalidad, y aún le faltan un par de opciones, pero
no dudéis en proponer comandos que nos puedan ser útiles a todos.</p>

<p>Os invito a que tengáis reglas estructurales y visuales en vuestros proyectos,
ya que ayudan un poco a que el código quede un poco más estandarizado con el
paso del tiempo, aunque sea a nivel visual.</p>

<p>Vuestros ojos os lo agradecerán.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elcodi wants you]]></title>
    <link href="http://mmoreram.github.io/blog/2014/07/21/elcodi-wants-you/"/>
    <updated>2014-07-21T21:28:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2014/07/21/elcodi-wants-you</id>
    <content type="html"><![CDATA[<p>Right. Elcodi wants you.</p>

<p><a href="http://elcodi.io">Elcodi Project</a></p>

<p>And Elcodi wants you because you are ambitious, a fighter, a ninja developer
eager to learn and to teach.</p>

<p>Elcodi wants you because you are a follower of good practices and have a sound
software craftsmanship mindset, because you are a perfectionist, because your
inspiring work is a way of life.</p>

<p>Elcodi wants you because you firmly believe that an open-source environment is a
trigger that can detonate personal and professional achievements.</p>

<p>We believe we are doing a good job. We are not alone in believing it, many
others do. This is why we have decided take it to the next level and start to
evolve, growing the team and our vision.</p>

<p>We really aim to make things the right way by unfolding the power of
collaborative software development and this is why we need your voice, your
ideas, your enthusiasm and, of course, we need your hands. Skillful, experienced
and visionary artisan hands.</p>

<p>If you share our vision and want to collaborate with a truly inspiring project,
contact me at <code>yuhu@mmoreram.com</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ControllerExtraBundle, some useful Controller annotations]]></title>
    <link href="http://mmoreram.github.io/blog/2014/06/30/controller-extra-bundle/"/>
    <updated>2014-06-30T17:03:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2014/06/30/controller-extra-bundle</id>
    <content type="html"><![CDATA[<p>Few days ago, at the bimonthly meeting of Symfony2 Barcelona, attendees
began to discuss the annotations. Obviously, given that it is a
practice that goes against many many philosophies or architectural strategies ,
many people were against them, and some people where I include myself, were in
favor.</p>

<p>Being in favor of annotations does not mean wanting to use everywhere
but take them into account when the occasion required it is.</p>

<p>We could divide Symfony2 project into two blocks in this case. the
first is the model, a set of elements that implement our domain.
Doctrine has some annotations to define how this model maps to the
database, and I admit that at the first, when you are in the lower part
and elemental learning curve, are very positive elements for all developers.</p>

<p>However, at the time that you must have actual control of your domain, and
the time domain may be used in more than one project and more than
a framework, we have a problem. So, and I will not go into details,
I conclude that annotations never should be used in the domain model.</p>

<p>On the other hand, we have the application, the entry point. The controllers.</p>

<p>Let me ask you a question.</p>

<p>Do you think your application will change its framework someday? And given that
the answer is affirmative&hellip; Do you think you will maintain your controllers?</p>

<p>Both questions can be answered affirmatively, but is a very very rarely
situation where, surely, most of you will never have to manage. So I think that
we should thread Controllers in a very different way than Model.</p>

<p>IMHO, I am used to using annotations, because simplifies a lot some repetitive
processes, and gives me a very visual definition of what my action is responding
against, and what configuration are being applied.</p>

<p>Maybe is not the best of the options in some cases, but if the annotations is
well documented and defined, maybe could be useful in lot of cases.</p>

<p>In Symfony Controllers we have those annotations (Surely there are more, but I
consider that those are the most useful of them)</p>

<ul>
<li>ParamConverter &ndash; Good annotation. The code is a little bit messy but I am very
thankful. At the point I needed to define the namespace of the entity through a
container parameter, this annotations became useless.</li>
<li>Method, Router y Template &ndash; Very useful for non-customizable projects. Worth
considering in our projects if we really do not need any kind of customization,
like custom routes.</li>
<li>Secure &ndash; Static. Very useful if you accept your controllers will never change
its secure definition.</li>
</ul>


<p>Given my little devotion for these controller annotations, some months ago I
decided to detect some needs I had in some personal projects, needs to repeat
some code once and again, code that had nothing to do with my business. I tried
to implement my annotations as flexible as possible.</p>

<p>For that I created <a href="https://github.com/mmoreram/ControllerExtraBundle">ControllerExtraBundle</a>.
This bundle, in addition to provide a set of Symfony2 annotations for
controllers, provides you a platform and a documentation to implement yourself
your own needs.</p>

<p>Actually this bundle is stable at version <code>v.1.1.2</code> and have this annotations</p>

<h2>@Paginator</h2>

<p><a href="https://github.com/mmoreram/ControllerExtraBundle#paginator">@Paginator Documentation</a></p>

<p>Allows you to inject a Doctrine Paginator given a route and a configuration. Is
very flexible but has to evolve even more.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Simple controller method</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * This Controller matches pattern /paginate/nb/{limit}/{page}</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * Where:</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * * limit = 10</span>
</span><span class='line'><span class="sd"> * * page = 1</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @PaginatorAnnotation(</span>
</span><span class='line'><span class="sd"> *      class = (</span>
</span><span class='line'><span class="sd"> *          factoryClass = &quot;Mmoreram\ControllerExtraBundle\Factory\EntityFactory&quot;,</span>
</span><span class='line'><span class="sd"> *          factoryMethod = &quot;create&quot;,</span>
</span><span class='line'><span class="sd"> *          factoryStatic = true</span>
</span><span class='line'><span class="sd"> *      ),</span>
</span><span class='line'><span class="sd"> *      page = &quot;~page~&quot;,</span>
</span><span class='line'><span class="sd"> *      limit = &quot;~limit~&quot;,</span>
</span><span class='line'><span class="sd"> *      orderBy = {</span>
</span><span class='line'><span class="sd"> *          { &quot;x&quot;, &quot;createdAt&quot;, &quot;ASC&quot; },</span>
</span><span class='line'><span class="sd"> *          { &quot;x&quot;, &quot;updatedAt&quot;, &quot;DESC&quot; },</span>
</span><span class='line'><span class="sd"> *          { &quot;x&quot;, &quot;id&quot;, &quot;0&quot;, {</span>
</span><span class='line'><span class="sd"> *              &quot;1&quot; = &quot;ASC&quot;,</span>
</span><span class='line'><span class="sd"> *              &quot;2&quot; = &quot;DESC&quot;,</span>
</span><span class='line'><span class="sd"> *          }}</span>
</span><span class='line'><span class="sd"> *      },</span>
</span><span class='line'><span class="sd"> *      wheres = {</span>
</span><span class='line'><span class="sd"> *          { &quot;x&quot;, &quot;enabled&quot; , &quot;=&quot;, true }</span>
</span><span class='line'><span class="sd"> *      },</span>
</span><span class='line'><span class="sd"> *      leftJoins = {</span>
</span><span class='line'><span class="sd"> *          { &quot;x&quot;, &quot;relation&quot;, &quot;r&quot; },</span>
</span><span class='line'><span class="sd"> *          { &quot;x&quot;, &quot;relation2&quot;, &quot;r2&quot; },</span>
</span><span class='line'><span class="sd"> *          { &quot;x&quot;, &quot;relation5&quot;, &quot;r5&quot;, true },</span>
</span><span class='line'><span class="sd"> *      },</span>
</span><span class='line'><span class="sd"> *      innerJoins = {</span>
</span><span class='line'><span class="sd"> *          { &quot;x&quot;, &quot;relation3&quot;, &quot;r3&quot; },</span>
</span><span class='line'><span class="sd"> *          { &quot;x&quot;, &quot;relation4&quot;, &quot;r4&quot;, true },</span>
</span><span class='line'><span class="sd"> *      },</span>
</span><span class='line'><span class="sd"> *      notNulls = {</span>
</span><span class='line'><span class="sd"> *          {&quot;x&quot;, &quot;address1&quot;},</span>
</span><span class='line'><span class="sd"> *          {&quot;x&quot;, &quot;address2&quot;},</span>
</span><span class='line'><span class="sd"> *      }</span>
</span><span class='line'><span class="sd"> * )</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">indexAction</span><span class="p">(</span><span class="nx">Paginator</span> <span class="nv">$paginator</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>@Entity</h2>

<p><a href="https://github.com/mmoreram/ControllerExtraBundle#entity">@Entity Documentation</a></p>

<p>Generates a new entity instance, given an entity definition. This definition can
be given a namespace, a container parameter, a doctrine shortcut or a factory
definition.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\ControllerExtraBundle\Annotation\Entity</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\ControllerExtraBundle\Entity\User</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Simple controller method</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * This Controller matches pattern /user/edit/{id}/{username}</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @Entity(</span>
</span><span class='line'><span class="sd"> *      class = {</span>
</span><span class='line'><span class="sd"> *          &quot;factory&quot; = &quot;my.factory.service&quot;,</span>
</span><span class='line'><span class="sd"> *          &quot;method&quot;  = &quot;generate&quot;,</span>
</span><span class='line'><span class="sd"> *          &quot;static&quot;  = false,</span>
</span><span class='line'><span class="sd"> *      },</span>
</span><span class='line'><span class="sd"> *      name  = &quot;user&quot;</span>
</span><span class='line'><span class="sd"> * )</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">indexAction</span><span class="p">(</span><span class="nx">User</span> <span class="nv">$user</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// $user is an empty instance</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also, and since some days ago, not only inject an empty entity instance
but retrieve an existing mapped instance like ParamConverter does, but in a very
easy way.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\ControllerExtraBundle\Annotation\Entity</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\ControllerExtraBundle\Entity\User</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Simple controller method</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * This Controller matches pattern /user/edit/{id}/{username}</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @Entity(</span>
</span><span class='line'><span class="sd"> *      class = &quot;MmoreramCustomBundle:User&quot;,</span>
</span><span class='line'><span class="sd"> *      name  = &quot;user&quot;,</span>
</span><span class='line'><span class="sd"> *      mapping = {</span>
</span><span class='line'><span class="sd"> *          &quot;id&quot;: &quot;~id~&quot;,</span>
</span><span class='line'><span class="sd"> *          &quot;username&quot;: &quot;~username~&quot;</span>
</span><span class='line'><span class="sd"> *      }</span>
</span><span class='line'><span class="sd"> * )</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">indexAction</span><span class="p">(</span><span class="nx">User</span> <span class="nv">$user</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// $user is a mapped entity</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>@Form</h2>

<p><a href="https://github.com/mmoreram/ControllerExtraBundle#form">@Form Documentation</a></p>

<p>Generates a simple FormType, FormInterface of FormView instance, given a form
definition. You can also configure it to create given a mapped or a new entity
instance and you can also handleRequest it and validate.</p>

<p>To create it given a mapped or a new entity instance, you can combine it using
both @ParamConverter or @Entity annotations.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Sensio\Bundle\FrameworkExtraBundle\Configuration\Route</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Sensio\Bundle\FrameworkExtraBundle\Configuration\ParamConverter</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Form\Form</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\ControllerExtraBundle\Annotation\Form</span> <span class="k">as</span> <span class="nx">AnnotationForm</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\ControllerExtraBundle\Entity\User</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Simple controller method</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @Route(</span>
</span><span class='line'><span class="sd"> *      path = &quot;/user/{id}&quot;,</span>
</span><span class='line'><span class="sd"> *      name = &quot;view_user&quot;</span>
</span><span class='line'><span class="sd"> * )</span>
</span><span class='line'><span class="sd"> * @Entity(</span>
</span><span class='line'><span class="sd"> *      class = &quot;MmoreramCustomBundle:User&quot;,</span>
</span><span class='line'><span class="sd"> *      name  = &quot;user&quot;,</span>
</span><span class='line'><span class="sd"> *      mapping = {</span>
</span><span class='line'><span class="sd"> *          &quot;id&quot;: &quot;~id~&quot;</span>
</span><span class='line'><span class="sd"> *      }</span>
</span><span class='line'><span class="sd"> * )</span>
</span><span class='line'><span class="sd"> * @AnnotationForm(</span>
</span><span class='line'><span class="sd"> *      class         = &quot;user_type&quot;,</span>
</span><span class='line'><span class="sd"> *      entity        = &quot;user&quot;</span>
</span><span class='line'><span class="sd"> *      handleRequest = true,</span>
</span><span class='line'><span class="sd"> *      name          = &quot;userForm&quot;,</span>
</span><span class='line'><span class="sd"> *      validate      = &quot;isValid&quot;,</span>
</span><span class='line'><span class="sd"> * )</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">indexAction</span><span class="p">(</span><span class="nx">User</span> <span class="nv">$user</span><span class="p">,</span> <span class="nx">Form</span> <span class="nv">$userForm</span><span class="p">,</span> <span class="nv">$isValid</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>@Flush</h2>

<p><a href="https://github.com/mmoreram/ControllerExtraBundle#flush">@Flush Documentation</a></p>

<p>Allows you to automate a flush every time a response is returned. There are
some real philosophies that say that a single flush should be executed always
at the end of the request.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Sensio\Bundle\FrameworkExtraBundle\Configuration\ParamConverter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\ControllerExtraBundle\Annotation\Flush</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\ControllerExtraBundle\Entity\Address</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\ControllerExtraBundle\Entity\User</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Simple controller method</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @ParamConverter(&quot;user&quot;, class=&quot;MmoreramCustomBundle:User&quot;)</span>
</span><span class='line'><span class="sd"> * @ParamConverter(&quot;address&quot;, class=&quot;MmoreramCustomBundle:Address&quot;)</span>
</span><span class='line'><span class="sd"> * @Flush(</span>
</span><span class='line'><span class="sd"> *      entity = {</span>
</span><span class='line'><span class="sd"> *          &quot;user&quot;,</span>
</span><span class='line'><span class="sd"> *          &quot;address&quot;</span>
</span><span class='line'><span class="sd"> *      }</span>
</span><span class='line'><span class="sd"> * )</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">indexAction</span><span class="p">(</span><span class="nx">User</span> <span class="nv">$user</span><span class="p">,</span> <span class="nx">Address</span> <span class="nv">$address</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>@JsonResponse</h2>

<p><a href="https://github.com/mmoreram/ControllerExtraBundle#jsonresponse">@JsonResponse Documentation</a></p>

<p>This annotation converts your controller return value in a single response,
using your data serialized with php <code>json_encode()</code>. This follows same way
@Template does.</p>

<p>IMHO, very useful.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\ControllerExtraBundle\Annotation\JsonResponse</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Simple controller method</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @JsonResponse</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">indexAction</span><span class="p">(</span><span class="nx">User</span> <span class="nv">$user</span><span class="p">,</span> <span class="nx">Address</span> <span class="nv">$address</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;This is my response&#39;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>@Log</h2>

<p><a href="https://github.com/mmoreram/ControllerExtraBundle#log">@Log Documentation</a></p>

<p>Automatic log system for controller methods. You can define level of your log
and the moment you want to do it (before, after, both)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\ControllerExtraBundle\Annotation\Flush</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Simple controller method</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @Log(</span>
</span><span class='line'><span class="sd"> *      value   = &quot;Executing index Action&quot;,</span>
</span><span class='line'><span class="sd"> *      level   = @Log::LVL_WARNING</span>
</span><span class='line'><span class="sd"> * )</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">indexAction</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symfony Barcelona]]></title>
    <link href="http://mmoreram.github.io/blog/2014/06/25/symfony-barcelona/"/>
    <updated>2014-06-25T11:46:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2014/06/25/symfony-barcelona</id>
    <content type="html"><![CDATA[<p>Queridos developers de Barcelona y alrededores.</p>

<p>Como ya sabréis algunos, en Barcelona tenemos una comunidad muy interesante de
developers interesados en Symfony y Cervezas. Cada par de meses nos reunimos todos
en un bar y nos echamos un par de charlas relacionadas con nuestro entorno de
programación. Hablamos, bebemos como si no hubiera un mañana y nos intentamos
ayudar con aquellas cosas que nos interesan.</p>

<pre><code>- Hola, buenas tardes.
- Buenas tardes.
- ¿Y tu eres programador Symfony?
- Si claro.
- ¿Y vendrás a la próxima Symfony Barcelona?
- ¿Qué es esto?
</code></pre>

<p>Desde Symfony Barcelona queremos llegar a todos los developers PHP de la ciudad
que estamos aquí. Que existimos y que los queremos con nosotros.
(evidentemente no queremos ser centralistas, y ya que somos la única comunidad
symfony en Catalunya, todos los developers son bienvenidos, amados y queridos de
la misma forma)</p>

<p>Es por esto que invocamos el Dios del boca-a-boca para hacer del siguiente
evento Symfony algo nuevo para muchos y que encuentren un punto de encuentro
entre personas con los mismos problemas entre código.</p>

<p>Recordad que será el día 2 de Julio en el centro de Barcelona. Podéis apuntaros
en la página <a href="http://symfony-barcelona.es">Symfony Barcelona</a>, así como seguir
el usuario de twitter <a href="http://twitter.com/symfony_bcn">@symfony_bcn</a> y estar un
poco más al día de nuestros movimientos</p>

<p>En este caso tendremos una charla de Git, una de RabbitMQ, y finalmente
abriremos un debate entre todos los asistentes sobre un tema aún abierto (Podéis
dar vuestra opinión, propuestas, o mandarnos un cheque en blanco en el
<a href="https://groups.google.com/forum/#!topic/symfony_barcelona/vd7Ld5k3fpQ">grupo de google groups</a>)</p>

<p>Para la buena difusión del evento, recordad hacer (re)tweet del post, así como
ponerlo en las redes sociales, escribirlo a mano en un papel y ponerlo en las
patas de alguna paloma o en alguna botella surcadora de mares y horizontes.</p>

<p>Os esperamos a todos para brindar por esta comunidad tan molona :D</p>

<p>Salutacions!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Las modas y sus modelos me tienen frito]]></title>
    <link href="http://mmoreram.github.io/blog/2014/05/22/las-modas-y-los-modelos-me-tienen-fritos/"/>
    <updated>2014-05-22T12:27:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2014/05/22/las-modas-y-los-modelos-me-tienen-fritos</id>
    <content type="html"><![CDATA[<p>Las modas y sus modelos me tienen frito.</p>

<p>Empiezo así mi post porque no sabría como empezarlo sin ser más directo.
Me tienen frito.</p>

<p>Parece que, a pesar de intentar sacar el pecho cuando alguien se mete con
nuestro trabajo, no tenemos personalidad alguna. Parece que nuestra voz no es
otra cosa que un pequeño altavoz, muchas veces rallado y penetrante, cuyo único
objetivo a lo largo del día es, o bien repetir lo que dicen algunas
personalidades, o tratar de imbéciles a los que no piensan igual. Nada más.</p>

<p>Yo soy un gran fan del clean code. No, no me he leido el libro ( Creo que me
repito, pero por si acaso ) y no por esto no puedo corroborar que me ayuda
trabajar de esta forma, y podría llegar a demostrar la cantidad de horas que
me he ahorrado escribiendo mi código bien a la primera.</p>

<p>Ahora bien, tenemos claro que muchas cosas de las que hacemos, las hacemos por
algo? O justamente las hacemos porque lo ha dicho el CTO de no se donde? Es
decir, tenemos control real sobre nuestra infrastuctura, habiendo diseñado
nuestro código conforme a nuestras necesidades reales? O simplemente hemos hecho
el estúpido y vago ejercicio de leernos cuatro libros, visto cuatro charlas y
aceptar que en sus frases no hay nada más que la verdad, copiando sobre el papel
cada idea transmitida por el escritor u orador?</p>

<p>Esto lo suelo pensar mucho, y más ahora que dedico mi tiempo laboral a un
proyecto opensource. Mis movimientos, mis decisiones, afectan no tan solo a mi
proyecto, sino a miles de ellos (Almenos, espero, en un futuro no muy lejano).
Tengo las mismas necesidades que cualquier otro programador a cargo de otro tipo
de proyecto?</p>

<p>Pues yo creo que no.</p>

<p>En nuestro proyecto vamos a tomar decisiones sin basarnos en las modas baratas
(Que no inútiles) que salen continuamente. Baratas porque cuestan muy pocos
comentarios hacerlas pasar de un valor popular incalculable a tener una pésima
valoración, siendo estos comentarios frecuentemente ajenos a nuestros intereses.</p>

<p>Hay que pensar las cosas, discutirlas y identificar sus porqués Pero no os
equivoquéis. El porqué de las cosas es algo relativo, no absoluto. El por qué
tengo que implementar ciertos patrones en mi proyecto, no puedo ni apenas
discutirlo con una persona que desconoce completamente tu modelo de negocio,
tus necesidades comerciales, tus direcciones técnicas. Estas decisiones solo las
puedes tomar tu y tu equipo.</p>

<p>Eso significa que tenemos que dejar de escuchar? Para nada. En escuchar, hablar,
compartir y enseñar está el verdadero valor del progreso y de nuestro trabajo,
pero no podemos quedarnos en este punto, no podemos aceptar que todo lo que dice
una persona con más de medio millón de followers en el twitter es algo que,
seguro, funcionará en mi proyecto.</p>

<p>Hay que pensar las cosas. Y cuando piensas, aprendes. Y aprendiendo, progresas.
Y un día te encuentras que tienes todas las herramientas para poder decidir con
mucha más precisión&hellip; Tanta precisión que resulta que la gente empieza a
escucharte&hellip; Y un día te levantas de la cama y ya tienes medio millón de
followers en el Twitter, y te das cuenta que todo lo que dices, sirve de
referencia para muchísima gente, y en consecuencia para las direcciones técnicas
de muchos proyectos.</p>

<p>Y te acuerdas de todo esto, y en lugar de decir &ldquo;Esto hay que hacerlo así, o lo
estás haciendo mal&rdquo;, acabas transformando tu discurso en &ldquo;Si tenéis este
problema, podéis solucionarlo así. A mí me ha funcionado, espero que a vosotros
también&rdquo;.</p>

<p>De momento, y mientras esto no sea así, las modas y sus modelos me tienen frito.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sobre reglas y ExpressionLanguage]]></title>
    <link href="http://mmoreram.github.io/blog/2014/05/20/about-rules-and-expression-language/"/>
    <updated>2014-05-20T14:00:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2014/05/20/about-rules-and-expression-language</id>
    <content type="html"><![CDATA[<blockquote><p>You can read an english translation in
<a href="http://blog.elcodi.io/blog/2014/05/20/about-rules-and-expressionlanguage/">Elcodi blog</a></p></blockquote>

<p>Esta implementación trabaja con el ExpressionLanguage de Symfony.</p>

<p>Para instalarlo o entender como funciona, así como para descubrir la syntaxis de
las Expressions puedes utilizar la
<a href="http://symfony.com/doc/current/components/expression_language/index.html">Documentación oficial del Componente</a></p>

<h3>Nuestras necesidades</h3>

<p>En realidad podríamos decir que estamos ante uno de los mayores problemas que ha
sufrido cualquier programador que se haya dedicado mínimamente al ecommerce:
Las reglas de acción. El ejemplo más significativo son los cupones. Cuándo un
cupón es válido? Y dado que hay una cantidad bestial de distintos cupones y
distintas lógicas de aplicación, y dado que estas son distintas y própias de
cada uno de los proyectos&hellip; como se puede abstraer la lógica para que se pueda
hacer algo &ldquo;neutral&rdquo; y lo suficientemente flexible para que todo el mundo lo
pueda utilizar?</p>

<p>Pues esta es una de nuestras preocupaciones principales, ya que la solución a
esta pregunta, de rebote, nos soluciones otros problema paralelos, como por
ejemplo cuando se aplican ciertas acciones, o hasta generar un eventDispatcher
muy flexible, que active cierto evento en cierto punto de la request, si aplica
un conjunto de condiciones.</p>

<h3>Nuestro propósito</h3>

<p><a href="https://github.com/elcodi/RuleBundle">Elcodi RuleBundle</a></p>

<p>Nuestra propuesta no es demasiado compleja.</p>

<p>Partimos de un modelo completamente desacoplado y standalone. El motor de reglas
proporciona una gestión de las mismas independientemente de donde se quieran
utilizar, ya que la única misión para este módulo es devolver <code>true</code> o <code>false</code>.</p>

<p>En este caso hemos tratado con dos tipos de reglas, las Rules y las RuleGroups.
El sentido de la primera es simple, una regla simple que, evaluada, devuelve un
booleano. El sentido de la segunda es en cambio, agrupar Rules, de tal forma
que si decidimos aplicar un conjunto de reglas unidas, podamos trabajar con el
conjunto directamente, y asociarlo a un comportamiento.</p>

<p>Dado este modelo, es bastante evidente que requiere de un Composite Pattern para
que sea más fácil trabajar, ya que este nos proporciona una sola entidad,
independientemente que sea Rule o RuleGroup, y le da un comportamiento común a
ambos, que es al fín y al cabo, el mas importante: Evalúate.</p>

<h3>Utilizando composite pattern con Doctrine</h3>

<p>La primera pregunta que nos viene a la cabeza es&hellip; De que se trata el Composite
Pattern?</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Composite_UML_class_diagram_%28fixed%29.svg/900px-Composite_UML_class_diagram_%28fixed%29.svg.png" title="composite pattern" alt="Composite pattern" /></p>

<p>En este caso tenemos que tanto Leaf como Composite son dos entidades distintas.
Leaf sería nuestro Rule y Composite sería nuestro RuleGroup. Podemos ver que,
como ambos extienden de un objeto abstracto llamado Component, se puede forzar
que ambos tengan un comportamiento común. En esta gráfica, el abstracto define
un método y lo implementa, dando un comportamiento por defecto y dando la
oportunidad de sobreescribir este comportamiento. En nuestro caso, <code>operation()</code>
responde a la necesidad de devolver todas las expressions del objeto (En el
caso de Rule, una sola expression, en el caso de RuleGroup, todas las
expressions de sus hijos), por lo que se ha definido el método como abstracto,
así cada entidad debe implementar el método a su modo.</p>

<p>Finalmente, y lo que define realmente a este patrón, es que Composite
(RuleGroup) tiene un conjunto de hijos (en nuestro caso Rules) que tanto
pueden ser del tipo Rule o del tipo RuleGroup, por lo que la relación se hace
directamente con el Abstracto.</p>

<p>Esta implementación permite que, cuando se pide las Expression de un RuleGroup,
esta te devuelva la de todos sus hijos, sean Rule o RuleGroup, ya que ambos
elementos implementan el mismo método.</p>

<p>Doctrine te permite hacer esta implementación utilizando el STI (Single Table
Inheritance) o el CTI (Class Table Inheritance). En este caso, y para
ahorrarnos demasiadas joins, hemos tratado la implementación con STI.</p>

<p>Definimos la entidad Rule</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * This file is part of the Elcodi package.</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Elcodi\RuleBundle\Entity</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Class Rule</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Rule</span> <span class="k">extends</span> <span class="nx">AbstractRule</span> <span class="k">implements</span> <span class="nx">RuleInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var ExpressionInterface</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Expression</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$expression</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Specific class parameters, getters and setters</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Return all object contained expressions</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return ArrayCollection Collection of expressions</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getExpressionCollection</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nx">ArrayCollection</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getExpression</span><span class="p">()));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Definimos la entidad RuleGroup</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * This file is part of the Elcodi package.</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Elcodi\RuleBundle\Entity</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Class RuleGroup</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">RuleGroup</span> <span class="k">extends</span> <span class="nx">AbstractRule</span> <span class="k">implements</span> <span class="nx">RuleGroupInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var Collection</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Rules</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$rules</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Specific class parameters, getters and setters</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Return all object contained expressions</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return ArrayCollection Collection of expressions</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getExpressionCollection</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$expressions</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="sd">/**</span>
</span><span class='line'><span class="sd">         * @var AbstractRuleInterface $rule</span>
</span><span class='line'><span class="sd">         */</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getRules</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$rule</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="nv">$expressions</span> <span class="o">=</span> <span class="nb">array_merge</span><span class="p">(</span>
</span><span class='line'>                <span class="nv">$expressions</span><span class="p">,</span>
</span><span class='line'>                <span class="nv">$rule</span><span class="o">-&gt;</span><span class="na">getExpressionCollection</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">toArray</span><span class="p">()</span>
</span><span class='line'>            <span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nx">ArrayCollection</span><span class="p">(</span><span class="nv">$expressions</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Y finalmente la clase abstracta</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * This file is part of the Elcodi package.</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Elcodi\RuleBundle\Entity\Abstracts</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Class AbstractRule</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">AbstractRule</span> <span class="k">extends</span> <span class="nx">AbstractEntity</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Specific class parameters, getters and setters</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Return all object contained expressions</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return Collection Collection of expressions</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">public</span> <span class="k">function</span> <span class="nf">getExpressionCollection</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ambas clases implementan a su modo el método <code>getExpressionCollection()</code> por lo
que cuando se trate con un ArrayCollection devuelto por Doctrine, todas las
instancias tendrán el método.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd">* @var Collection $rules</span>
</span><span class='line'><span class="sd">*/</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$rules</span> <span class="k">as</span> <span class="nv">$rule</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="sd">/**</span>
</span><span class='line'><span class="sd">    * @var AbstractRule $rule</span>
</span><span class='line'><span class="sd">    */</span>
</span><span class='line'>   <span class="nv">$expressionCollection</span> <span class="o">=</span> <span class="nv">$rule</span><span class="o">-&gt;</span><span class="na">getExpressionCollection</span><span class="p">();</span>
</span><span class='line'>   <span class="o">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Una vez tenemos las clases, debemos mapearlas a Doctrine.</p>

<p>Mapeamos la clase Rule, con una relación unidireccional con Expression</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">Elcodi\RuleBundle\Entity\Rule</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">entity</span>
</span><span class='line'>    <span class="l-Scalar-Plain">repositoryClass</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Elcodi\RuleBundle\Repository\RuleRepository</span>
</span><span class='line'>    <span class="l-Scalar-Plain">table</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">rule</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">oneToOne</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">expression</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">targetEntity</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Elcodi\RuleBundle\Entity\Expression</span>
</span><span class='line'>            <span class="l-Scalar-Plain">cascade</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span> <span class="nv">all</span> <span class="p-Indicator">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mapeamos la clase RuleGroup, con una relación ManyToMany unidireccional (No nos
interesa saber <code>parents()</code>) con AbstractRule</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">Elcodi\RuleBundle\Entity\RuleGroup</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">entity</span>
</span><span class='line'>    <span class="l-Scalar-Plain">repositoryClass</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Elcodi\RuleBundle\Repository\RuleGroupRepository</span>
</span><span class='line'>    <span class="l-Scalar-Plain">table</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">rule_group</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">manyToMany</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">rules</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">targetEntity</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Elcodi\RuleBundle\Entity\Abstracts\AbstractRule</span>
</span><span class='line'>            <span class="l-Scalar-Plain">joinTable</span><span class="p-Indicator">:</span>
</span><span class='line'>                <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">rule_group_rule</span>
</span><span class='line'>                <span class="l-Scalar-Plain">joinColumns</span><span class="p-Indicator">:</span>
</span><span class='line'>                    <span class="l-Scalar-Plain">rule_group_id</span><span class="p-Indicator">:</span>
</span><span class='line'>                        <span class="l-Scalar-Plain">referencedColumnName</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">id</span>
</span><span class='line'>                <span class="l-Scalar-Plain">inverseJoinColumns</span><span class="p-Indicator">:</span>
</span><span class='line'>                    <span class="l-Scalar-Plain">rule_id</span><span class="p-Indicator">:</span>
</span><span class='line'>                        <span class="l-Scalar-Plain">referencedColumnName</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">id</span>
</span></code></pre></td></tr></table></div></figure>


<p>Y finalmente generamos el mapeo de la clase abstracta</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">Elcodi\RuleBundle\Entity\Abstracts\AbstractRule</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">entity</span>
</span><span class='line'>    <span class="l-Scalar-Plain">repositoryClass</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Elcodi\RuleBundle\Repository\AbstractRuleRepository</span>
</span><span class='line'>    <span class="l-Scalar-Plain">inheritanceType</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">single_table</span>
</span><span class='line'>    <span class="l-Scalar-Plain">discriminatorColumn</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">discr</span>
</span><span class='line'>        <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">string</span>
</span><span class='line'>    <span class="l-Scalar-Plain">discriminatorMap</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">rule</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Elcodi\RuleBundle\Entity\Rule</span>
</span><span class='line'>        <span class="l-Scalar-Plain">rule_group</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Elcodi\RuleBundle\Entity\RuleGroup</span>
</span><span class='line'>    <span class="l-Scalar-Plain">fields</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Esta configuración creará una sola tabla, con un campo dedicado a decirle a
Doctrine de que tipo es la fila en cuestión.</p>

<p>Llegados a este punto, tenemos una implementación para poder asignar a cualquier
entidad una relación con Rules, teniendo solucionado, almenos a nivel de dominio
y de implementación el concepto &ldquo;Regla de Reglas&rdquo;, pero ahora falta solucionar
el cómo se ejecutan estas reglas y el contexto en el que lo hacen.</p>

<h3>Configuración de contexto y customización</h3>

<p>Definamos contexto en el que una regla se ejecuta como el conjunto de elementos
en el que la regla tiene acceso en el momento de la ejecución.</p>

<p>Ya que el motor trabaja utilizando el ExpressionLanguage de Symfony, hemos
utilizado su forma de contextualizar una evaluación.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$language</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ExpressionLanguage</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Apple</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nv">$variety</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$apple</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Apple</span><span class="p">();</span>
</span><span class='line'><span class="nv">$apple</span><span class="o">-&gt;</span><span class="na">variety</span> <span class="o">=</span> <span class="s1">&#39;Honeycrisp&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertTrue</span><span class="p">(</span><span class="nv">$language</span><span class="o">-&gt;</span><span class="na">evaluate</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;fruit.variety === &quot;Honeycrisp&quot;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;fruit&#39;</span> <span class="o">=&gt;</span> <span class="nv">$apple</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>En este caso, ejecutamos la expresión &ldquo;fruit.variety&rdquo; en un contexto donde
<code>fruit</code> es nuestra instancia de <code>Apple</code>, por lo que este assert resolvería como
<code>true</code>.</p>

<p>En el caso siguiente, y teniendo la misma expresión, al tener una
contextualización distinta, no tendríamos el resultado esperado, pues devolvería
<code>false</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$language</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ExpressionLanguage</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Apple</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nv">$variety</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$apple</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Apple</span><span class="p">();</span>
</span><span class='line'><span class="nv">$apple</span><span class="o">-&gt;</span><span class="na">variety</span> <span class="o">=</span> <span class="s1">&#39;Arlet&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertTrue</span><span class="p">(</span><span class="nv">$language</span><span class="o">-&gt;</span><span class="na">evaluate</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;fruit.variety === &quot;Honeycrisp&quot;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;fruit&#39;</span> <span class="o">=&gt;</span> <span class="nv">$apple</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hay dos tipos de contextualizaciones, las que responden a una request (En toda
las evaluaciones dada una request se setean unos valores globales,
independientemente de la ejecución) y las que responden a cada llamada del
manager.</p>

<p>En este caso se trata de una contextualización de llamada, pues en esta
evaluación, <code>customer</code> responde a $myCustomer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Rule with code &quot;somecode&quot; has this expression assigned: </span>
</span><span class='line'><span class="sd"> * &quot;customer.id in [1..100]&quot;</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="nv">$myCustomer</span> <span class="o">=</span> <span class="o">...</span><span class="p">;</span>
</span><span class='line'><span class="nv">$ruleManager</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">container</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;rule_manager&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$ruleManager</span><span class="o">-&gt;</span><span class="na">evaluateByCode</span><span class="p">(</span><span class="s1">&#39;somecode&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;customer&#39;</span>  <span class="o">=&gt;</span>  <span class="nv">$myCustomer</span>
</span><span class='line'><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Es posible pero que tengamos servicios, por ejemplo, a los que queramos acceder
de forma reiterada, y que haya una forma independiente de acceder a ellos, por
ejemplo, el <code>entity_manager</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Rule with code &quot;somecode&quot; has this expression assigned: </span>
</span><span class='line'><span class="sd"> * &quot;customer_wrapper.getCustomer().getId() in [1..100]&quot;</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ruleManager</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">container</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;rule_manager&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$ruleManager</span><span class="o">-&gt;</span><span class="na">evaluateByCode</span><span class="p">(</span><span class="s1">&#39;somecode&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>customer_wrapper</code> en realidad es un servicio que, a su forma, nos instancia un
Customer recuperable mediante el método <code>getCustomer</code>. No debemos pasarlo cada
vez que queremos evaluar una Expresión, así que podemos considerarla como parte
del contexto global.</p>

<p>Como podemos añadir valores a este contexto global? Pues implementando un
<code>ContextConfigurationInterface</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * This file is part of the Elcodi package.</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Elcodi\RuleBundle\Configuration</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Doctrine\Common\Persistence\ObjectManager</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Elcodi\RuleBundle\Configuration\Interfaces\ContextConfigurationInterface</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Elcodi\RuleBundle\Services\Interfaces\ContextAwareInterface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Class ContextConfiguration</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ContextConfiguration</span> <span class="k">implements</span> <span class="nx">ContextConfigurationInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var ObjectManager</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Object manager</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$objectManager</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Construct method</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param ObjectManager $objectManager Object manager</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">ObjectManager</span> <span class="nv">$objectManager</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">objectManager</span> <span class="o">=</span> <span class="nv">$objectManager</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @param ContextAwareInterface $contextAware</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">configureContext</span><span class="p">(</span><span class="nx">ContextAwareInterface</span> <span class="nv">$contextAware</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$contextAware</span><span class="o">-&gt;</span><span class="na">addContextElement</span><span class="p">(</span><span class="s1">&#39;manager&#39;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">objectManager</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Podemos observar que en este caso estamos contextualizando todo el gestor de
expresiones con el <code>EntityManager</code> respondiendo al valor <code>manager</code>, así que
si en una Expression tenemos a expresión <code>manager.getRepository("...")</code> podremos
acceder perfectamente al EntityManager.</p>

<p>Finalmente, y para terminar de añadir este valor al contexto, debemos definir
esta clase como servicio utilizando un tag específico.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">elcodi.core.rule.configuration.context</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="err">%</span><span class="l-Scalar-Plain">elcodi.core.rule.configuration.context.class%</span>
</span><span class='line'>        <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">entity_manager</span><span class="p-Indicator">:</span> <span class="err">@</span><span class="l-Scalar-Plain">doctrine.orm.entity_manager</span>
</span><span class='line'>        <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="p-Indicator">{</span> <span class="nv">name</span><span class="p-Indicator">:</span> <span class="nv">elcodi.rule_context_configuration</span> <span class="p-Indicator">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Configuración de ExpressionLanguage y customización</h3>

<p>Otra de las facilidades que nos brinda el ExpressionLanguage es la capacidad de
crear funciones. En este caso podemos agregar nuevas funcionalidades al
ExpressionLanguage del sistema de Reglas implementando
<code>ExpressionLanguageConfigurationInterface</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * This file is part of the Elcodi package.</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Elcodi\RuleBundle\Configuration</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\ContainerInterface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Elcodi\RuleBundle\Configuration\Interfaces\ExpressionLanguageConfigurationInterface</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Elcodi\RuleBundle\Services\Interfaces\ExpressionLanguageAwareInterface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Class ExpressionLanguageConfiguration</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ExpressionLanguageConfiguration</span> <span class="k">implements</span> <span class="nx">ExpressionLanguageConfigurationInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var ContainerInterface</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Container</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$container</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Construct method</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param ContainerInterface $container Container</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">ContainerInterface</span> <span class="nv">$container</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">container</span> <span class="o">=</span> <span class="nv">$container</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Configures expression language</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param ExpressionLanguageAwareInterface $expressionLanguageAware Expression Language aware</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">configureExpressionLanguage</span><span class="p">(</span><span class="nx">ExpressionLanguageAwareInterface</span> <span class="nv">$expressionLanguageAware</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$expressionLanguage</span> <span class="o">=</span> <span class="nv">$expressionLanguageAware</span><span class="o">-&gt;</span><span class="na">getExpressionLanguage</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$expressionLanguage</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">register</span><span class="p">(</span><span class="s1">&#39;service&#39;</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;$this-&gt;get(%s)&#39;</span><span class="p">,</span> <span class="nv">$arg</span><span class="p">);</span>
</span><span class='line'>            <span class="p">},</span> <span class="k">function</span> <span class="p">(</span><span class="k">array</span> <span class="nv">$variables</span><span class="p">,</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">container</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$expressionLanguage</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">register</span><span class="p">(</span><span class="s1">&#39;parameter&#39;</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;$this-&gt;getParameter(%s)&#39;</span><span class="p">,</span> <span class="nv">$arg</span><span class="p">);</span>
</span><span class='line'>            <span class="p">},</span> <span class="k">function</span> <span class="p">(</span><span class="k">array</span> <span class="nv">$variables</span><span class="p">,</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">container</span><span class="o">-&gt;</span><span class="na">getParameter</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Vemos que hemos añadido el mismo comportamiento que tiene el ExpressionLanguage
cuando se utiliza en las definiciones del DependencyInjection. Se agregan dos
funciones nuevas y ambas requieren del container entero, por lo que se tiene que
definir esta clase como servicio, añadiendo de nuevo un tag específico.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">elcodi.core.rule.configuration.expression_language</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="err">%</span><span class="l-Scalar-Plain">elcodi.core.rule.configuration.expression_language.class%</span>
</span><span class='line'>        <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">service_container</span><span class="p-Indicator">:</span> <span class="err">@</span><span class="l-Scalar-Plain">service_container</span>
</span><span class='line'>        <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="p-Indicator">{</span> <span class="nv">name</span><span class="p-Indicator">:</span> <span class="nv">elcodi.rule_expression_language_configuration</span> <span class="p-Indicator">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>De esta forma, podríamos ejecutar esta expresión
<code>service("my_service")-&gt;getValue(parameter("my_value"))</code> sin tener una Exception
del tipo SyntaxException.</p>

<p>El RuleManager controla cuando una expresión tiene una exceptión del tipo
SyntaxException ya que tiene todo el contenido de evaluación dentro de un
try/catch. El sentido de esto es que en caso que una expresión tenga un error
porque, o bien el modelo ha cambiado o la propia implementación, debería seguir
funcionando, evidentemente devolviendo <code>false</code> como resultado.</p>

<h3>Cupones y Reglas</h3>

<p>Dado que aún no tenemos implementado las reglas en los cupones, vamos a enumerar
a nivel teórico como debería ser el comportamiento de este caso a nivel de
ejemplificación.</p>

<h4>Prerequisitos</h4>

<ul>
<li>Tenemos una relación entre Coupon y AbstractRule de ManyToMany (Un Coupon puede
tener tantos cupones como quiera, y una Regla puede estar en mas de un Cupón)</li>
<li>El usuario, a partir del código de un cupón, intenta aplicar un descuento a su
carrito. El cupón en cuestión tiene asignadas 3 Rules.</li>
</ul>


<h4>Paso a paso</h4>

<ul>
<li>El usuario aplica el cupón</li>
<li>Mediante el couponManager, se intenta aplicar el cupón al cart.</li>
<li>Se dispara un evento PreApplyToCart</li>
<li>Hay un eventListener suscrito a este evento que busca todas las Rules del cart
y las evalúa</li>
<li>Si una de ellas devuelve <code>false</code>, la evaluación conjunta devolverá <code>false</code>, por lo
que se devolverá una Exception específica</li>
<li>Por contra, si devuelve <code>true</code>, seguirá con el proceso natural (Se aplicará el
cupón)</li>
</ul>


<h3>Conclusiones</h3>

<p><code>RuleBundle</code> es una herramienta muy potente, no solo para trabajar con Reglas de
cupones sino también para poder gestionar otras necesidades como Campañas de
descuento, Grupos de usuarios, reglas de cart y reglas de producto.</p>

<p>Como siempre, esta es una aproximación a la solución, pues estamos abiertos a
debate, mejoras y <a href="https://github.com/elcodi/elcodi/tree/master/src/Elcodi/RuleBundle">contribuciones</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Restrospectiva de un ponente]]></title>
    <link href="http://mmoreram.github.io/blog/2014/05/19/restrospectiva/"/>
    <updated>2014-05-19T13:27:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2014/05/19/restrospectiva</id>
    <content type="html"><![CDATA[<p>Este fin de semana ha sido la DrupalCamp de Valencia. Tuve la suerte de ser uno
de los seleccionados para hacer una de las ponencias que tengo preparadas, con
título <em>El efecto &lsquo;este código es una basura&rsquo;</em>. Esta ponencia, preparada
esencialmente como mezcla entre show y realidad, resultó exitosa en el entorno
de confianza para el que fue creado, un entorno de amigos con los que comparto
experiencias, y practicamente mi vida en la oficina. El problema es que no lo
resultó tanto en un entorno un poco más desconocido como puede ser el de una
ponencia pública, donde no sabes quien te está escuchando.</p>

<p>Aquí están mis conclusiones y alguna que otra aclaración respecto mi ponencia.
Espero que sirva para otra gente que se hayan encontrado en mi misma situación
o que se vayan a encontrar, desafortunadamente, en un futuro.</p>

<h3>Deja clara tu intención</h3>

<p>Es importante que, antes de empezar, la gente sepa lo que va a encontrarse. Si
tu charla es un tanto distinta a las demás, cuenta el porqué y evita sorpresas
de última hora, como que el público no sepa encajar (por falta de información)
lo que estás explicando, como lo estás haciendo, o el punto de vista que estás
tomando.</p>

<p>Para mi, y tras la experiencia de ayer, es el punto más importante a tener en
cuenta.</p>

<p>En mi caso, hice una disertación completamente dramática. En ningún caso, y aún
estando en un evento de Drupal donde tendría sentido que hablara de Drupal,
quise enfocar mis críticas a ningún perfil en general, ni en ningún framework,
ni en ningún lenguaje.</p>

<p>Mi postura en toda la charla fue una simple abstracción y exageración (no tan
exagerada) de lo que uno se encuentra en la mayoría de empresas, profesionales
y humanos, porque al fin y al cabo, es lo que somos: humanos.</p>

<p>Una de las consecuencias de representar a esta sociedad es la necesidad de tener
la misma jerga que ella, en cuyo caso, no podemos dejar de pensar en palabrotas
o palabras mal sonantes (Muchas veces dejando el respeto de lado).</p>

<p>Esta fue mi intención ayer por la tarde, ponerme en la piel de todos y cada uno
de nosotros en nuestra intimidad (almenos, la mayoría, en mi opinión) y
analizar o ejemplificar como somos con lo que encontramos, y ver que aún siendo
críticos destructivos con las líneas de código que encontramos a nuestro paso, y
aún no entendiéndolas en mayor medida, somos nosotros mismos los primeros que
cometemos los mismos errores una y otra vez.</p>

<p>En la charla tuve distintos puntos de autocrítica, cosas que he hecho yo mismo
y cosas que he tenido que cambiar con el paso del tiempo, así que si en algún
momento fui crítico apuntando con el dedo, fue a mi persona.</p>

<h3>Tu charla nunca gustará a todo el mundo</h3>

<p>Miguel me lo decía, y suerte tengo de Miguel muchas veces, porque la perspectiva
que me suele dar él, poca gente me la da. <em>You know&hellip;</em></p>

<p>Al finalizar la disertación, con, por cierto, bastantes risas y algún que otro
aplauso, pensé que había sido un éxito. Para mí un éxito no es haber cambiado
la mentalidad de nadie, pues reconozco que soy el primer al que le cuesta
cambiar un hábito tan profundo como la calidad de tu propio código. Para mí, el
hecho que una de mis charlas sea un éxito es la suma de dos puntos:</p>

<ul>
<li>Que la gente se ría. Importante. La risa y el buen rollo es el calzador mágico
para que las palabras, aún siendo duras, suenen constructivas. En consecuencia
es la herramienta perfecta para proponer y compartir tu forma de pensar.</li>
<li>Que el mensaje llegue de alguna forma. La que sea, pero que llegue. La forma de ayer, la forma que creo que
puede llegar el mensaje de aceptar que la mayor parte de nuestro código no tiene
el rigor necesario, es haciendo uso de la ridiculización, la crítica y la jerga
convencional, social y humana. Estoy orgulloso de mi planteamiento, pues es la forma en la que
concebí inicialmente la estructura del mensaje.</li>
</ul>


<p>Mi sorpresa fue cuando varias personas luego me comentaron su desagrado. Entonces me dió que pensar
y llegué a todas estas conclusiones. También me consta que a la mayoría de las personas
le gustó lo que vió (al menos eso me han contado, de aquí a que sea verdad ya, es otro mundo).</p>

<p>Aún así, quiero pedir mis disculpas a todos aquellos que creyeron que era un ataque directo
a alguien, pues no fue así. Respeto a todo el mundo, haga lo que haga, y mucho más si lo que hace
, lo hace con ilusión. Respeto aún mucho más a todos aquellos que, y no conformándose con lo que tienen
buscan mucho más, aprendiendo lo que se pueda aprender de la mejor forma.</p>

<h3>Mejoras propuestas en mis charlas</h3>

<p>Me gusta hablar y no creo hacerlo mal. Reconozco que una de mis conclusiones impulsivas al
principio fue descansar de ponencias por un tiempo, pero es algo que necesito hacer
para equilibrar otra parte de mi trabajo.</p>

<p>A partir de ahora voy a cuidar mucho más las palabras que utilizo siempre que haga una
presentación, voy a comunicar muy bien el enfoque que voy a dar en las charlas y
intentaré, sin perder el buen humor con el que creo que no podría vivir, que sean
igual de dinámicas hasta ahora.</p>

<p>La ponencia en sí, he pedido que no la publiquen por razones obvias (No se si
me harán caso).</p>

<h3>Últimos pensamientos</h3>

<p>Poco más a añadir, creo que de los errores uno aprende, y agradezco tanto a todos los que
escucharon mi charla y se llevaron algo positivo a casa, como a los que no les gustó,
me lo hicieron saber y me hicieron reflexionar.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What makes Elcodi different?]]></title>
    <link href="http://mmoreram.github.io/blog/2014/05/15/what-makes-elcodi-different/"/>
    <updated>2014-05-15T17:40:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2014/05/15/what-makes-elcodi-different</id>
    <content type="html"><![CDATA[<p>Well, the league of web development, in which we play, is a fussy league, I
started to recieve the first questions about the project I find myself
developing&hellip; ¿ Why a new project called Elcodi wants to cover the needs of
ecommerce when there is something similar called Sylius?</p>

<p>Although I twitt that I would write a comparison between both platforms, I
firmly believe that it is absurd to compare them, since Sylius is a
very mature project and has lots of features we do not have ( nor will we have
short-term ). So, this post is nothing more than a declaration of intentions
about why we have decided to start a separated project from the existing
options.</p>

<p>Firstly, I want to express complete respect to Sylius. It&rsquo;s a project
built by many different contributors, and I do not want to compare their
results with our ambitions at all. I think they both are projects with
different perspectives, and since one of our most important value ​​is humility,
we start as a small project. Ambitious, but for now, small.</p>

<p>Secondly, I&rsquo;d like to share with the community what I think are the three basic
pillars in our project. All three are equally important and we strongly believe
that one feeds the others. We are very strict on these three aspects, and it
will remain as it is throughout the years.</p>

<h2>Event-Driven Design</h2>

<p>Elcodi is a completely event-oriented project. All components have a set of
events, especially designed to customize the behavior of a specific action.</p>

<p>Not giving importance to this point means that many people will have to fork
the project itself to implement their own behaviors, and this is not a good
philosophy. A third party component should behave as such, giving a high degree
of customization.</p>

<h2>Clean Code</h2>

<p>Our first and most important objective is to provide developers with a set of
useful tools for working their own implementations. We do not claim to be the
all-purpose and immediate solution for existing projects. Our desire is to
provide a completely customizable workbench in order to solve those recurring
ecommerce projects problems.</p>

<p>For example, we can not deliver an all-inclusive Cart management solution for obvious reasons: each
project has its own unique business needs. What we can do is to propose a
simple common behavior, thus giving the opportunity to evolve by offering a
completely customizable model, giving the opportunity to extend behaviors thanks
to the proposed event structure and by offering a decent and growing documentation.</p>

<p>In my view, realistically, since real needs generate from a heterogeneous community
composed by people with different levels of skills and experience, we will just
collect these needs. Consequently, we will take care of the programming style,
clean code design and standardization so that every line of code can be understood
by everyone.
We are not die hard fans or disciples of any specific software development process
or methodology, we won&rsquo;t be relentlessy chasing latest trends just for the sake of it.
We just want to create a valuable project, both for developers who
want something nifty and stable for small quick project and for those who believe
that their e-commerce will grow much.</p>

<p>Working on an Elcodi based project must be fun and healthy.</p>

<h2>Business perspective</h2>

<p>We are a technology project, but first and foremost we are a company. This means
that though we aspire to be fully open source, we do have business model
behind, defined by a financial structure, which is based on constant growing.</p>

<p>As you can see on our website, our key role in the process is the Market. As said,
one of the great advantages that event-driven architecture gives us is that it can
easily be extended: third party modules will be simple to integrate.</p>

<p>Moreover, a professional team of developers will be responsible for the project,
to train interested people and review the quality of the extensions submitted
to the market.</p>

<p>At the same time, developers who wants to base their implementations on Elcodi
will likely find it easy to cover their needs, through open-source modules, market
extensions or by coding the solutions themselves (and of course selling it in the
Market if it complies with Elcodi code rules!)</p>

<p>Let me call this escenarios a win-win.</p>

<h2>Final thoughts</h2>

<p>I repeat myself. We do not want to compete with anyone. I understand that every
project has its trajectory. What appears in this post is our. Cross-project
collaboration is  essential, and we will commit to work alongside other projects,
because at last, everyone gains :)</p>

<p>Soon we will publish a roadmap, as well as a set of training modules
for people who want to learn some cookie recipes of web architecture and a
little more about our project.</p>

<p>If you want to know about project updates, follow our activities in
<a href="http://twitter.com/elcodi_dev">Twitter &ndash; @elcodi_dev</a> or follow Elcodi
development in <a href="http://github.com/elcodi/elcodi">Github &ndash; @elcodi</a>.</p>

<p>Obviously we want people to clone the project, inspect it, question us, discuss
constructively and give us reviews on our implementations. Contributions to the
project will be well received and appreciated :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ParamConverter... mala idea]]></title>
    <link href="http://mmoreram.github.io/blog/2014/05/05/paramconverter-una-mala-idea/"/>
    <updated>2014-05-05T13:18:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2014/05/05/paramconverter-una-mala-idea</id>
    <content type="html"><![CDATA[<p>Este problema ocurre en proyectos abiertos, open source. Para proyectos privados
donde Cart siempre será Cart, no creo que deba ser de su preocupación.</p>

<p>Cada vez tenemos más en mente trabajar con módulos que sean reutilizables. Las
buenas prácticas pasan por trabajar con interfaces y dar pie a que, el usuario
que tan amablemente está reutilizando nuestro código, pueda definir su dominio
según su especificación. Esto pasa, claro, por pensar que una entidad no siempre
será la misma entidad, el mismo objeto.</p>

<p>Me explicaré.</p>

<p>La buena práctica sugiere que cuando definimos una entidad con sus relaciones,
utilizemos un ResolveTargetEntityListener. Lo que hace este listener es, una vez
se han definido las relaciones utilizando interfaces, se resuelven éstas y se
sustituyen por entidades reales ( evidentemente por entidades que implementan
tales interfaces ).</p>

<p>Cuando se sigue esta estrategia, es natural definir tanto el namespace como
el factory de la entidad que estás utilizando en un parámetro de bundle, por lo
que se puede sobrescribir fácilmente en cada uno de los proyectos.</p>

<p>Vemos un ejemplo.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">Elcodi\CartBundle\Entity\Cart</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">entity</span>
</span><span class='line'>    <span class="l-Scalar-Plain">repositoryClass</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Elcodi\CartBundle\Repository\CartRepository</span>
</span><span class='line'>    <span class="l-Scalar-Plain">table</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cart</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">oneToOne</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">order</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">targetEntity</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Elcodi\CartBundle\Entity\Interfaces\OrderInterface</span>
</span><span class='line'>            <span class="l-Scalar-Plain">mappedBy</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cart</span>
</span></code></pre></td></tr></table></div></figure>


<p>En este caso, la relación con Order es débil, ya que la proponemos con cualquier
entidad que implemente OrderInterface. Solo hace falta que el
ResolveTargetEntityListener proponga una implementación para OrderInterface, en
nuestro caso, <code>Elcodi\CartBundle\Entity\Order</code>.</p>

<p>En nuestro config, definimos los namespaces de las entidades con las que vamos a
trabajar.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">parameters</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Entities</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="l-Scalar-Plain">elcodi.core.cart.entity.cart.class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Elcodi\CartBundle\Entity\Cart</span>
</span><span class='line'>    <span class="l-Scalar-Plain">elcodi.core.cart.entity.order.class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Elcodi\CartBundle\Entity\Order</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Factories</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="l-Scalar-Plain">elcodi.core.cart.factory.cart.class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Elcodi\CartBundle\Factory\CartFactory</span>
</span><span class='line'>    <span class="l-Scalar-Plain">elcodi.core.cart.factory.order.class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Elcodi\CartBundle\Factory\OrderFactory</span>
</span></code></pre></td></tr></table></div></figure>


<p>Este escenario anuncia lo que el título de este post enuncia. Hardcodear el
namespace de una entidad en alguna parte, rompe toda esta estrategia. Si
trabajamos de esta forma &ldquo;abstracta&rdquo; no nos podemos permitir el lujo de marcar
con sangre que una entidad siempre será de un tipo específico, y es, en
realidad, lo que obliga el ParamConverter</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">use</span> <span class="nx">Sensio\Bundle\FrameworkExtraBundle\Configuration\Route</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Sensio\Bundle\FrameworkExtraBundle\Configuration\ParamConverter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * @Route(&quot;/cart/{id}&quot;)</span>
</span><span class='line'><span class="sd"> * @ParamConverter(&quot;cart&quot;, class=&quot;ElcodiCartBundle:Cart&quot;)</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">showAction</span><span class="p">(</span><span class="nx">Post</span> <span class="nv">$post</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Proposición</p>

<p>Para que el ParamConverter funcionara de tal forma que pudiéramos salvar este
problema, deberíamos poder definir nuestra entidad con un parameter. Algo así:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">use</span> <span class="nx">Sensio\Bundle\FrameworkExtraBundle\Configuration\Route</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Sensio\Bundle\FrameworkExtraBundle\Configuration\ParamConverter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * @Route(&quot;/cart/{id}&quot;)</span>
</span><span class='line'><span class="sd"> * @ParamConverter(&quot;cart&quot;, class=&quot;%elcodi.core.cart.entity.cart.class%&quot;)</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">showAction</span><span class="p">(</span><span class="nx">Post</span> <span class="nv">$post</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Esto implica que se debería inyectar el Container entero en el servicio que
trabaja los paramconverter de Doctrine, y que deberíamos checkear siempre si
el parámetro que se pasa es un namespace o un nombre de un parámetro.</p>

<p>Tal vez tendría sentido poder trabajar con ExpressionLanguage, pero el problema
es que añades una relación mas al bundle, por lo que no creo que les guste a los
autores del bundle ( SensioLabs ).</p>

<p>Con este post no quiero abrir un debate sobre si las annotations están bien o
no. Soy el primero que las he defendido en su momento, otorgando siempre su
utilidad en ciertos entornos y en ciertos casos. Ahora que empiezo a trabajar en
un entorno 100% OpenSource ya no valen tanto como antes.</p>

<p>Que creéis al respecto? Olvidaríais las annotations al 100 en entornos Open
Source?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elcodi, a new Symfony adventure]]></title>
    <link href="http://mmoreram.github.io/blog/2014/04/29/elcodi-a-new-symfony-adventure/"/>
    <updated>2014-04-29T16:10:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2014/04/29/elcodi-a-new-symfony-adventure</id>
    <content type="html"><![CDATA[<p>Some changes are about to come. And it seems that they are good
changes. I haven’t written in my blog for a few weeks, and the truth is
I feel bad about it. I like to write about the things that happen to me at
the company; about the problems we find and the solutions I come up
with. The thing is that, for some months now, I’ve been really focused
on the project that we are launching to the world today. Initially, it is
a project by developers for developers, focused on meeting the actual
needs of developers who design and program e-commerce.</p>

<p>It is true that we have plenty of platforms and options to develop e-
commerce around the world. I could name a few, and probably they all
have outstanding metrics and KPIs.</p>

<p>The problem with these platforms is that they are entirely B2B, so
they only make sense when the end user just needs to have a good
management, installation and configuration interface; and when
technical departments want to develop, both horizontally (new features
for things already in use, or just customization) and vertically (new
features), these B2B platforms fall short, and so the company must
either pay a lot of money in refactoring, or the existing code must be
touched, contaminating it and putting its integrity at risk.</p>

<p>These platforms are usually not tested, and so each line added is
potentially harmful for the whole system. Then, each development
on these platforms usually results in collateral problems in the user
experience itself.</p>

<p>As I see it, this is unacceptable in our times.
We propose a platform conceived for developers, thought of and deeply
reflected on. This does not mean that the code is right from the very
start; our declaration of intent is simply to take this project to a certain
point where companies can trust in the project in order to build their
own.</p>

<p>We present you <a href="http://elcodi.io">Elcodi</a>.</p>

<p>We are just beginning to emerge with an approach divided into phases.
Our roadmap is very clear to us, and so in the next few months we
will develop the main features at a core level, as well as the necessary
robustness in order to deal with any outsourcers who like the project in
its initial stage and wish to join us in this journey, aimed at improving
the lifestyle of developers.</p>

<p>The platform is based on Symfony2 and, following the philosophy
defined by its own framework, we have focused most of the
architecture by using a strong layer of events, fully uncoupling most
behaviours and components.</p>

<p>If you are a Symfony programmer, I suggest that you check it out. You
will see errors, a thousand things left to develop and to improve; but,
like with all projects, our greatest ambition is its own construction;
therefore, it’s a matter of months, energy and development.
Another of our objectives is building a good documentation.</p>

<p>Essentially, we have three documentation lines in mind. Firstly, we
want to communicate our philosophy to other people; the direction
the project will undoubtedly take, regardless of its implementation
in a given moment. It is important to define this from the beginning,
because to a great extent it links us to our target audience.
Documentation is a slow process, which is also subject to collaboration,
and at first it will be in English only.</p>

<p>Finally, I should say that elcodi.com is a rapidly expanding company.
We have good growth projections, and so we are certain that what we
are starting today with such enthusiasm will not cease to grow.
We want it to be useful; we want our proposal to be seen by everybody,
to get your most constructive criticism, since only in this way we can
really make an interesting project for us all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Camino hacia Drupal8]]></title>
    <link href="http://mmoreram.github.io/blog/2014/04/28/camino-hacia-drupal8/"/>
    <updated>2014-04-28T16:27:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2014/04/28/camino-hacia-drupal8</id>
    <content type="html"><![CDATA[<p>Debo reconocer que 12 horas de avión son muchas horas. Sobretodo porque, aún
teniendo formas de distraerse ( Asumo de raiz que no se puede dormir&hellip; Podría
enumerar infinidad de razones&hellip; niños gritando, llorando o jugando, asientos
muy pequeños para la gente alta como yo&hellip; ) el reconocido JetLag desgasta toda
la semana posterior al viaje.</p>

<p>El tema es que, a pesar de todo, cuando la razón del viaje no es otra que
conocer compañeros nuevos, conocer una comunidad, una cultura, un país, una
gastronomía, unas costumbres&hellip; cuando la razón es mucho más que un simple
viaje de placer, estas horas pesadas pasan a ser lo de menos.</p>

<p>Hoy he vuelto de México tras una maravillosa semana en el DF, exactamente en el
DrupalCamp México 2014. Mi misión, hablar de Symfony a una comunidad que todavía
no lo tiene claro, viendo como su proyecto evoluciona a otro nivel.</p>

<p>Os pongo en contexto.</p>

<p>Drupal es un proyecto escrito en PHP4. Como wordpress, su core y su filosofía
se basas en un sistema de módulos instalables, reemplazando lo que nosotros
llamamos <em>Event Layer</em> por los ya mas que personalmente olvidados <em>Hooks</em>.
El código está lleno de los llamados Drupalismos, un término creado y designado
a los <em>Coding Standards</em>, tanto en su forma como en su estructura en el cual se
basa todo el proyecto.</p>

<p>Personalmente, muy mejorable.</p>

<p>Quiero aclarar de raiz que todo lo que añado a continuación es una simple
opinión. Mi punto de vista sobre el contexto social que se vive en todo el
continente latinoamericano, y en toda la comunidad Drupal.</p>

<p>Siguiendo con el contexto, la versión estable de drupal actual es la 7. Drupal7
es, ha sido y será la última major release Drupal en lenguaje PHP4,
así que en la nueva versión, Drupal8, algunos módulos de Symfony2 se añadirán
como dependencias. Encontramos algo tan útil como el EventDispatcher ( En
Drupal8 aún coexistirán tanto los Hooks como el EventDispatcher, y en la versión
Drupal9, los hooks se eliminarán de forma completa y permanente ), el Routing,
el HttpFoundation, el HttpKernel, el DependencyInjection&hellip;</p>

<p>Al parecer tal decisión ha dividido la comunidad en dos.</p>

<p>Por un lado tenemos la gente que no quiere pasar a Drupal8, alegando complejidad
demasiado elevada en la transición y un BC completo en ambas versiones. En este
colectivo se ha fundado el proyecto <a href="http://backdropcms.org/">Backdrop</a>, un CMS
evolucionado de Drupal7, con la misma filosofía de arquitectura, y con un cambio
en la forma de trabajar ( Sistema de releases, de features ) y por consiguiente,
con una comunidad estructurada.</p>

<p>Por otro lado tenemos a los que ven a Drupal8 como una posibilidad para
renovarse, para aventurarse en lo desconocido, aprender y resolver aquella deuda
técnica que han generado durante tanto años, apostando tal vez demasiado por la
flexibilidad que propone Drupal desde hace tiempo.</p>

<p>Yo les conocí, a ambos, en el mismo lugar.</p>

<p>En este post quiero defender la evolución de un colectivo, la evolución de
personas que muy honradamente quieren ganarse la vida, y a la par, aprender a
programar utilizando las últimas tendencias en diseño, los patrones más
innovadores, apostando por un modelo sostenible, colaborativo y
completamente escalable.</p>

<p>Yo creo en el crecimiento personal como parte de un crecimiento superior, el de
una comunidad. Les conocí en el Camp y me transmitieron ganas de aprender, ganas
de adquirir conocimientos que, aparentemente, tanto cuesta adquirir. Tengo que
admitir que defender el primer colectivo es una cuestión de mediocridad muy
lícita ( como toda alternativa en el momento que, almenos a uno, le soluciona
un problema ). Defender el mero hecho de no evolucionar, me hace reflexionar
en que tal vez no se den cuenta que solo ellos son capaces de cambiar
el mundo, y estando en sus manos este cambio tan grande, deciden quedarse con lo
que &ldquo;ya funciona&rdquo;. El &ldquo;ya está bien, para que cambiarlo&rdquo; no forma parte de
mi filosofía profesional, y por lo tanto, es imposible que llegue a lidiar
con ella.</p>

<p>Todo gran cambio requiere de un gran sacrificio. Todo gran aprendizaje requiere
un gran cambio, por lo que sacrificarte solo aporta nutrirse de nuevas opciones,
herramientas para el buen escultor, cuya ambición no es otra que tallar la
figura perfecta.</p>

<p>Señores de <em>backdrop</em>, ustedes solo quieren seguir dotando a una comunidad
gigante con un palo de madera para tallar figuras renacentistas. Me parece
ridículo. Me parece prehistórico.</p>

<p>El hombre tuvo que aprender a hacer fuego de una simple rama, y ahora somos una
sociedad avanzada, en gran parte, por que podemos iluminar una habitación oscura
de la forma más primitiva.</p>

<p>Señores de <em>backdrop</em>, ustedes quieren seguir aceptando que PHP4 es válido, y no
lo es. Si fuera por PHP4, si fuera por la negación de la evolución cuando la POO
apareció antaño, hoy en día seríamos incapaces de hablar de Dependency
Injection, de arquitecturas hexagonales y de patrones de diseño avanzados, cuya
función desde el mismo día de su proposición no ha sido otra que hacer
evolucionar al pensador, al escultor, al programador.</p>

<p>Y creo que lo ha conseguido, con creces.</p>

<p>Y es que todo ser humano es simple. Si damos opciones, elige mal. Si proponemos
efectivamente el hecho de seguir siendo mediocre, el ser humano verá en esta
opción su zona de comfort, y no evolucionará.</p>

<p>Por qué no utilizan esta energía para mover masas? Por qué no utilizan esta
fuerza que tan bien utilizan en quejarse, para ser el referente de un pueblo en
su camino hacia un nuevo punto de partida?</p>

<p>Finalmente, un mensaje al desarrollador Drupal indeciso. ¿Por qué teniendo
herramientas para hacer catedrales magníficas, se empeñan en hacer chozas de
madera? ¿Por qué no pasar al siguiente nivel?</p>

<p>Pues exactamente están en esta posición. ¿Acaso se creen que se hallarán solos en
este mar llamado desconocimiento? Tienen la oportunidad de crecer juntos como
comunidad hacia un objetivo común, mejorar, sea como sea. Yo no lo pensaría mas
de dos veces&hellip;</p>

<p>Sean valientes, interés es el pretexto del conocimiento y del éxito, así que les
animo a que den una oportunidad al progreso, a su capacidad, a que
Drupal8 y Symfony sean su tarjeta de embarque para su éxito personal y
profesional, así como un acceso directo a una comunidad proactiva y
colaborativa.</p>

<p>Aquí estaremos los que ya hemos sufrido para que su camino sea un poco más leve.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elcodi, una nueva aventura en Symfony2]]></title>
    <link href="http://mmoreram.github.io/blog/2014/04/17/elcodi/"/>
    <updated>2014-04-17T12:46:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2014/04/17/elcodi</id>
    <content type="html"><![CDATA[<p>Ciertos cambios están por llegar. Y parece ser que son cambios buenos. Llevo
unas cuantas semanas sin escribir en el blog, y la verdad es que me sabe mal.
Me gusta contar cosas que me van sucediendo en la empresa. Problemas que nos
vamos encontrando y soluciones que se me van ocurriendo. El problema es que
llevo unos meses muy centrado en el proyecto que justo hoy lanzamos al mundo.
Es un proyecto inicialmente de desarrolladores para desarrolladores, centrado en
cubrir necesidades reales de los developers destinados a diseñar y
programar ecommerces.</p>

<p>Es cierto que tenemos muchísimas plataformas y opciones para desarrollar
ecommerces alrededor del mundo. Podría enumerar unos cuantos, y probablemente
todos tengan unas métricas y unos KPIs magníficos.</p>

<p>Los problemas de estas plataformas es que son completamente B2B, por lo que tienen sentido cuando
el usuario final simplemente debe tener una buena interfaz de administración,
de instalación y de configuración; y que cuando los departamentos técnicos quieren
desarrollar, tanto horizontalmente ( nuevas funcionalidades de
aquello que ya se está utilizando, o simplemente customizar ) como verticalmente
( nuevas funcionalidades ), estas plataformas B2B se quedan
cortas, por lo que la empresa tiene que desembolsar una cantidad enorme de
dinero en un refáctoring, o simplemente, se debe empezar a todar el código
existente, ensuciándolo y haciendo peligrar su integridad.</p>

<p>Estas plataformas no suelen estar testeadas, por lo que cada línea que se añade
es una línea potencialmente dañina para todo el sistema, con lo que cada
desarrollo sobre estas plataformas suelen derivar en problemas colaterales
en la propia experiencia de usuario.</p>

<p>Desde mi punto de vista, en los tiempos que corren, esto es inaceptable.</p>

<p>Nosotros proponemos una plataforma pensada para los desarrolladores, pensada
y profundamente reflexionada. Esto no implica que el código deba estar bien
en una primera instancia, simplemente nuestra declaración de intenciones es
llevar el proyecto a un punto donde las empresas puedan confiar en el proyecto
para construir el suyo propio.</p>

<p>Os presentamos <a href="http://elcodi.io">Elcodi</a>.</p>

<p>En un planteamiento dividido en fases, justo estamos naciendo. Tenemos muy claro
cual es nuestro roadmap, por lo que en los próximos meses se desarrollaran las
principales features a nivel de core, así como la robustez necesaria como para
poder lidiar con colaboradores externos, que les guste el proyecto en su estado
inicial y que quieran acomparnos en este viaje, destinado a mejorar el estilo de
vida de los developers.</p>

<p>La plataforma está basada en Symfony2, y siguiendo la filosofía definida por el
propio framework, hemos enfocado la mayor parte de la arquitectura utilizando
una fuerte capa de eventos, desacoplando la mayoría de comportamientos y
componentes completamente.</p>

<p>Si eres programador Symfony, te propongo que almenos le eches un vistazo.
Verás errores, mil cosas a desarrollar y mil cosas a mejorar, pero como todo
proyecto, nuestra mayor ambición es la propia construcción del mismo, por lo que
es cuestión de meses, ganas y desarrollo.</p>

<p>Otro de nuestros objetivos es llegar a construir una buena documentación.
Tenemos esencialmente tres líneas de documentación en mente. Por un lado</p>

<p>queremos transmitir a los demás nuestra filosofía. La dirección que, sin duda
alguna, tomará el proyecto, independientemente de la implementación que este
adquiera en un momento dado. Es importante definir esto inicialmente porque al
final nos vincula muchísimo al target al que vamos destinados.</p>

<p>La documentación es algo lento, también sujeta a colaboraciones, y en principio
estará inicialmente solo en inglés.</p>

<p>Finalmente decir que elcodi.com es una empresa en plena expansión. Tenemos
buenas previsiones de crecimiento por lo que tenemos una garantía que lo que hoy
con tanta ilusión estamos empezando, no dejará de crecer.</p>

<p>Queremos que sea útil, queremos que nuestra propuesta esté a juicio de todo el
mundo y que saque vuestras críticas mas constructivas, solo así podremos
realmente hacer un proyecto interesante para todos.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom controller annotations]]></title>
    <link href="http://mmoreram.github.io/blog/2014/02/11/custom-controller-annotations/"/>
    <updated>2014-02-11T20:21:00+01:00</updated>
    <id>http://mmoreram.github.io/blog/2014/02/11/custom-controller-annotations</id>
    <content type="html"><![CDATA[<p>The goal is easy: To provide a very intuitive and easy way of creating
controller annotations in Symfony2.</p>

<p><a href="https://github.com/mmoreram/ControllerExtraBundle">ControllerExtraBundle</a>
is both a set of annotations and a platform for creating new custom ones.
Actually, the bundle can create a new Entity, like ParamConverter does, with in
this case is just an empty Entity. The bundle also can create FormTypes, Forms
and FormViews with several options. Can also automate the doctrine <code>flush()</code>
action after the method execution or log something before / after every desired
action.</p>

<p>Bundle is still being tested in production environments, all feedback will be
very very useful.</p>

<p>Let&rsquo;s see how can we create our Annotations.</p>

<ul>
<li>Annotation</li>
<li>Resolver</li>
<li>Definition</li>
<li>Registration</li>
</ul>


<h2>Annotation</h2>

<p>The annotation object. You need to define the fields your custom annotation
will contain.
Must extends <code>Mmoreram\ControllerExtraBundle\Annotation\Abstracts\Annotation</code>
abstract class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">My\Bundle\Annotation</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\ControllerExtraBundle\Annotation\Abstracts\Annotation</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Entity annotation driver</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @Annotation</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MyCustomAnnotation</span> <span class="k">extends</span> <span class="nx">Annotation</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var string</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Dummy field</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$field</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Get Dummy field</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return string Dummy field</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getField</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">field</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Resolver</h2>

<p>Once you have defined your own annotation, you have to resolve how this
annotation works in a controller. You can manage this using a Resolver. Must
extend <code>Mmoreram\ControllerExtraBundle\Resolver\Interfaces\AnnotationResolverInterface;</code>
abstract class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">My\Bundle\Resolver</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Request</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\ControllerExtraBundle\Resolver\Interfaces\AnnotationResolverInterface</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\ControllerExtraBundle\Annotation\Abstracts\Annotation</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * MyCustomAnnotation Resolver</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MyCustomAnnotationResolver</span> <span class="k">implements</span> <span class="nx">AnnotationResolverInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Specific annotation evaluation.</span>
</span><span class='line'><span class="sd">     * This method MUST be implemented because is defined in the interface</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param Request          $request    Request</span>
</span><span class='line'><span class="sd">     * @param Annotation       $annotation Annotation</span>
</span><span class='line'><span class="sd">     * @param ReflectionMethod $method     Method</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return MyCustomAnnotationResolver self Object</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">evaluateAnnotation</span><span class="p">(</span>
</span><span class='line'>                                        <span class="nx">Request</span> <span class="nv">$request</span><span class="p">,</span>
</span><span class='line'>                                        <span class="nx">Annotation</span> <span class="nv">$annotation</span><span class="p">,</span>
</span><span class='line'>                                        <span class="nx">ReflectionMethod</span> <span class="nv">$method</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="sd">/**</span>
</span><span class='line'><span class="sd">         * You can now manage your annotation.</span>
</span><span class='line'><span class="sd">         * You can acced to its fields using public methods.</span>
</span><span class='line'><span class="sd">         * </span>
</span><span class='line'><span class="sd">         * Annotation fields can be public and can be acceded directly,</span>
</span><span class='line'><span class="sd">         * but is better for testing to use getters; they can be mocked.</span>
</span><span class='line'><span class="sd">         */</span>
</span><span class='line'>        <span class="nv">$field</span> <span class="o">=</span> <span class="nv">$annotation</span><span class="o">-&gt;</span><span class="na">getField</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="sd">/**</span>
</span><span class='line'><span class="sd">         * You can also access to existing method parameters.</span>
</span><span class='line'><span class="sd">         * </span>
</span><span class='line'><span class="sd">         * Available parameters are:</span>
</span><span class='line'><span class="sd">         * </span>
</span><span class='line'><span class="sd">         * # ParamConverter parameters ( See `resolver_priority` config value )</span>
</span><span class='line'><span class="sd">         * # All method defined parameters, included Request object if is set.</span>
</span><span class='line'><span class="sd">         */</span>
</span><span class='line'>        <span class="nv">$entity</span> <span class="o">=</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">attributes</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;entity&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="sd">/**</span>
</span><span class='line'><span class="sd">         * And you can now place new elements in the controller action.</span>
</span><span class='line'><span class="sd">         * In this example we are creating new method parameter</span>
</span><span class='line'><span class="sd">         * called $myNewField with some value</span>
</span><span class='line'><span class="sd">         */</span>
</span><span class='line'>        <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">attributes</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span>
</span><span class='line'>            <span class="s1">&#39;myNewField&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="k">new</span> <span class="nv">$field</span><span class="p">()</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This class will be defined as a service, so this method is computed just
before executing current controller. You can also subscribe to some kernel
events and do whatever you need to do ( You can check
<code>Mmoreram\ControllerExtraBundle\Resolver\LogAnnotationResolver</code> for some
examples.</p>

<h2>Definition</h2>

<p>Once Resolver is done, we need to define our service as an Annotation
Resolver. We will use a custom <code>tag</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">parameters</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Resolvers</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="l-Scalar-Plain">my.bundle.resolvers.my_custom_annotation_resolver.class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">My\Bundle\Resolver\MyCustomAnnotationResolver</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Resolvers</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="l-Scalar-Plain">my.bundle.resolvers.my_custom_annotation_resolver</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="err">%</span><span class="l-Scalar-Plain">my.bundle.resolvers.my_custom_annotation_resolver.class%</span>
</span><span class='line'>        <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="p-Indicator">{</span> <span class="nv">name</span><span class="p-Indicator">:</span> <span class="nv">controller_extra.annotation</span> <span class="p-Indicator">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Registration</h2>

<p>We need to register our annotation inside our application. We can just do it in
the <code>boot()</code> method of <code>bundle.php</code> file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">My\Bundle</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Bundle\Bundle</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Doctrine\Common\Annotations\AnnotationRegistry</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * MyBundle</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ControllerExtraBundle</span> <span class="k">extends</span> <span class="nx">Bundle</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Boots the Bundle.</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">boot</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$kernel</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">container</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;kernel&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">AnnotationRegistry</span><span class="o">::</span><span class="na">registerFile</span><span class="p">(</span><span class="nv">$kernel</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">locateResource</span><span class="p">(</span><span class="s2">&quot;@MyBundle/Annotation/MyCustomAnnotation.php&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Et voilà!</em>  We can now use our custom Annotation in our project controllers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cache clear en Symfony2]]></title>
    <link href="http://mmoreram.github.io/blog/2014/01/03/cache-clear-en-symfony2/"/>
    <updated>2014-01-03T15:11:00+01:00</updated>
    <id>http://mmoreram.github.io/blog/2014/01/03/cache-clear-en-symfony2</id>
    <content type="html"><![CDATA[<p>Vacía la caché de Symfony, y la vuelve a crear (sino se especifica lo contrario)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>php app/console cache:clear <span class="o">[</span>--no-warmup<span class="o">]</span> <span class="o">[</span>--no-optional-warmers<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Curioso comando existente en el framework Symfony2 desde sus inicios, y poco
utilizado por los proyectos. En realidad, he visto pocos proyectos que utilizen
este comando en los scripts de deploy, por lo que lo más habitual que veremos es
el clásico</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rm -Rf app/cache/*
</span></code></pre></td></tr></table></div></figure>


<p>Pero es correcta esta práctica? Aunque parezca la forma más ágil de limpiar
cache, tengamos en cuenta que Symfony2 tiene procesos internos que muchos de
nosotros desconocemos por completo. Cuando ejecutamos el comando para vaciar
caché ( con la opción <code>--no-warmup</code> ) no tan solo vaciamos el directorio caché
sino que el framework ejecuta el método <code>clear()</code> de todos los servicios que
implementan la interface
<code>Symfony\Component\HttpKernel\CacheClearer\CacheClearerInterface</code> cuya
definición incorporen el tag <code>kernel.cache_clearer</code>.</p>

<p>En otras palabras.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">my_cache_clearer</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Acme\MainBundle\Cache\MyClearer</span>
</span><span class='line'>        <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="p-Indicator">{</span> <span class="nv">name</span><span class="p-Indicator">:</span> <span class="nv">kernel.cache_clearer</span> <span class="p-Indicator">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Encontraréis mas información y especificación de estos tags
<a href="http://symfony.com/doc/current/reference/dic_tags.html#kernel-cache-clearer">aqui</a>.</p>

<h2>Reflexión</h2>

<p>En realidad es importante fijarse en la opción <code>--no-warmup</code> ya que es la que
cambia el comportamiento del comando. Cuando trabajamos en entornos de
producción, necesitamos que, en tiempo de deploy, nuestra aplicación tenga el
mínimo tiempo de downtime. Esto se consigue reduciendo al máximo el tiempo en
que una caché está vacía.</p>

<h3>Tabla básica de tiempos</h3>

<blockquote><ul>
<li>[1]   Repository status: S1, Cache status: C1</li>
<li>[1-3] Deploy S1 &ndash;> S2</li>
<li>[3-4] Clear cache C1 from /cache</li>
<li>[4-7] Warm up new cache C2 into /cache_new</li>
<li>[7-8] Swap cache C1 &ndash;> C2. Rename /cache_new to /cache</li>
<li>[8]   Repository status: S2, Cache status: C2</li>
</ul>
</blockquote>

<h3>Problema 1</h3>

<p>Entre los tiempos 3 y 8, tenemos que /cache está vacía. Tenemos que tener en
cuenta que estamos en un entorno de producción, por lo que mientras hacemos el
proceso de deployment, nuestros servidores deben estar sirviendo peticiones en
todo momento.</p>

<p>Dado este caso, cada una de las peticiones se dará cuenta que la caché está
vacía, por lo que intentará volverla a montar desde cero. Deberíamos tener en
cuenta, entonces, que entre los tiempos 3 y 8, nuestro servicio estará caido.</p>

<p>De este análisis sacamos que debemos minimizar al máximo el tiempo pasado entre
el clear de la caché a invalidar y el switch a la nueva, o sea, reducir este
intervalo en el que nuestra caché está vacía.</p>

<p>Hace pocos dias propuse un
<a href="https://github.com/symfony/symfony/pull/9930">PR a FrameworkBundle</a> para
gestionar esto.</p>

<p>Lo único que hace es cambiar el orden entre el warm up de la nueva caché y el
clear de la vieja.</p>

<blockquote><ul>
<li>[1]   Repository status: S1, Cache status: C1</li>
<li>[1-3] Deploy S1 &ndash;> S2</li>
<li>[3-6] Warm up new cache C2 into /cache_new</li>
<li>[6-7] Clear cache C1 from /cache</li>
<li>[7-8] Swap cache C1 &ndash;> C2. Rename /cache_new to /cache</li>
<li>[8]   Repository status: S2, Cache status: C2</li>
</ul>


<p>Downtime 2</p></blockquote>

<p>En este punto podemos ver que la ventana que separa el clear de la caché antigua
y el switch con la nueva solo es de dos unidades de tiempo, entre los tiempos 6
y 8. Ahora se nos plantea otro problema.</p>

<h3>Problema 2</h3>

<p>Hemos minimizado al máximo el tiempo de switch entre las dos caches, pero
seguimos teniendo una ventana de 5 unidades de tiempo entre que el repositorio
está en un estado S2 y la caché en un estado C1.</p>

<blockquote><p>Real downtime 5</p></blockquote>

<p>En realidad, dado este análisis solo podríamos actuar de una sola forma, y es
trabajar con un deployment paralelo ( como hace el warmup del cache:clear ).
Esto significa que nunca deployamos sobre nuestra instalación activa</p>

<blockquote><ul>
<li>[1]   Repository status: S1, Cache status: C1 en /project</li>
<li>[1-8] Deployment Repository + cache:clear en /project_warmup</li>
<li>[8]   Repository status: S2, Cache status: C2 en /project_warmup</li>
<li>[8-9] Swap repository S1 &ndash;> S2. Rename /project to /project_warmup</li>
</ul>


<p>Downtime: 0</p></blockquote>

<h3>Problema 3</h3>

<p>En este caso es probable que nuestro proceso de deploy nos modifique elementos
externos, como puede ser ( y probablemente sea ) <code>mysql</code>. Entonces tendremos una
ventana bastante grande donde el modelo deployado en mysql que haga S2 no se
asemeje al modelo Doctrine de S1.</p>

<blockquote><p>Downtime: X</p></blockquote>

<p>So what? Como lo hacéis vosotros? Ya es por sondear un poco hacia donde tira la
gente&hellip;</p>
]]></content>
  </entry>
  
</feed>
