<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Because yes]]></title>
  <link href="http://mmoreram.github.io/atom.xml" rel="self"/>
  <link href="http://mmoreram.github.io/"/>
  <updated>2015-08-28T13:16:29+02:00</updated>
  <id>http://mmoreram.github.io/</id>
  <author>
    <name><![CDATA[Marc Morera]]></name>
    <email><![CDATA[yuhu@mmoreram.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[EventListeners as collectors in Symfony]]></title>
    <link href="http://mmoreram.github.io/blog/2015/08/28/eventlisteners-as-collectors-in-symfony/"/>
    <updated>2015-08-28T12:04:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2015/08/28/eventlisteners-as-collectors-in-symfony</id>
    <content type="html"><![CDATA[<p>Some of my concerns during the last couple of years have been how to collect
data from all installed bundles using available tools in Symfony packages.
I say concerns because I don&rsquo;t really know if is there a tool for that.</p>

<p>Some people have told me that the
<a href="http://symfony.com/doc/current/components/event_dispatcher/introduction.html">EventDispatcher component</a>
can do this work greatly, but then I have the same question once and again&hellip; is
this component designed for such?</p>

<p>Let&rsquo;s review some tiny concepts here.</p>

<h2>Event immutability</h2>

<p>Try to think what really is an event. Something that happens. For example, I
wake up. Once I wake up, an event is dispatched called <code>mmoreram.wake_up</code>. This
event, of course, is immutable. Nothing can change the fact that I woke up, so
the event should be treated as an immutable object, with only reading actions.</p>

<p>One single property of the event is injected once is created. Did I wake up
rested enough for a new crazy day with all cool guys from my office?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">namespace</span> <span class="nx">Mmoreram</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\EventDispatcher\Event</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Marc woke up event</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MmoreramWakeUpEvent</span> <span class="k">extends</span> <span class="nx">Event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var boolean</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Marc woke up rested</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$rested</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Construct method</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @var boolean $rested Marc woke up rested</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$rested</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">rested</span> <span class="o">=</span> <span class="nv">$rested</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Get if Marc is rested enough</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return boolean Marc is rested enough</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">isRested</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">rested</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, no one should be able to change the value of rested, because no one
has the <strong>power</strong> to change the fact I woke up tired this night.</p>

<p>The main intention of an event is notify the world that something just happened,
so any extra implementation changing this paradigm should be avoided in order to
not corrupt the real meaning of the component.</p>

<p>Said that, and before continuing with the post&hellip; a question related to this
topic. Just make sure that you can take some time to think about that.</p>

<p>If we talk about decoupling between components&hellip; is the concept of <code>priority</code>
helpful? If any actor must know the priorities of all listeners in order to know
its own&hellip; then can we consider that all event listeners are really decoupled
between them? And how bad is that?</p>

<h2>Collector</h2>

<p>Let&rsquo;s figure out that the system need to collect some feelings when I wake up.
Let&rsquo;s figure out as well that we don&rsquo;t really care about how these feelings are
sorted, so the problem of priority is not a problem anymore: we can ignore it
completely.</p>

<p>We can change our event with this new implementation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">namespace</span> <span class="nx">Mmoreram</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\EventDispatcher\Event</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\Feeling</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Marc woke up event</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MmoreramWakeUpEvent</span> <span class="k">extends</span> <span class="nx">Event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var boolean</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Marc woke up rested</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$rested</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var Feeling[]</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Array of feelings</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$feelings</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Construct method</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @var boolean $rested Marc woke up rested</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$rested</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">rested</span> <span class="o">=</span> <span class="nv">$rested</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">feelings</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Add new feeling</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param Feeling $feeling New feeling to be added</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return $this Self object</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">addFeeling</span><span class="p">(</span><span class="nx">Feeling</span> <span class="nv">$feeling</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">feelings</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$feeling</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Get if Marc is rested enough</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return boolean Marc is rested enough</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">isRested</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">rested</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Get all feelings</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return Feeling[] Set of feelings</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getFeelings</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">feelings</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, in our domain we must dispatch this event one I really wake up (for
example a service called <code>MmoreramVitalActions</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\EventDispatcher\EventDispatcher</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\EventDispatcher\Event</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\MmoreramWakeUpEvent</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Marc vital actions</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MmoreramVitalActions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Marc wakes up</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return Feeling[] Set of feelings resulting of the action of waking up</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">wakeUp</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$rested</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">didMarcRestedProperly</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$eventDispatcher</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventDispatcher</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$event</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MmoreramWakeUpEvent</span><span class="p">(</span><span class="nv">$rested</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$dispatcher</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">dispatch</span><span class="p">(</span>
</span><span class='line'>                <span class="s1">&#39;mmoreram.wake_up&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nv">$event</span>
</span><span class='line'>            <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getFeelings</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Get if Marc rested properly</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return boolean Marc rested properly</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">function</span> <span class="nf">didMarcRestedProperly</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, after dispatching the event you should be able to get all
collected feelings. This means that the one in charge to fulfill this
information related to my feelings should be any event listener interested in
adding it&rsquo;s own related feeling.</p>

<p>For example, an Event Listener will have the responsibility to add a feeling
related to the temperature of my room.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\MmoreramWakeUpEvent</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Marc wake up event listener related to temperature.</span>
</span><span class='line'><span class="sd"> * This class is intended to add a feeling depending on local temperature</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">TemperatureMmoreramWakeUpEventListener</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Marc wakes up listener</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param MmoreramWakeUpEvent $event Marc wake up event</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return $this Self object</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">addTemperatureFeeling</span><span class="p">(</span><span class="nx">MmoreramWakeUpEvent</span> <span class="nv">$event</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$feeling</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getTemperatureFeeling</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">addFeeling</span><span class="p">(</span><span class="nv">$feeling</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Get feeling related to the temperature</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return Feeling Feeling related to temperature</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">function</span> <span class="nf">getTemperatureFeeling</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, you must add this event listener using tags in the Dependency
Injection Symfony configuration.</p>

<p><a href="http://symfony.com/doc/current/reference/dic_tags.html">Using tags for our listeners definition</a></p>

<p>At this point, you can see that maybe this is useful. This is a very easy and
fast collector implementation, but not enough good. The event is not immutable
anymore and you can change if from any event dispatcher, very far from the real
intention of the component.</p>

<h2>Solution</h2>

<p>I am using this approach in order to be as much pragmatic as possible. Of course
this works properly by adding an extra definition and documentation layer, but
I wonder if other people is concerned about that in Symfony.</p>

<p>I don&rsquo;t really think that yet another component called Collector would be
necessary at all unless there is an abstraction between both components (they
share some common things related to the fact of broadcasting and subscribing).</p>

<p>Of course, again, simple theory and personal thoughts brought to the community.
I will continue using this approach even knowing that should be solved using
another one as long as people understand it and is easy to work with.</p>

<p>Feedback and people thoughts will be appreciated, as always :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symfony in Barcelona]]></title>
    <link href="http://mmoreram.github.io/blog/2015/08/23/symfony-in-barcelona/"/>
    <updated>2015-08-23T17:22:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2015/08/23/symfony-in-barcelona</id>
    <content type="html"><![CDATA[<p>Barcelona, one of the best cities in the world.</p>

<p>For you, Symfony lover. Do you know where is Barcelona, right?
Well, this is a call for all Symfony lovers who want something special,
something really different. Amazing people, amazing food and tons and tons of
new experiences with one of the greatest Symfony Communities around the world.</p>

<iframe width="1280" height="720" src="http://www.youtube.com/embed/6DxX1DYHOlk?feature=player_detailpage&VQ=HD720" frameborder="0" allowfullscreen></iframe>


<p>A lot of companies are actually being built in this city, so we really want you
with us. No matter your Symfony expertise, no matter how good you really are&hellip;
in Barcelona only matters one simple thing&hellip; How good you want to be. If you
want to be one of the bests, then Barcelona can be your new home :)</p>

<p>If you want to know more about it, just send an email to Symfony Barcelona User
Group and you will be properly helped to move here with us. The group email is
<a href="&#x6d;&#x61;&#105;&#108;&#116;&#x6f;&#x3a;&#115;&#121;&#x6d;&#x66;&#111;&#110;&#x79;&#x62;&#97;&#x72;&#99;&#x65;&#x6c;&#x6f;&#110;&#x61;&#64;&#103;&#x6d;&#97;&#105;&#108;&#x2e;&#99;&#x6f;&#109;">&#115;&#x79;&#x6d;&#x66;&#x6f;&#x6e;&#x79;&#98;&#97;&#114;&#99;&#x65;&#x6c;&#x6f;&#110;&#x61;&#64;&#x67;&#109;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#x6d;</a></p>

<p>You want to join us, but you don&rsquo;t know it yet :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Re-thinking Event Listeners]]></title>
    <link href="http://mmoreram.github.io/blog/2015/08/20/re-thinking-event-listeners/"/>
    <updated>2015-08-20T12:27:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2015/08/20/re-thinking-event-listeners</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s talk about Event Listeners.
Do you know what an Event Listener is?</p>

<p>Well, if you are used to working with Symfony, then you should know what is
intended for. If you don&rsquo;t, don&rsquo;t hesitate to take a look at the Symfony
documentation.</p>

<p>This post aims to start a small discussion about how an Event Listener should
look like if we really want to keep things decoupled.</p>

<h2>TL;DR</h2>

<ul>
<li>If we place our business logic inside the Event Listeners, we will not be able
to use this logic from other points, for example sending a &ldquo;Order created&rdquo; email
by hand from our Admin using a simple button.</li>
<li>What we could do is place ALL the logic inside a service that ONLY sends that
email, exposing a simple and documented api.</li>
<li>Then, considering that this service is injectable using any Dependency
Injection implementation, we can inject it into the Event Listener.</li>
<li>So, EventListeners are only a point of entry to your service layer</li>
</ul>


<h2>Using Event Listeners</h2>

<p>To understand what I am talking about, let&rsquo;s use an small example to make things
more clear&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Scenario: You buy something in an e-commerce, so, internally, your Cart became 
</span><span class='line'>an Order. Of course, and because user experience is important in that cases, you 
</span><span class='line'>want to send an email to the user with some Order information, so you need to 
</span><span class='line'>send an email to the Customer.
</span><span class='line'>
</span><span class='line'>Problem: You want to create this feature in a very decoupled way, of course. The
</span><span class='line'>e-commerce framework provides you that way, by proposing you an event once the
</span><span class='line'>Order is created. You can access the Order itself and the Customer.
</span><span class='line'>
</span><span class='line'>Solution: Create a new Event Listener object, subscribed to this event called
</span><span class='line'>order.oncreate, and sending that email.</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s see a small example about how this Event Listener should look like. We
will follow the simple way, only focusing about sending that email in a
decoupled way with the action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">OrderEmailEventListener</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * We send an email to the Customer once an order is created</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param OrderOnCreatedEvent $event Event</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">sendEmail</span><span class="p">(</span><span class="nx">OrderOnCreatedEvent</span> <span class="nv">$event</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$order</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getOrder</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$customer</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getCustomer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="sd">/**</span>
</span><span class='line'><span class="sd">         * Send the email</span>
</span><span class='line'><span class="sd">         */</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we could use this configuration in our bundle.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Event Listeners</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="l-Scalar-Plain">project.event_listener.order_created_email</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">My\Bundle\EventListener\OrderCreatedEmailEventListener</span>
</span><span class='line'>        <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="p-Indicator">{</span> <span class="nv">name</span><span class="p-Indicator">:</span> <span class="nv">kernel.event_listener</span><span class="p-Indicator">,</span> <span class="nv">event</span><span class="p-Indicator">:</span> <span class="nv">order.oncreate</span><span class="p-Indicator">,</span> <span class="nv">method</span><span class="p-Indicator">:</span> <span class="nv">sendEmail</span> <span class="p-Indicator">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So this could be a simple implementation. I&rsquo;ve been using it since the beginning
of times as this could be considered a good practice. But, during this time
doing more and more Event Listeners, some questions have come to my mind.</p>

<h2>Decoupling from the Event</h2>

<p>Let&rsquo;s consider that our project has an admin panel. Of course, we should be able
to send this email any time we need (for example, our email server was down
during the order conversion and we must re-send it). Is this possible with this
implementation?</p>

<p>Yes. Let&rsquo;s do this considering that we have injected our EventListener and this
one is accessible locally!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$event</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OrderCreatedEmailEventListener</span><span class="p">(</span>
</span><span class='line'>    <span class="nv">$order</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">$customer</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="nv">$orderCreatedEmailEventListener</span><span class="o">-&gt;</span><span class="na">sendEmail</span><span class="p">(</span><span class="nv">$event</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, this piece of code will really send the email&hellip; but is this
implementation enough right? I don&rsquo;t think so&hellip;</p>

<p>This Event should only be dispatched when the real event happens. It has no
sense to create a new <code>OrderEmailEventListener</code> instance without using the
event dispatcher. This means that, indeed, any Order has been created.</p>

<p>So first of all, creating a new Event out of turn, is not a good practice at
all.</p>

<p>For solving this, We could do that.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">OrderCreatedEmailEventListener</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * We send an email to the Customer once an order is created</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param OrderOnCreatedEvent $event Event</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">sendEmail</span><span class="p">(</span><span class="nx">OrderOnCreatedEvent</span> <span class="nv">$event</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$order</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getOrder</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$customer</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getCustomer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">sendOrderCreatedEmail</span><span class="p">(</span>
</span><span class='line'>            <span class="nv">$order</span><span class="p">,</span>
</span><span class='line'>            <span class="nv">$customer</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * We send an email to the Customer once an order is created, given the </span>
</span><span class='line'><span class="sd">     * order and the customer</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param OrderInterface    $order    Order</span>
</span><span class='line'><span class="sd">     * @param CustomerInterface $customer Customer</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">sendOrderCreatedEmail</span><span class="p">(</span>
</span><span class='line'>        <span class="nx">OrderInterface</span> <span class="nv">$order</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">CustomerInterface</span> <span class="nv">$customer</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="sd">/**</span>
</span><span class='line'><span class="sd">         * Send the email</span>
</span><span class='line'><span class="sd">         */</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then, we could do this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$orderCreatedEmailEventListener</span><span class="o">-&gt;</span><span class="na">sendOrderCreatedEmail</span><span class="p">(</span>
</span><span class='line'>    <span class="nv">$order</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">$customer</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Much better, right?
But is this good enough? No is not.</p>

<h2>Decoupling from the Listener</h2>

<p>We are using an instance of an Event Listener to send an email. Our analysis
could be exactly the same than before&hellip; Should we use an Event Listener even
when an event is not dispatched?</p>

<p>No we should not.</p>

<p>An Event Listener is an event listener. Listens one event, and that should be
all its work. So, we should never inject any event listener, anywhere. Let&rsquo;s do
some refactor here!</p>

<p>First of all, let&rsquo;s isolate our business logic in a new service. This service
will <strong>only</strong> do one thing; sending this email.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">OrderCreatedEmailSender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * We send an email to the Customer once an order is created, given the </span>
</span><span class='line'><span class="sd">     * order and the customer</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param OrderInterface    $order    Order</span>
</span><span class='line'><span class="sd">     * @param CustomerInterface $customer Customer</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">sendEmail</span><span class="p">(</span>
</span><span class='line'>        <span class="nx">OrderInterface</span> <span class="nv">$order</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">CustomerInterface</span> <span class="nv">$customer</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="sd">/**</span>
</span><span class='line'><span class="sd">         * Send the email</span>
</span><span class='line'><span class="sd">         */</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This service has only one mission. Sending this email, no matter what event
executes it, no matter its environment. So if we take a look at what the Event
Listener implementation should look like now&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">OrderCreatedEmailEventListener</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var OrderCreatedEmailSender</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Order created email sender</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$orderCreatedEmailSender</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Constructor</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param OrderCreatedEmailSender $orderCreatedEmailSender</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">OrderCreatedEmailSender</span> <span class="nv">$orderCreatedEmailSender</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">orderCreatedEmailSender</span> <span class="o">=</span> <span class="nv">$orderCreatedEmailSender</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * We send an email to the Customer once an order is created</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param OrderOnCreatedEvent $event Event</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">sendEmail</span><span class="p">(</span><span class="nx">OrderOnCreatedEvent</span> <span class="nv">$event</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$order</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getOrder</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$customer</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getCustomer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">orderCreatedEmailSender</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">sendEmail</span><span class="p">(</span>
</span><span class='line'>                <span class="nv">$order</span><span class="p">,</span>
</span><span class='line'>                <span class="nv">$customer</span>
</span><span class='line'>            <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we should refactor as well the way we have defined our service in the
DependencyInjection config file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Business layer</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="l-Scalar-Plain">project.business.order_created_email_sender</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">My\Bundle\Business\OrderCreatedEmailSender</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Event Listeners</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="l-Scalar-Plain">project.event_listener.order_created_email</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">My\Bundle\EventListener\OrderCreatedEmailEventListener</span>
</span><span class='line'>        <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="err">@</span><span class="l-Scalar-Plain">project.business.order_created_email_sender</span>
</span><span class='line'>        <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="p-Indicator">{</span> <span class="nv">name</span><span class="p-Indicator">:</span> <span class="nv">kernel.event_listener</span><span class="p-Indicator">,</span> <span class="nv">event</span><span class="p-Indicator">:</span> <span class="nv">order.oncreate</span><span class="p-Indicator">,</span> <span class="nv">method</span><span class="p-Indicator">:</span> <span class="nv">sendEmail</span> <span class="p-Indicator">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s all.
This example is so easy and simple, but I am sure that if you take a look at
your project, you will find a lot of logic inside your Event Listeners. Maybe
could be a good idea start moving all this logic out of the box, treating these
listeners as real entry points, like we do with our Commands, Controllers or
Twig extensions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Defeating Expression Language]]></title>
    <link href="http://mmoreram.github.io/blog/2015/05/18/defeating-expression-language/"/>
    <updated>2015-05-18T09:53:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2015/05/18/defeating-expression-language</id>
    <content type="html"><![CDATA[<p>How beautiful Expression Language definitions are, right? I mean, inserting that
complex expressions in a Dependency Injection configuration file is so nice and
fast if you need to inject the result of a method in a service (one of the
multiple examples we can see)</p>

<p>Let&rsquo;s see a simple example of how we use this library.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># My managers</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="l-Scalar-Plain">some_manager</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">This\Is\My\Manager</span>
</span><span class='line'>        <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="err">@</span><span class="l-Scalar-Plain">=service(&quot;another_manager&quot;).someCall(&quot;value&quot;)</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="err">@</span><span class="l-Scalar-Plain">=service(&quot;yet_another_manager&quot;).getInjectableInstance(parameter(&quot;my_parameter&quot;))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is not a bad idea, really, but because we are engineers and we should have
as much information as possible in order to be able to choose between the best
option, always, I will show you another way of defining this piece of code.</p>

<p>Let&rsquo;s do that!</p>

<h3>Factories</h3>

<p>Remember the <a href="http://mmoreram.com/blog/2013/12/23/factory-pattern-in-symfony2/">Factory pattern in Symfony2</a>
post I wrote some time ago? I talked about how this pattern can be implemented
in your Symfony projects.</p>

<p>Well, just for your information, most of your Expression Language definitions
can be nicely done using Factories.</p>

<p>Let&rsquo;s reproduce the same example using factories.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># My managers</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="l-Scalar-Plain">some_manager</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">This\Is\My\Manager</span>
</span><span class='line'>        <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="err">@</span><span class="l-Scalar-Plain">my_injectable_value</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="err">@</span><span class="l-Scalar-Plain">my_injectable_service</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">my_injectable_value</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">StdClass</span>
</span><span class='line'>        <span class="l-Scalar-Plain">factory</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="err">@</span><span class="l-Scalar-Plain">another_manager</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">someCall</span>
</span><span class='line'>        <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">value</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">my_injectable_service</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">This\Is\My\Injectable\Class</span>
</span><span class='line'>        <span class="l-Scalar-Plain">factory</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="err">@</span><span class="l-Scalar-Plain">yet_another_manager</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">getInjectableInstance</span>
</span><span class='line'>        <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="err">%</span><span class="l-Scalar-Plain">my_parameter%</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dependency</h3>

<p>Take a look and realise that we&rsquo;ve removed a package dependency from your
project, as you don&rsquo;t need <code>symfony/expression-language</code> anymore, and your DIC
definition will be easily exportable to another format if someday is needed.</p>

<h3>Reflexion</h3>

<p>Is Expression Language a bad choice? Well, only you should be able to know if
using this library is a good choice or not, because only you know your needs and
your resources, but every time you add a new Expression Language line, just ask
yourself&hellip;</p>

<p>Can I use simple DI definitions here? Is the only way I can do that?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crowdfunding Soundtrack - El Evento]]></title>
    <link href="http://mmoreram.github.io/blog/2015/05/08/crowdfunding-soundtrack-the-event/"/>
    <updated>2015-05-08T17:29:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2015/05/08/crowdfunding-soundtrack-the-event</id>
    <content type="html"><![CDATA[<blockquote><p>This post is written in Spanish, but I will translate it soon. Stay tuned for
the translation :D</p></blockquote>

<p>Finalmente, y después de unas semanas cociendo la idea, valorando pros y contras
y el impacto que puede tener en mi vida personal lo que os voy a contar, he
decidido tirar para delante la idea más estúpida que se me ha podido ocurrir en
los 29 años de edad que tengo.</p>

<p>En pocas palabras, a modo introductorio y declarativo.</p>

<p>La idea es hacer una iniciativa CrowdFunding durante un periodo de 3 meses y
conseguir el dinero suficiente para cumplir los siguientes objetivos.</p>

<ul>
<li>Dado una <a href="http://open.spotify.com/user/mmoreramerino/playlist/76u4iXLIFxO3PMFWfwYk5A">lista de spotify</a>
donde he agrupado mis temas favoritos de bandas sonoras, que una Orquestra
Sinfónica interprete los temas en un evento público.</li>
<li>Yo, por mi parte, estudiar durante un periodo de tiempo dirección de orquestra
básico. Evidentemente lo justo para entender los conceptos necesarios y
defenderme.</li>
<li>Dirigir yo, personalmente, uno de los temas.</li>
<li>Donar absolutamente todo el dinero que se recaude en el evento (entradas,
dinero que no se haya gastado después de la iniciativa) al desarrollo y la
investigación de la sordera. Aún estoy buscando organización, universidad o
instituto.</li>
<li>Cumplir uno de mis retos personales, y con ello, ayudar a que otros cumplan
los suyos.</li>
</ul>


<p>Si en este punto sigues leyendo sin pensar que estoy mal de la cabeza,
recapacita; lo estoy. Aún así, eso no debería impedir que uno haga lo que
realmente quiere hacer, pues <em>que seríamos sin sueños estúpidos, solo estúpidos
sin sueños</em>.</p>

<h2>Los temas musicales</h2>

<p>Podéis encontrar el enlace de la lista de Spotify en el parágrafo anterior (debo
decir que falta un track de &ldquo;La Roca&rdquo; inexistente en Spotify. A continuación
adjunto dicha lista.</p>

<ul>
<li>The chase &ndash; The Rock</li>
<li>I don&rsquo;t think now it the best time &ndash; Pirates of the Caribbean &ndash; At world&rsquo;s end</li>
<li>A dark knight &ndash; The dark knight</li>
<li>Flight &ndash; Man of Steel</li>
<li>Comming back around &ndash; How to train your dragon</li>
<li>Spectres in the fog &ndash; The last samurai</li>
<li>The all spark &ndash; Transformers</li>
<li>My name is Lincoln &ndash; The island</li>
<li>War &ndash; Pearl Harbor</li>
<li>Chevaliers de Sangreal &ndash; The Da Vinci Code</li>
<li>Sound the Buggle now &ndash; Spirit, Stallion of the Cimarron</li>
<li>Run Free &ndash; Spirit, Stallion of the Cimarron</li>
<li>The Wheat &ndash; Gladiator</li>
<li>The Battle &ndash; Gladiator</li>
</ul>


<p>Cada uno de estos temas compone la banda sonora de mi vida.</p>

<h2>Crowdfunding</h2>

<p>Algunos os preguntaréis&hellip; bueno Marc, y todo esto cuanto vale? Pues aún estoy
trabajando en ello, pero es bastante dinero. Calculo que alrededor de unos
200.000 euros para ser específicos.</p>

<p>No tengo aún muy claro como voy a configurar los niveles de colaboración
(hay distintos mínimos de aportaciones, y cada uno de ellos te proporciona un
retorno de cierto nivel. En este caso el retorno será reducido para maximizar el
volumen de donación final)</p>

<p>Lo que si tengo claro es el tipo de público al que va la iniciativa.</p>

<ul>
<li>Patrocinadores &ndash; Empresas que quieran hacer que esto sea posible. Serán los
niveles de patrocinio más altos.</li>
<li>Individuales &ndash; Todo aquel que quiera hacer una donación a la investigación y
quiera que el evento ocurra podrá hacerlo mediante dicho evento. A partir de uno
de los niveles de patrocinio, habrá entrada gratuita al evento.</li>
<li>Aportaciones &ndash; Fuera del evento crowdfunding también se aceptarán donaciones,
aunque es preferible que todas entren por el evento.</li>
</ul>


<h2>La plataforma</h2>

<p>Finalmente, y después de solucionar un dilema mental que tenía entre si hacerlo
internacional o local, he decidido ejecutar el evento a nivel español. Para esto
trataré de utilizar la plataforma <a href="http://www.verkami.com/">Verkami</a> dado que
tengo muy buenas referencias.</p>

<h2>El porqué</h2>

<p>En realidad, últimamente estoy hablando mucho de emprendedores y de intentar
todo aquello que crees que deberías intentar. La idea de hacer eventos me gusta
mucho, de hecho soy organizador de un evento en Barcelona bastante chulo, aunque
local, por el momento.</p>

<p>El hecho también que me guste la música hasta límites indecentes hace que quiera
poner toda la carne en el asador, sin preguntarme demasiado el porqué hago todo
esto. Creo ser un músico frustrado y siempre me quedará el intentar, por todos
los medios posibles e imposibles, cumplir alguno de mis hitos indiscutibles.</p>

<p>El dirigir una orquestra es uno de ellos. Desde hace muchos años.</p>

<p>Y como he dicho alguna vez, el mejor consejo que me han dado nunca en mi vida ha
sido &ldquo;No lo intentes&rdquo;, por lo que, haciendo caso omiso a las personas vacías de
locura, no lo voy a intentar, lo voy a hacer.</p>

<h2>Próximos pasos</h2>

<ul>
<li>En unos días voy a colgar la iniciativa en Verkami.</li>
<li>Hacer ruido. Mucho ruido. Demostrar que todo es posible.</li>
<li>Buscar organización o similar para donar todo el dinero ganado.</li>
<li>Trabajar bien el evento y todas las piezas componen organizar un
acontecimiento de estas características.</li>
<li>Encontrar un grupo de gente motivada con la idea que quiera ayudarme una vez
se cierre la iniciativa con resultado positivo.</li>
<li>Seguir trabajando en la idea, hasta el final.</li>
</ul>


<p>Si quieres estar actualizado sobre el evento, puedes seguir-me en
<a href="http://twitter.com/mmoreram">Twitter</a> o suscribirte a mi blog, desde donde voy
a escribir de forma periódica todas las actualizaciones sobre el evento.</p>

<p>Saludos a todos.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lazy Commands in Symfony]]></title>
    <link href="http://mmoreram.github.io/blog/2015/05/08/lazy-commands-in-symfony/"/>
    <updated>2015-05-08T11:04:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2015/05/08/lazy-commands-in-symfony</id>
    <content type="html"><![CDATA[<p>Have you ever had this scenario?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>php app/console doctrine:database:drop --force
</span><span class='line'><span class="nv">$ </span>php app/console doctrine:database:create
</span><span class='line'>
</span><span class='line'>    <span class="o">[</span>Doctrine<span class="se">\D</span>BAL<span class="se">\E</span>xception<span class="se">\C</span>onnectionException<span class="o">]</span>
</span><span class='line'>    An exception occured in driver: SQLSTATE<span class="o">[</span>42000<span class="o">]</span> <span class="o">[</span>1049<span class="o">]</span> Unknown database <span class="s1">&#39;mydatabase&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, it happens and I will tell you why.</p>

<h2>Command as a Service</h2>

<p>Since Symfony version 2.4 you can define your controllers and commands as
services. This is so useful as long as you need to treat your classes as much
decoupled as possible. You can check some information about how to define them
as services in
<a href="http://symfony.com/doc/current/cookbook/console/commands_as_services.html">Symfony Documentation</a>.</p>

<p>Then, let&rsquo;s figure out that our command is intended to check an entity from your
database. Of course, your command should be as empty as possible, placing all
your business logic inside your service layer (this is not the only strategy, of
course, but there is no strategy where you lace your logic inside your command).</p>

<p>Then, using commands as services, you will have this</p>

<ul>
<li>ObjectManager as a service (or Repository)</li>
<li>Your service, intended to do whatever you need to do, for example, check that
your entities are all enabled. Your ObjectManager or Repository will be injected
here</li>
<li>Your command, intended to work as the simple layer between your cli interface
and your service layer. Your service will be injected here.</li>
</ul>


<p>Given this schema, when we require this command through the DI Container, of
course a new Service instance will be created in order to inject it through the
command constructor, and the object will have to be created as well to be
injected inside the service.</p>

<p>It means create a new connection to the database. Fair enough till now :)</p>

<h2>Commands list</h2>

<p>Let me show you some lines of code. This method is placed in a class called
<code>Application</code> inside the bundle <code>FrameworkBundle</code>. This class is intended to add
the possibility of adding Commands as services in the main Application class of
Command Component.</p>

<p><a href="https://github.com/symfony/symfony/blob/2.7/src/Symfony/Bundle/FrameworkBundle/Console/Application.php">Symfony\Bundle\FrameworkBundle\Console\Application</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">protected</span> <span class="k">function</span> <span class="nf">registerCommands</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$container</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">kernel</span><span class="o">-&gt;</span><span class="na">getContainer</span><span class="p">();</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">kernel</span><span class="o">-&gt;</span><span class="na">getBundles</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$bundle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$bundle</span> <span class="nx">instanceof</span> <span class="nx">Bundle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$bundle</span><span class="o">-&gt;</span><span class="na">registerCommands</span><span class="p">(</span><span class="nv">$this</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$container</span><span class="o">-&gt;</span><span class="na">hasParameter</span><span class="p">(</span><span class="s1">&#39;console.command.ids&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$container</span><span class="o">-&gt;</span><span class="na">getParameter</span><span class="p">(</span><span class="s1">&#39;console.command.ids&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="nv">$id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$container</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="nv">$id</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oh, wait&hellip; what?</p>

<p>Register a command means instantiate it! So if we have a command with a service
injected which has an object manager injected&hellip; then we have a problem. If we
don&rsquo;t have the database created we will not be able to create it using the
Doctrine command.</p>

<p><em>~ironic~ Perfect scenario for deployment ~/ironic~</em></p>

<h2>Using Lazy services</h2>

<p>Of course we should find a solution for this scenario, in order to be able to
call this command when is needed.</p>

<p>When we define as lazy a service, this is not instanced when is injected, but
only when is accessed. You can find some information about lazy services in
<a href="http://symfony.com/doc/current/components/dependency_injection/lazy_services.html">Symfony Documentation</a>.</p>

<p>The point here is to define our service intended to work with the model as lazy.
The result will be that when we instance the Command, then a proxy object is
created and injected with all the service information.</p>

<p>Because our command will not be used as long as we don&rsquo;t need it, then the
service will not be instanced and the ObjectManager not created. We will be able
to list all the commands, and finally, call
<code>php app/console doctrine:database:create</code> properly.</p>

<h2>Implementation</h2>

<p>Some tips here&hellip;</p>

<ul>
<li>Why instancing all services when we just need them to be listed? Is it really
necessary? Doing than we are forcing some service to be defined as lazy just
because of it, and this is not and will never be a good practice.</li>
<li>If the command needs to be instanced to be listed, and assuming that this
information <del>should</del> could be cached, then, is it necessary to call the
constructor? We could get the class, build the object using <code>\ReflectionClass</code>
and request all the needed information.</li>
</ul>


<p>I invoke the community for some feedback on that. If this is really a need for
some people, we should do some push (and organize us for an implementation,
maybe) to change this implementation for next Symfony 3 version.</p>

<p>Feedback, feedback :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Montando a Pau Garcia-Milà]]></title>
    <link href="http://mmoreram.github.io/blog/2015/05/07/montando-a-pau-garcia-mila/"/>
    <updated>2015-05-07T02:58:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2015/05/07/montando-a-pau-garcia-mila</id>
    <content type="html"><![CDATA[<p>Hace apenas unas semanas, en un diario nacional español, aparecía un escrito
inquietante, al menos a simple vista, sobre algunos puntos discutibles alrededor
del ya más que conocido emprendedor Pau Garcia-Milà.</p>

<p><a href="http://www.eldiario.es/hojaderouter/emprendedores/pau_garcia-mila-emprendimiento-EyeOS-Bananity_0_369213079.html">Post original</a></p>

<p>Para los interesados, decir que el propio Pau respondió días más tarde en su
blog, respondiendo a ciertas afirmaciones.</p>

<p><a href="http://paugarciamila.com/desmontando-a-pau-garcia-mila/">Respuesta de Pau</a></p>

<p>En dicho escrito, se analizan algunos de los puntos importantes y críticos por
los que nuestro protagonista ha pasado durante los últimos años, dejando al
lector la tarea de leer a simple vista un gran elenco de comentarios de algunas
personas cuya opinión se les fue requerida, entiendo yo.</p>

<p>Antes de todo decir escuetamente que yo recuerdo a Pau en sus inicios, cuando
empezó a ser un personaje público. Añadir también que, tras un tiempo teniéndolo
en mi <em>top of mind</em> como referencia y recordándolo como
<em>simplemente, brillante</em>, y por alguna razón que no logré entender durante mucho
tiempo, pasó a ser mi <em>vende-humos</em> favorito.</p>

<blockquote><p>Éste no ha hecho nada. Solo habla de ideas. Yo también tengo muchas ideas!
Mirad! Un percebe con alas! Fundemos una empresa que se llame Engonga
associated y conquistemos el mundo. Ah, no, esperad, que con una idea uno no
tiene ni para empezar&hellip; Nada, vuelvo al mundo real, en mi sofá de pensar.</p></blockquote>

<p>Pero gracias a Dios, a veces en la vida te encuentras a grandes personas que te
bautizan de golpe como <em>ex-hater</em>, y te das cuenta que el odio es,
habitualmente, proporcional a la envidia, y quién mejor que una persona a la que
envidias para empezar a admirar.</p>

<p>He aquí mi pequeño paso hacia la redención relativa. Mi objetivo, la completa
madurez. :)</p>

<h3>Reflexiones</h3>

<p>En este post, y como persona emprendedora que creo ser, añado algunas respuestas
a comentarios del post original sin entrar demasiado al detalle.</p>

<blockquote><p>Ha empezado cosas, pero no ha terminado ninguna. Son habilidades distintas.
Creo que es un grandísimo comunicador y tiene éxito con eso, pero como
emprendedor no lo ha demostrado</p></blockquote>

<p>En realidad esta frase es la que más me duele a mi, como emprendedor que soy.
Hace un poco más de un año y medio que trabajo en un proyecto, y siento decir
que, por ahora, no he demostrado nada a nadie. ¿Eso me convierte en menos
emprendedor?</p>

<p>Trabajo un mínimo de 80 horas semanales en un proyecto de código libre de índole
internacional, llevo una comunidad de desarrolladores Web local cuyos eventos
son referenciados en todo el mundo, tengo unos cuantos proyectos personales
también de código libre utilizados en multitud de empresas reales, y en el
tiempo más libre de mi tiempo libre, soy ponente en eventos alrededor del globo.</p>

<p>¿Demostrado? Si se refiere a si he vendido alguna empresa por 20 millones de
euros, pues no&hellip; ¿Emprendedor? Hombre, pues creo que algo si, ¿no?</p>

<p>Debo decir con gran aplomo que ningún emprendedor tiene que demostrar nada a
nadie para serlo, y es que la palabra emprendedor, uno, se la gana con el
trabajo y el sudor, no con los éxitos (y menos midiendo los éxitos en cifras
o en rondas de inversión).</p>

<p>Emprendedor es el que crea sitios de trabajo, el que crea equipos sanos y
empresas con ideales humanos. Emprendedor es quien no se rinde a pesar de sus
innumerables fracasos. Emprendedor es el que tras un &ldquo;No lo vas a conseguir&rdquo; ve
un &ldquo;Debes conseguirlo&rdquo;.</p>

<p>Emprendedor es quien persigue lo que todo el mundo ha dejado por imposible.</p>

<p>Está claro que Pau es un gran comunicador y también está claro que ha tenido
éxito con ello, pero seamos realistas y no nos dejemos llevar por la envidia y
el descontrol: Un chico que a los 28 años ha tratado de levantar 3 empresas (la
cuarta recientemente) y haya vendido una, cuales fueran las condiciones de dicha
transacción y cuya información no me interesa en absoluto, absolutamente nadie
puede tacharle de no ser emprendedor (evidentemente mencionar sus libros,
charlas y todo el ecosistema que ha creado alrededor).</p>

<p>Yo me quito el sombrero, al menos, por haberlo intentado.</p>

<p>Pero está claro que es más simple y fácil entrar en la crítica destructiva y
sensacionalista. Nos alimenta mucho más el ego interior y nos hace sentir más
fuertes a nosotros, seres iluminados. Pero la realidad es que tras la fachada de
un comunicador como Pau hay, en la mayoría de los casos, una mente brillante y
un trabajo constante. Otra cosa es tener interés en conocer este trabajo y
valorarlo como se debe.</p>

<p>Que difícil es hacer esto.</p>

<blockquote><p>pero hay grandes emprendedores en España que son menos mediáticos. Mi
experiencia me dice que el éxito de un emprendedor es inversamente
proporcional a sus seguidores en Twitter. No suele ser mediático.</p></blockquote>

<p>El número de seguidores que tiene una persona en Twitter es directamente
proporcional a varios elementos, como el campo en que esta persona haya decidido
ser emprendedor (no es lo mismo un químico que un informático) o el carácter
comunicativo que dicha persona tenga en su personalidad (No es lo mismo una
persona expansiva y sociable que una persona itrovertida y tímida).</p>

<p>Algunos ejemplos rápidos.</p>

<ul>
<li>Bill Gates, co-fundador de Microsoft, <strong>21.8 millones</strong> de followers</li>
<li>Steve Wozniak, co-fundador de Apple, <strong>402 mil</strong> followers</li>
<li>Elon Musk, fundador de Tesla y PayPal, <strong>2.06 millones</strong> de followers</li>
<li>Jimmy Wales, fundador de Wikipedia, <strong>110 mil</strong> followers</li>
<li>Charles W. Hull, inventor de la impresora 3D (nada, es posible que solo
revolucione el modelo industrial en los próximos años)&hellip; <strong>0</strong> followers</li>
<li>Steve Chen, co-fundador de Youtube, <strong>3599</strong> followers</li>
</ul>


<p>Podría seguir, pero carece de sentido categorizar a estos emprendedores como
ejemplos de qué es tener poco éxito&hellip; Personas como ellas hacen que la sociedad
avance en campos como la medicina, la tecnología o el bienestar.</p>

<p>Evidentemente esto no quita que hay emprendedores de éxito abismal que, por
decisión propia, han preferido quedarse en segundo plano en temas sociales. Y
esta es una decisión igual de factible, correcta e indiscutible que cualquier
otra.</p>

<blockquote><p>Tenemos que animar con credibilidad. Lo bueno es que nos fijemos en los que ya
han tenido éxito, porque es lo que cuenta: si no, se genera la sensación de
que esto no es serio</p></blockquote>

<p>Comentario propio del que lo tuvo todo muy fácil.</p>

<p>Precisamente la gente necesita ver a personas que lo intentan a pesar de que las
cosas van en contra, y aceptar que fallar nos hace aún más humanos. La
credibilidad se demuestra con los caminos que uno hace a lo largo de su vida, la
credibilidad la marca la honestidad y la ley del esfuerzo, sea cual sea el
resultado final.</p>

<p>Adjudicar seriedad al grado de éxito es, a mi parecer, una falta de respeto para
los que aún no hemos conseguido nada, aún lo intentemos con todas nuestras
fuerzas. Y lo que me parece más grave, me parece una falta de respeto
innecesaria, un comentario fuera de lugar y una doctrina tóxica para una
sociedad desanimada y desorientada como es la nuestra.</p>

<p>Reflexión, por favor.</p>

<h3>Conclusión</h3>

<p>Emprendedor, no emprendedor. Da igual, lo importante para una sociedad es el
esfuerzo. Hable en público, tenga seguidores en Twitter o toque la pandereta con
los ojos cerrados y en sol sostenido, son elementos personales, injuzgables más
allá de uno mismo, y menos cuando el impacto social es positivo, mires por donde
lo mires.</p>

<p>Repito una frase con la que empezaba mi post dado que encuentro interesante y
reveladora.</p>

<blockquote><p>el odio es, habitualmente, proporcional a la envidia, y quién mejor que una
persona a la que envidias para empezar a admirar</p></blockquote>

<p>Mi consejo siempre es el mismo. Que el miedo a intentar cosas no os impida no
hacerlas, y que simplemente os hagan más cautos. No os dejéis llevar por la
mediocridad social a la hora de juzgar a personas que trabajan por su futuro y
sed críticos más allá de 4 medios de comunicación de intenciones puramente
marketinianas.</p>

<p>Dicho esto, sed felices y volad cometas.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visithor, testing your routes without pain]]></title>
    <link href="http://mmoreram.github.io/blog/2015/05/04/visithor/"/>
    <updated>2015-05-04T13:11:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2015/05/04/visithor</id>
    <content type="html"><![CDATA[<p>Do you like testing? I like testing. Well, in fact I like testing once I have
understood how the engine I am using works. Until this moment, everything is a
completely disaster.</p>

<p>And because this learning curve, many of my personal projects have reached an
MVP without any type of testing environment. And sincerely, I don&rsquo;t really like
this scenario.</p>

<p>Many years ago I was thinking about a <strong>simple</strong> and fast tool to test specific
routes, expecting specific HTTP codes and providing an easy environment of
ensuring properly your HTTP layer.</p>

<p>So&hellip; I present you <a href="http://github.com/visithor/visithor">Visithor</a>, a PHP based
library that provides you this functionality, with a simple configuration
definition and a very easy way of installation.</p>

<p>Let&rsquo;s see an example.</p>

<h2>Execute Visithor</h2>

<p>With this lines of code you will download Visithor, ready to be used.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone git@github.com:visithor/visithor.git
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>visithor
</span><span class='line'><span class="err">$</span>
</span><span class='line'><span class="nv">$ </span>build/visithor.phar
</span></code></pre></td></tr></table></div></figure>


<p>You can download it as a global executable</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone git@github.com:visithor/visithor.git
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>visithor
</span><span class='line'><span class="nv">$ </span>cp build/visithor.phar /usr/local/bin/visithor
</span><span class='line'><span class="err">$</span>
</span><span class='line'><span class="nv">$ </span>visithor
</span></code></pre></td></tr></table></div></figure>


<h2>Creating your configuration</h2>

<p>As easy as it seems. This is a random configuration file with a random set of
urls. If your <code>visithor.yml</code> file is placed in the same folder than you are,
then you don&rsquo;t have to specify its location. Otherwise, please use the
<em>[&mdash;config|-c]</em> option.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># This value can be a simple HTTP Code or an array of acceptable HTTP Codes</span>
</span><span class='line'>    <span class="c1"># - 200</span>
</span><span class='line'>    <span class="c1"># - [200, 301]</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="l-Scalar-Plain">http_codes</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">200</span><span class="p-Indicator">,</span> <span class="nv">302</span><span class="p-Indicator">]</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">urls</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># By default, is there is no specified HTTP Code, then default one is used</span>
</span><span class='line'>    <span class="c1"># as the valid one</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">http://google.es</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">http://elcodi.io</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># There are some other formats available as well</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="p-Indicator">[</span><span class="nv">http</span><span class="p-Indicator">:</span><span class="nv">//shopery.com</span><span class="p-Indicator">,</span> <span class="nv">200</span><span class="p-Indicator">]</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="p-Indicator">[</span><span class="nv">http</span><span class="p-Indicator">:</span><span class="nv">//mmoreram.com</span><span class="p-Indicator">,</span> <span class="p-Indicator">[</span><span class="nv">200</span><span class="p-Indicator">,</span> <span class="nv">302</span><span class="p-Indicator">]]</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="p-Indicator">[</span><span class="nv">http</span><span class="p-Indicator">:</span><span class="nv">//nonexistingurl.com</span><span class="p-Indicator">,</span> <span class="p-Indicator">[</span><span class="nv">200</span><span class="p-Indicator">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, the execution result is <em>0</em></p>

<h2>Executing Visithor</h2>

<p>Once you have it installed and you have a configuration file, let&rsquo;s see what
happens!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ visithor visithor:go</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Visithor by Marc Morera and contributors.</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Configuration read from /var/www/my/project</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">OK [200] http://google.es</span>
</span><span class='line'><span class="l-Scalar-Plain">OK [200] http://elcodi.io</span>
</span><span class='line'><span class="l-Scalar-Plain">OK [200] http://shopery.com</span>
</span><span class='line'><span class="l-Scalar-Plain">OK [200] http://mmoreram.com</span>
</span><span class='line'><span class="l-Scalar-Plain">KO [404] http://nonexistingurl.com</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Time</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1002 ms, Memory</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">15.5Mb</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, we have an error. We expect a <code>200</code> code when we call
<code>http://nonexistingurl.com</code> but the real response is <code>404</code>, so it fails. Then,
the execution result is <em>1</em>.</p>

<h2>Integrations</h2>

<p>You can integrate Visithor with your Symfony projects right now. I expect some
other integrations will be available soon.</p>

<ul>
<li><a href="http://github.com/Visithor/VisithorBundle">VisithorBundle</a></li>
</ul>


<p>If you use this bundle, then you will be able to define your routes not with the
final path but with the route name and a bunch of parameters, as it is shown
here.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># This value can be a simple HTTP Code or an array of acceptable HTTP Codes</span>
</span><span class='line'>    <span class="c1"># - 200</span>
</span><span class='line'>    <span class="c1"># - [200, 301]</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="l-Scalar-Plain">http_codes</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">200</span><span class="p-Indicator">,</span> <span class="nv">302</span><span class="p-Indicator">]</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">urls</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># This Bundle adds some extra formats</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="p-Indicator">[</span><span class="nv">store_homepage</span><span class="p-Indicator">,</span> <span class="nv">200</span><span class="p-Indicator">]</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="p-Indicator">[[</span><span class="nv">store_category_products_list</span><span class="p-Indicator">,</span> <span class="p-Indicator">{</span><span class="s">&#39;slug&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;women-shirts&#39;</span><span class="p-Indicator">,</span> <span class="s">&#39;id&#39;</span><span class="p-Indicator">:</span> <span class="nv">1</span><span class="p-Indicator">}],</span> <span class="nv">200</span><span class="p-Indicator">]</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="p-Indicator">[[</span><span class="nv">store_category_products_list</span><span class="p-Indicator">,</span> <span class="p-Indicator">{</span><span class="s">&#39;slug&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;another-name&#39;</span><span class="p-Indicator">,</span> <span class="s">&#39;id&#39;</span><span class="p-Indicator">:</span> <span class="nv">1</span><span class="p-Indicator">}],</span> <span class="nv">302</span><span class="p-Indicator">]</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="p-Indicator">[[</span><span class="nv">store_homepage</span><span class="p-Indicator">,</span> <span class="p-Indicator">{</span><span class="nv">_locale</span><span class="p-Indicator">:</span> <span class="nv">es</span><span class="p-Indicator">}]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This project is being so useful for me, I expect it will be for you as well :)</p>

<h2>Travis</h2>

<p>Of course, you can add Visithor in your travis tests suite. You can use the
[&mdash;format|-f] option to change the format and use <em>dots</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">bin/behat -fprogress --tags=&quot;~javascript&quot;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">bin/phpunit -c app</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">bin/visithor --format=dots visithor:go</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Behat and data-test]]></title>
    <link href="http://mmoreram.github.io/blog/2015/04/25/behat-and-data-test/"/>
    <updated>2015-04-25T16:31:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2015/04/25/behat-and-data-test</id>
    <content type="html"><![CDATA[<p>Tests should be as robust as possible.</p>

<p>I think you will agree with me with that phrase. If your tests are too coupled
with your implementation, a simple modification of your code will need the
modification of your tests, and that&rsquo;s so annoying, right?</p>

<p>I&rsquo;ve using Behat for the last months in my projects, and as soon as you dominate
the tool it becomes really useful to make sure that any future refactoring or
change will break these user stories you have already defined and tested.</p>

<p>So, thinking about coupling I saw this method in Behat implementation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Presses button with specified id|name|title|alt|value.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @When /^(?:|I )press &quot;(?P&lt;button&gt;(?:[^&quot;]|\\&quot;)*)&quot;$/</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">pressButton</span><span class="p">(</span><span class="nv">$button</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What do you think? Do you think that this method helps people to really decouple
the tests from their implementation? I don&rsquo;t really think so&hellip; Let me explain.</p>

<h3>Design v Test</h3>

<p>My question is&hellip; should the frontend of your website be aware of the how your
Behat tests are built? In my opinion, <strong>nope</strong>.</p>

<p>Your tests should live in a simple layout on top of your application, emulating
some cases and ensuring that your users will be able to do what they should be
able to.</p>

<p>Said this, you cannot build your tests depending on final implementation. So,
whats the problem there?</p>

<h3>HTML Properties</h3>

<p>Dear backend. Between you and me&hellip; we have nothing to do with some html
properties, and you know that&hellip; This is the frontend world and we have nothing
to say about that :)</p>

<p>So why referring to html property <code>id</code> in your Behat cases? It has no sense
indeed. You will need to change <strong>all</strong> your tests every time your frontend
says&hellip; <em>refactoring time!!</em>, and we have no enough time for this, right?</p>

<p>So&hellip; first property strikethrough.</p>

<h3>Translations</h3>

<p>Dear backend (again, yes). Between you and me&hellip; we have neither nothing to do
with translations, and we both know as well that translations is something
really changeable (that means evolving&hellip; so yes, that are good news indeed), so
how about coupling your fantastic tests to translations?</p>

<p>How do you really know that your submission button copy will be always <code>send</code>?
What if someone thinks that is better <code>submit</code>? The point is that you <strong>don&rsquo;t</strong>
know that, and you will never do.</p>

<p>If you don&rsquo;t want to do that, please, don&rsquo;t use <code>title</code>, <code>alt</code> nor <code>value</code>. All
these html properties are very used to changing if you use them properly, so if
you have your site in several countries with some modifications, you will not be
able to reuse any scenario.</p>

<p>Bad choice again.</p>

<h3>Symfony Forms</h3>

<p>We still have the <code>name</code> property, a very important property for forms and
references inside your DOM. In fact, too much important to be an starting point
for your test cases.</p>

<p>For example, you can fill a value in a Symfony Form input, but you know what?
Symfony Forms define themselves how their forms are named, in order to know how
to build them again after submitting them.</p>

<p>If you use <code>name</code> property, and for example you have different teams for
developing your applications and for testing them, you will add an extra and
useless coupling layer between them. This means more <em>points of failure</em> and, at
the end, less agility.</p>

<p>Not valid.</p>

<h3>So what?</h3>

<p>Well, this is a <em>problem</em> really easy to solve. Have you ever meet the property
<code>data-test</code>? You can build any property starting with <code>data-</code> and will be okay.
So, in that case you can safely reference your elements using it.</p>

<ul>
<li>Your front-ends have nothing to do with it. They will see <code>data-test</code> and will
know that they belong to the testing layer. Then, they will ignore it, and even
if they decide to refactor a page, they will preserve this property (if they
can and want, of course) and your tests will not have any reason to expire.</li>
<li>Your tests will have nothing to do with translation, product people and other
tactical nor strategical changes.</li>
<li>People of your team will now have a unique way of referencing visible elements
of your application.</li>
</ul>


<p>That&rsquo;s so nice!</p>

<h3>Implementation</h3>

<p>Well, after this analysis, I propose to add <code>data-test</code> in all pre-defined
selectors in order to allow people to uncouple from implementation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Presses button with specified id|name|title|alt|value|data-test.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @When /^(?:|I )press &quot;(?P&lt;button&gt;(?:[^&quot;]|\\&quot;)*)&quot;$/</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">pressButton</span><span class="p">(</span><span class="nv">$button</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Please, I would like to have some feedback, specially if you are used to working
with Behat or any kind of Behavioral Testing Tool.</p>

<p>Thanks and enjoy your day!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflexiones de un pequeño emprendedor]]></title>
    <link href="http://mmoreram.github.io/blog/2015/04/05/reflexiones-de-un-pequeno-emprendedor/"/>
    <updated>2015-04-05T01:58:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2015/04/05/reflexiones-de-un-pequeno-emprendedor</id>
    <content type="html"><![CDATA[<p>Ya hace un poco más de un año que estoy a bordo de este proyecto llamado Elcodi.
Para los que no conozcáis el proyecto, solo unas simples pistas&hellip;</p>

<ul>
<li>E-commerce</li>
<li><a href="https.//symfony.com">Symfony</a></li>
<li><a href="https://github.com/elcodi/elcodi">Elcodi</a></li>
</ul>


<p>Hace bastantes semanas que tenía ganas de formular una entrada al blog de
éste índole. Normalmente intento hacer mis posts en inglés, pero me pareció
adecuado hacer éste en español, dado que lo hago desde una perspectiva más de
emprendedor que no de técnico.</p>

<blockquote><p>Debo decir brevemente que no me gusta la palabra &ldquo;emprendedor&rdquo;. Durante los
últimos años se le ha dado un significado demasiado Trending y se le ha
asociado a figuras de visibilidad pública. Desde mi punto de vista,
emprendedor es aquel que se desvive por su trabajo, sea cual sea, y que lo
entiende como una forma de vida. Utilizaré esta palabra desde esta perspectiva</p></blockquote>

<p>Os quiero contar de forma bastante breve lo que, después de éste tiempo,
considero son algunos puntos importantes de un emprendedor.
Considerando que soy una persona formada de forma pura en el mundo técnico y que
he experimentado una transición un poco brusca hacia el mundo de la
emprendeduría empresarial, quiero dejar claro que estos son mis puntos de vista
dada mi trayectoria, por lo que es probable que algunos no sean mundialmente
compartidos por todos.</p>

<h3>La Idea</h3>

<p>Tengo la sensación que se le asigna demasiado valor a la idea. Como se suele
decir, la idea no vale <strong>nada</strong>. Una semilla tal vez, nada más. El auténtico valor
reside en considerar ésta misma idea importante durante el tiempo adecuado. El
mérito está en mantener la expectativa y la motivación en su punto más álgido lo
suficiente como para que la ejecución tome la mínima forma como para que sea
algo real.</p>

<p>Es en este punto es donde te das cuenta que lo más fácil en realidad fue tener
dicha idea, y que lo más cómodo hubiera sido dejar de lado la motivación para
hacer algo más significativo a corto plazo.</p>

<p>El auténtico emprendedor entiende de raíz que dicho esfuerzo, con su parte
proporcional y proporcionada de suerte, ayuda y café, siempre acaba siendo más
rentable para todo el mundo a largo plazo.</p>

<h3>El Desarrollo</h3>

<p>Todo proceso que te lleva de la mano de ésta idea amorfa hasta la definición y
ejecución de la misma requiere un esfuerzo que, en la mayoría de los casos, te
aísla de forma inconsciente de todo lo demás.</p>

<blockquote><p>Quien dice emprendedor, dice luchador
Luchador cuya soledad le invade en su lucha
Y en medio del silencio oye su respiración
Y entiende su existencia</p></blockquote>

<p>Es un gran ejercicio de descubrimiento personal. Te das cuenta de lo que puedes,
de los que sabes y de lo que eres capaz. Y cuando crees que no puedes saber más,
te das cuenta que apenas sabes nada. Aprendes a aprender mientras aprendes a
desaprender.</p>

<p>Hasta aquí un intento descarado y fracasado de poesía. Ahora vuelvo a la simple
y terrenal prosa, más digna de mi focalizado potencial&hellip;</p>

<p>Ha sido el año más duro y a la vez delicioso de mi carrera profesional. He
aprendido a lidiar con mentes completamente distintas a la mía, y esto me ha
dado cierta capacidad de análisis teniendo múltiples puntos de vista, muy
necesario para cualquiera con alguna aspiración empresarial.</p>

<p>Debo decir que a día de hoy sigo sin entender muchas cosas, algo que me hace
seguir siendo lo suficiente ingenuo como para estar demasiado ilusionado por
todo.</p>

<p>De todas formas, el camino sigue, y espero poder seguir teniendo este análisis
absolutamente positivo año tras año&hellip; significará que seguiré en mi lucha por
buscar algo realmente grande, aún habiéndolo encontrado.</p>

<h3>Las Ganas</h3>

<p>Y en éste camino, debo reconocer que el concepto <em>ganas</em>, mundialmente
conocido por <em>motivación</em>, suele experimentar un movimiento sinusoidal más
típico de una montaña rusa del siglo XXI.</p>

<p>Mi único apunte sobre este tema, y es algo que yo he llegado a aprender con el
tiempo, es que una buena técnica para poder sobrevivir a todo esto es teniendo
en cuenta que tu cabeza no tiene siempre la razón. Me refiero a que hay días en
los que los pensamientos negativos parecen la única materia generada por tu
astuto cerebro.</p>

<p>Bien, ignóralo.</p>

<p>¿Días de estos en que, literalmente lo ves todo negro? Bien, quédate en
casa, tómate un respiro y descansa. Te darás cuenta que ignorando estos
pensamientos darás paso de nuevo a otros mejores. Seguro que el día siguiente
puedes seguir como si nada.</p>

<p>Debo decir que a mi me funciona. Mis ganas suelen regenerarse después de un alto
desgaste debido a una frenética entrega o a una época difícil.</p>

<h3>El Equipo</h3>

<p>Y a todo esto hay que añadirle el ingrediente más importante.</p>

<p>El equipo.</p>

<p>De manual. Esta frase suele salir de forma prefabricada de la boca de cualquier
persona que quiera ser algo trending. De todas formas, siempre he pensado que
había otra forma de hacer las cosas que se saliera un poco de la tradicional a
la que nos tienen acostumbrados.</p>

<p>Debo decir que soy de ideas fuertes, y desde que salí de la carrera y durante
mi <em>corta</em> trayectoria profesional me he cruzado con líderes y con jefes. Debo
añadir de forma categórica que hubiera seguido a los líderes hasta los confines
del fracaso, mientras que no hubiera dedicado un solo segundo a buscar el éxito
al lado de ningún jefe.</p>

<p>Y es que los líderes hacen girar el mundo. O dicho mejor, los líderes hacen que
todos hagamos girar el mundo de una forma optimista y valiente.</p>

<p>Dicho esto, y tras haberme cruzado con un poco de todo, decidí que era hora de
poner a prueba mis teorías. El mejor equipo hace la mejor empresa, y para que
sea así, la mejor empresa debe tener el mejor equipo. Y debo reconocer que, si
de por sí no es nada fácil buscar gente para un equipo potente, menos lo es si
tienes en cuenta ciertos parámetros de convivencia, motivación y encaje.</p>

<p>Con el tiempo me he dado cuenta que algo merece gran cantidad de mi fuerza vital
y esfuerzo es buscar un equipo con el que pasar las horas disfrutando de mi
trabajo. Éste equipo será tu mano derecha y tu mano izquierda. Será tu apoyo en
los mejores y peores momentos, y será tu mayor crítico cuando necesites de una
voz sincera y dura.</p>

<p>Mi equipo.</p>

<p>El mejor equipo del mundo.</p>

<h3>Conclusión</h3>

<p>Como podéis ver, y termino, Elcodi es un proyecto sano. Debo reconocer que estoy
abrumado por el equipo humano que tenemos en la empresa. Nuestra máxima
prioridad es que en el día a día del equipo sea lo más agradable posible, y que
el trabajo se convierta en algo realmente fascinante.</p>

<p>Por mi parte estoy satisfecho por todo, con perspectivas de incalculable valor y
rodeado de, literalmente, los mejores compañeros de viaje que uno podría tener.</p>

<p>Mucha suerte y mucha fuerza a todos los que habéis decidido que el camino más
largo y duro es el que mejor encaja en vuestra vida. Os mando mi energía y mis
mayores deseos de éxito.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PDD Manifesto]]></title>
    <link href="http://mmoreram.github.io/blog/2015/01/10/pdd-manifesto/"/>
    <updated>2015-01-10T18:40:00+01:00</updated>
    <id>http://mmoreram.github.io/blog/2015/01/10/pdd-manifesto</id>
    <content type="html"><![CDATA[<p>Hi everyone.</p>

<p>I&rsquo;ve been talking about PDD for a while. Pragmatism-Driven Development, a
methodology that takes in account the development environment and the
circumstances before of deciding the tools and the architectural decisions of
your projects.</p>

<p><a href="http://mmoreram.com/blog/2014/10/26/pdd-pragmatic-driven-development-english/">Pragmatic Driver Development</a></p>

<p>Some people asked me for the manifesto. And because I think that some people
will appreciate another way of doing things more realistic, I started the first
draft of that manifesto some time ago.</p>

<p>After discussions with the ecosystem where I work, finally, I can release the
first version of the manifesto.</p>

<p>These are just some ideas, not a dogma, so please, don&rsquo;t use them as the only
way of doing things, making the same mistake again and again.</p>

<p>I will appreciate as well your constructive comments, so the real objective of
that kind of things are, indeed, to make people more comfortable with their
projects.</p>

<p>The more useful projects, the more knowledge shared, the more fun for everyone.</p>

<p>Be happy!</p>

<h2>PDD Manifesto</h2>

<h3>Good practices</h3>

<ul>
<li>All good practice is only good if it is.</li>
<li>A good practice is good, indeed, if the executor knows it enough.</li>
<li>Otherwise, a good practice becomes always a bad practice; Ipso Facto.</li>
</ul>


<h3>Bad practices</h3>

<ul>
<li>All bad practice can be accepted, if, and only if, is well known by the executor.</li>
<li>Knowing them means to have a strict control of your current bad practices.</li>
<li>The absence of this control turns any bad practice in a poorly executed project.</li>
</ul>


<h3>Analyzing</h3>

<ul>
<li>Every project must be analyzed according to needs and own tools.</li>
<li>Accepting that these needs and tools are static is accepting their failure.</li>
<li>Starting a project destined to fail is the worst practice of all.</li>
</ul>


<h3>Evolving</h3>

<ul>
<li>These needs can change along the time, so the tools have to change as well.</li>
<li>Internal and staff training is essential for the evolution of a team, and therefore a project.</li>
<li>All components of such team must evolve to self-acceptance and practice of good practices.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SymfonyWalk - c'est fini]]></title>
    <link href="http://mmoreram.github.io/blog/2014/11/25/symfony-walk-ends/"/>
    <updated>2014-11-25T12:13:00+01:00</updated>
    <id>http://mmoreram.github.io/blog/2014/11/25/symfony-walk-ends</id>
    <content type="html"><![CDATA[<p>90Km walked in 3 days. And it&rsquo;s over.</p>

<p>I&rsquo;ve been walking through amazing and gorgeous places during the last 3 days. I
had in mind going to Madrid, but I&rsquo;ve had two important problems.</p>

<ul>
<li>My feet. This is one of my problems. My feet. What&rsquo;s wrong with you?!</li>
<li>The next section was 42km, through the mountain and with any place where to
sleep. No hotels, no hostels, no nice people offering her house. It should not
be a problem, but the real problem has one single name. -6 degrees at night. I
cannot expose myself for sleeping on the street with that cold. All next
sections are like that, after 30-40km walking, nowhere to sleep.</li>
</ul>


<p>I feel disappointed with myself. I had so many expectations I could do that, but
I cannot put myself in danger 1 week before one of my most important moments on
my entirely professional life, to be a speaker in the SymfonyCon, in Madrid. My
fault.</p>

<p>But things happen. And what I wanted to demonstrate to myself is that I can do
that. Yes, sure, with more or less preparation&hellip; but I can do that. Because the
most difficult part of this things is trying them. And then, once tried, you can
fail. Lot of times. You will fail. Even if you don&rsquo;t expect that, you will fail.
But failing is just the beginning of success.</p>

<p>I will stay here, in the middle of nothing, since the SymfonyCon starts. Resting
and enjoying something different than Barcelona. The real world.</p>

<p>I want to thank all the people around the world that has encouraged me on this
event. I&rsquo;ll try again soon. Once and again till I achieve my goal. And once
achieved, I will go on with another goal. Because this is life, my friends, goal
after goal.</p>

<p>Looking forward to see you all in Madrid, this is going to be a great great
event.</p>

<p>PD: Ryan, my friend, I will also take a plane XD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SymfonyWalk - Sleeping bag]]></title>
    <link href="http://mmoreram.github.io/blog/2014/11/07/symfonywalk-sleeping-bag/"/>
    <updated>2014-11-07T18:51:00+01:00</updated>
    <id>http://mmoreram.github.io/blog/2014/11/07/symfonywalk-sleeping-bag</id>
    <content type="html"><![CDATA[<p>I expected it would be much easier. Indeed, it should be easier, but once again,
the effort on something is just the beginning of something simply bigger called
&ldquo;The plan&rdquo;.</p>

<p>The problem is that I thought if would be much simple to sleep from Zaragoza to
Madrid.</p>

<p>It is not. Damn!</p>

<p>So this is why I will have to sleep in a sleeping bag 9 days. I don&rsquo;t exactly
know where will I be able to clean myself, or to eat something, or sleep. In
fact this is what OpenSource is. All OpenSource developers are Walkers in a
world without hostels, but nice people.</p>

<p>I expect I will find some contributors around the adventure.</p>

<ul>
<li>Food Pull Requests?</li>
<li>Bed Pull Requests?</li>
<li>Water Pull Requests?</li>
</ul>


<p>7 days to go. I am ready. Am I?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PDD, Pragmatic Driven Development, English version]]></title>
    <link href="http://mmoreram.github.io/blog/2014/10/26/pdd-pragmatic-driven-development-english/"/>
    <updated>2014-10-26T19:51:00+01:00</updated>
    <id>http://mmoreram.github.io/blog/2014/10/26/pdd-pragmatic-driven-development-english</id>
    <content type="html"><![CDATA[<p>This post is just a translation of one of my previous posts, written in Spanish,
for Spaniard people. I just wanted to translate it and to propose my idea to the
entirely world, even knowing not everyone will be agree with my point of view.</p>

<p>You will find the original one <a href="http://mmoreram.com/blog/2014/10/06/pdd/">here</a></p>

<p>There is a trend, in my opinion, extremely annoying about how we should work in
any technical project. We have gone from being a voiceless sector to, for a
while, a small egomaniac movement with categorical thoughts, making some
monothematic readings so boring for the reader, just because these topics
iterated for the umpteenth time with a very theoretical speech, non practical at
all, far from the real life.</p>

<p>And that&rsquo;s what we all need, a great doses of reality. Because reality is
practical, not logical.</p>

<p>From my point of view, and given my small experience, I think this movement has
to be eradicated to make way for a new movement of thought, maybe
circumstantially called PDD, Pragmatic Driven Development (You know&hellip; I can
also be so witty assigning new names and adding some cool tags to my Linkedin
profile&hellip;). And the truth is that I am so tired seeing that some people is
still telling me how I should do my job, what practices should I follow to make
it &ldquo;the right way&rdquo; and what guidelines I should take to not being far from the
real truth.</p>

<p>The real truth does not exist, or at least should not. Every single speech
should have an objective part, based in good practices, but also should have a
subjective part, relative to the real circumstances and taking care about the
needs of the project. So, this is not seemed to be understood by some people.
Seems that, like an outdated political movement, The ego blinds some people to
understand so much certainty (must be that we are too used to being treated like
sheeps&hellip; BeEeEe BeEeEe).</p>

<p>This is why I refuse to listen to such modernistic stupidity without solid
arguments. I refuse to be near this hype, created from this people that don&rsquo;t
have any other way to stand out than selling their unique thought like it was
the entrance of the heaven of wisdom. We have reached an illness point.</p>

<p>I personally always demand my attendees, or just the people that talk with me,
to have an owning point of view, to treat my single one just like another point
of view, even if they feel it is not correct, it is different or even distant
from theirs, and to use it as a starting point of constructive discussion.</p>

<p>Important, I&rsquo;m not telling that I disagree all these techniques, I&rsquo;m not telling
that all this architectural knowledge is not useful, I&rsquo;m not telling that
applying a great methodology is useless&hellip; I strongly think that all of them,
born inside great minds and actually tested with great results, are very useful
and really makes us better as developers, giving us more resources to work and
making us better able to do our job successfully. I have to tell also that since
I am actually practicing lot of them in my projects, like TDD, BDD and DDD, I
feel better and more comfortable. I say thanks for that! What I am actually
saying is that we are developers, not this kind of stupid people without
capacity analysis. At the moment we lose this capacity, we lose our value.</p>

<ul>
<li>Hey, dude! I am actually working on that project! Do you like it?</li>
<li>Well, I expect you are doing Hexagonal Architecture&hellip;</li>
<li>Hmmm&hellip; I don&rsquo;t really need it&hellip;</li>
<li>You don&rsquo;t need it? Sure you do!</li>
<li>In fact, not.</li>
<li>You are wrong!</li>
<li>Ok.</li>
</ul>


<p>It is all about thinking things, and make sure about what we really need at each
point, just ignoring everyone telling you, categorically, the way you need to do
your job.</p>

<p>I truly hope all this pantomime to be ended soon. I hope as well that one day we
will be able to work all together as a community or a team, this is what we
really need, keeping in mind what really matters: learning, teaching and doing
great projects, no matter the framework, the language even the architecture.</p>

<p>Have a really nice week, and enjoy your work :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symfony Walk, the Conference section]]></title>
    <link href="http://mmoreram.github.io/blog/2014/10/15/symfony-walk-symfony-con-section/"/>
    <updated>2014-10-15T11:48:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2014/10/15/symfony-walk-symfony-con-section</id>
    <content type="html"><![CDATA[<p>The day is getting closer. I am really exited about the idea of the <a href="http://mmoreram.com/blog/2014/08/07/symfony-walk-zaragoza-madrid/">Symfony Walk</a>.</p>

<p>As you may know, the walk will consists in 12 days (10 walking, 2 resting, 1
resting day added as announced for my health), from Zaragoza to Madrid, so today
I want to announce formally the last section of the Walk, dedicated to the
people in the conference and to the entirely Symfony Community.</p>

<p>I want to open source the last part of my experience. I&rsquo;d like everyone excited
with the idea to walk beside me for the last 38km.</p>

<p>That&rsquo;s the plan:</p>

<p><img src="http://mmoreram.github.io/images/zaragoza-madrid-last-section.png" title="[Zaragoza Madrid Last Section [Zaragoza Madrid Las Section]]" ></p>

<ul>
<li>From &ndash; 26 Nov at 10.00 &ndash; <a href="https://www.google.es/maps/place/Hotel+Azuqueca/@40.574603,-3.260397,17z/data=!3m1!4b1!4m2!3m1!1s0xd424d58faf1da8d:0x4d83f8902082a9e8?hl=ca">Hotel Azuqueca, Azuqueca de Henares, Guadalajara</a></li>
<li>To &ndash; 26 November at 19.00 &ndash; <a href="https://www.google.es/maps/search/hotel+auditorium/@40.448706,-3.5586655,17z/data=!3m2!4b1!5s0xd4230487e9da459:0xa7e56b7dca610362?hl=ca">Hotel Auditorium, Madrid</a></li>
<li>Good shoes, important!</li>
<li>We could talk about symfony stuff and some interesting topics.</li>
</ul>


<p>Excited about that? Good! Once in Madrid, a cold beer will be our best friend&hellip;
ever!</p>

<p>Let me know if you want to join us through the
<a href="https://www.eventbrite.com/e/symfony-walk-symfonycon-section-tickets-13728858385">Eventbrite event</a>,
so we can organize based on the total number of people. You can also contact me
through my email, <a href="&#109;&#97;&#105;&#108;&#116;&#111;&#x3a;&#x79;&#x75;&#104;&#117;&#x40;&#x6d;&#109;&#111;&#114;&#x65;&#x72;&#x61;&#x6d;&#x2e;&#99;&#x6f;&#109;&#46;">&#121;&#117;&#104;&#x75;&#x40;&#x6d;&#109;&#x6f;&#x72;&#101;&#x72;&#x61;&#109;&#46;&#99;&#111;&#x6d;&#46;</a></p>

<p>Looking forward to meet you there, it is going to be amazing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PDD, Pragmatic Driven Development]]></title>
    <link href="http://mmoreram.github.io/blog/2014/10/06/pdd/"/>
    <updated>2014-10-06T12:00:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2014/10/06/pdd</id>
    <content type="html"><![CDATA[<p>Hay una tendencia, a mi parecer, extremadamente molesta sobre como se tiene que
trabajar en cualquier proyecto técnico. Hemos pasado de ser un sector con poca
voz, a ser, desde hace un tiempo, un pequeño movimiento ególatra de pensamientos
categóricos que hacen que según qué lecturas monotemáticas aburran al lector con
tópicos iterados por enésima vez y con un discurso teórico, nada práctico, muy
lejos de la realidad.</p>

<p>Y esto es lo que necesitamos, una buena dosis de realidad. Porque la realidad es
práctica, no teórica.</p>

<p>Desde mi punto de vista, y según la lectura que puedo tener según mi pequeña
experiencia, creo que este movimiento debe terminar para dar paso a lo que
circunstancialmente podría referirme como PDD, Pragmatic Driven Development
(Siguiendo con las directrices&hellip; yo también puedo ser muy molón con nombres que
quedan de lujo en mi currículum). Y es que estoy cansado de ver como la gente me
dice como tengo que enfocar mi proyecto, que prácticas debo seguir para hacerlo
&ldquo;bien&rdquo; y que directrices debo tomar para no estar lejos de la verdad absoluta.</p>

<p>La verdad absoluta no existe, o no debería existir. Cualquier discurso debería
tener una parte objetiva, basado en las buenas prácticas, pero también debería
tener una parte subjetiva, relativa a las circunstancias reales y propias del
proyecto. Pues parece ser que no se entiende. Parece ser que, y como si un
movimiento político desfasado y arcaico se tratara, el Ego ciega demasiado como
para poder entender tanta obviedad junta (será lo acostumbrados que nos tienen
a ser tratados como borregos).</p>

<p>Es por esto que personalmente me niego a escuchar más estupidez modernista sin
argumentos sólidos. Me niego a ser víctima de <em>hype</em> por parte de personas que no
tienen más formas de destacar que vender su pensamiento único como si de la
entrada al cielo de la sabiduría se tratara. Hemos llegado a un punto enfermizo.</p>

<p>Personalmente siempre exijo que la gente que me escucha tenga un pensamiento
propio, que trate mi opinión como otro punto de vista, aunque sea incorrecto,
distinto o distante, y que sirva como punto de soporte para dar aún más robustez
al argumento que pueda darle uno a un tema específico, dado un punto de partida
y un objetivo final.</p>

<p><strong>Que conste, no digo que las buenas prácticas no importen, no digo que tener
conocimientos sobre arquitectura no importe, no digo que aplicar una buena
metodología no importe&hellip;</strong> Creo que todas estas prácticas nacidas en grandes
mentes y probadas con grandes resultados son herramientas que nos hace mejores,
con más recursos y más capaces de trabajar problemas de forma satisfactoria.
Debo añadir que soy practicante de muchas de ellas en el punto en que las
necesito, y doy gracias a ello. Me hace mejor profesional. Lo que digo es que
somos desarrolladores, no gente estúpida sin capacidad de análisis. En el
momento que perdemos este análisis, perdemos completamente nuestro valor.</p>

<ul>
<li>Estoy haciendo este proyecto, ¿te gusta?</li>
<li>Espero que lo estés haciendo con Arquitectura Hexagonal&hellip;</li>
<li>Pues la verdad es que no la necesito&hellip;</li>
<li>¿Que no la necesitas? ¡Claro que la necesitas!</li>
<li>Pues no, en este caso no los necesito&hellip;</li>
<li>Lo estás haciendo mal.</li>
</ul>


<p>Se trata de pensar las cosas, y decidir por uno mismo qué necesitas en cada
momento, sin dejar que nadie, absolutamente nadie, te diga de forma categórica
como debes hacer su trabajo.</p>

<p>Espero de verdad que toda esta borrachera se acabe pronto, espero que en un
futuro empiece a haber comportamientos un poco más profesionales para trabajar
todos como un equipo o comunidad, que es lo que necesitamos, teniendo en cuenta
las cosas que verdaderamente importan: aprender y hacer buenos proyectos, no
importa el Framework, el lenguaje o la arquitectura.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extractor, a PHP Library for compressed packages]]></title>
    <link href="http://mmoreram.github.io/blog/2014/09/13/extractor/"/>
    <updated>2014-09-13T00:00:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2014/09/13/extractor</id>
    <content type="html"><![CDATA[<p>Extractor is a simple php library for extracting all files from compressed
packages. Available formats are</p>

<ul>
<li>zip</li>
<li>Rar</li>
<li>Phar</li>
<li>Tar</li>
<li>Gz</li>
<li>Bz2</li>
</ul>


<p>You can find the source in the
<a href="https://github.com/mmoreram/extractor">Github repository</a>.</p>

<p>Extractor uses the Finder Symfony component, so the result of extracting all
compressed files given a package is nothing more than a Finder instance ready
to be iterated and configured.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Finder\Finder</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\Extractor\Filesystem\TemporaryDirectory</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\Extractor\Resolver\ExtensionResolver</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\Extractor\Extractor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$temporaryDirectory</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TemporaryDirectory</span><span class="p">();</span>
</span><span class='line'><span class="nv">$extensionResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ExtensionResolver</span><span class="p">();</span>
</span><span class='line'><span class="nv">$extractor</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Extractor</span><span class="p">(</span>
</span><span class='line'>    <span class="nv">$temporaryDirectory</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">$extensionResolver</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * @var Finder $files</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="nv">$files</span> <span class="o">=</span> <span class="nv">$extractor</span><span class="o">-&gt;</span><span class="na">extractFromFile</span><span class="p">(</span><span class="s1">&#39;/tmp/myfile.rar&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$files</span> <span class="k">as</span> <span class="nv">$file</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$file</span><span class="o">-&gt;</span><span class="na">getRealpath</span><span class="p">()</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can use the temporary folder of your Filesystem using a <code>TemporaryDirectory</code>
instance or you can use a <code>SpecificDirectory</code> instance if you want to specify
where all files should be extracted.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\Extractor\Filesystem\SpecificDirectory</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\Extractor\Resolver\ExtensionResolver</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\Extractor\Extractor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$specificDirectory</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SpecificDirectory</span><span class="p">(</span><span class="s1">&#39;/my/specific/path&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$extensionResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ExtensionResolver</span><span class="p">();</span>
</span><span class='line'><span class="nv">$extractor</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Extractor</span><span class="p">(</span>
</span><span class='line'>    <span class="nv">$specificDirectory</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">$extensionResolver</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also work with remote files.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Finder\Finder</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\Extractor\Filesystem\TemporaryDirectory</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\Extractor\Resolver\ExtensionResolver</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\Extractor\Extractor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$specificDirectory</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TemporaryDirectory</span><span class="p">();</span>
</span><span class='line'><span class="nv">$extensionResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ExtensionResolver</span><span class="p">();</span>
</span><span class='line'><span class="nv">$extractor</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Extractor</span><span class="p">(</span>
</span><span class='line'>    <span class="nv">$specificDirectory</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">$extensionResolver</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * @var Finder $files</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="nv">$files</span> <span class="o">=</span> <span class="nv">$extractor</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">extractFromFile</span><span class="p">(</span><span class="s1">&#39;http://host.com/my-compressed-file.zip&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bye Bye Symfony]]></title>
    <link href="http://mmoreram.github.io/blog/2014/09/01/bye-bye-symfony/"/>
    <updated>2014-09-01T00:00:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2014/09/01/bye-bye-symfony</id>
    <content type="html"><![CDATA[<p>Don&rsquo;t be afraid. You know what I think about the Symfony components and how I
love them. Until now any circumstance has changed my mind about using them in my
projects, and over the time, after discover every hidden single piece of code, I
have turned more amazed of their power.</p>

<p>The reason of this post is just to tell you, with a simple example, how to say
<em>Bye Bye, Symfony!</em> and say <em>Hi PHP!</em>. This really means uncouple from Symfony
Components and still use them as the default implementation, while we can
securely remove, from the composer <em>require</em> block, our Symfony dependencies.</p>

<p>One of the poor things I have heard these last months has been the word <em>you must</em>
or <em>you should</em> event without knowing exactly what is the real direction of my
project, so every word in this post will be just an idea you could have in mind
when you design your own architecture, thinking about your real needs, far from
the things you should or you must do.</p>

<p>To explain that, how we can say goodbye to Symfony, we will start with a simple
example. A simple class we could find in every project. Our class will have no
sense but will be useful in our specific example, helping us to understand what
is all this about.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * For the full copyright and license information, please view the LICENSE</span>
</span><span class='line'><span class="sd"> * file that was distributed with this source code.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * Feel free to edit as you please, and have fun.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @author Marc Morera &lt;yuhu@mmoreram.com&gt;</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Package\Generator</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Routing\Generator\UrlGeneratorInterface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Class UrlPrinter</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UrlPrinter</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var UrlGeneratorInterface</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Url generator</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$urlGenerator</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Construct method</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param UrlGeneratorInterface $urlGenerator Url generator</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">UrlGeneratorInterface</span> <span class="nv">$urlGenerator</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">urlGenerator</span> <span class="o">=</span> <span class="nv">$urlGenerator</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Generates Homepage route and print complete path</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return string Route path</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">printHomePageRoute</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">urlGenerator</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">generate</span><span class="p">(</span><span class="s1">&#39;homepage&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we can see, use this class means use <code>UrlGeneratorInterface</code>. This class is
part of the Symfony Routing Component, so is a really bad idea if you really
want to make your project multi-environment</p>

<p>Is that good? Well, it depends on your both product requirements and technical
requirements. If you want to use always the Symfony router component, this piece
of code is good enough. Otherwise, If you want to use another router, you have a
problem.</p>

<p>Say your project must work with and without Symfony. Our class should not depend
on this interface. One of the strategies to uncouple external implementations is
using ports and adapters.</p>

<p>I will explain how it works and how we can implement it.</p>

<h2>Real life example</h2>

<p>Let&rsquo;s imagine we want to sell an USB device. We have decided in our product
definition that this device will connect to external devices using USB Standard
A (the big one). One of the possible approaches would be to design our device
with the external connector coupled. This means selling it with the USB wire
(like an USB camera, for example).</p>

<p>But why coupling our device with an specific output? Do you know what it really
means?</p>

<ul>
<li>If the wire breaks, we must change all the device.</li>
<li>You can connect with devices that accept only USB-A</li>
<li>Wire improvements means new device versions.</li>
</ul>


<p>What would be an alternative decision? Well, why don&rsquo;t we focus our efforts in
the camera and we just let other companies to help us with the wire? This means
more flexibility for the final user and capability of removing and changing the
cable when is broken. And&hellip; they could connect their camera to many different
formats, even for the most adventurous, their own formats.</p>

<p>So, in fact, our device should have one female USB port with an specification
of how connect it with another device. The wire would be just an adapter of our
device so many of them could be plugged-in.</p>

<p>We have talked about devices, ports, adapters, specifications, but&hellip; how can
this help me with my project? Is that hard?</p>

<p>The answer is No.</p>

<h2>Solution</h2>

<p>Our goal is to create an specification for URL generators and force each adapter
to implement it in their own way. As we know, the OOP languages resolve the
specification with the interfaces.</p>

<p>Let&rsquo;s create our specification.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * For the full copyright and license information, please view the LICENSE</span>
</span><span class='line'><span class="sd"> * file that was distributed with this source code.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * Feel free to edit as you please, and have fun.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @author Marc Morera &lt;yuhu@mmoreram.com&gt;</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Package\Specification</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Interface PackageUrlGeneratorInterface</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">interface</span> <span class="nx">PackageUrlGeneratorInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Generates a route given its name.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return string Route path</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">generateUrl</span><span class="p">(</span><span class="nv">$routeName</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We are just specifying. We want that, whatever is the implementation, each
adapter must fulfill this rule: Has a method called <code>generateRoute</code> that, given
the route name, will return its complete path.</p>

<p>Let&rsquo;s adapt our UrlPrinter to work with specification instead of implementation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * For the full copyright and license information, please view the LICENSE</span>
</span><span class='line'><span class="sd"> * file that was distributed with this source code.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * Feel free to edit as you please, and have fun.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @author Marc Morera &lt;yuhu@mmoreram.com&gt;</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Package\Generator</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Package\Specification\PackageUrlGeneratorInterface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Class UrlPrinter</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UrlPrinter</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var PackageUrlGeneratorInterface</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Url generator</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$urlGenerator</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Construct method</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param UrlGeneratorInterface $urlGenerator Url generator</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">PackageUrlGeneratorInterface</span> <span class="nv">$urlGenerator</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">urlGenerator</span> <span class="o">=</span> <span class="nv">$urlGenerator</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Generates Homepage route and print complete path</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return string Route path</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">printHomePageRoute</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">urlGenerator</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">generateUrl</span><span class="p">(</span><span class="s1">&#39;homepage&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, our UrlPrinter does not depends on any external library. Goal reached!</p>

<p>But, now what? I mean, we should implement our adapter, am I right? What is a
camera with a great specification and without wire plugged in? (A wireless
camera, welcome to the twenty century ^^. Just joking)</p>

<p>Our UrlPrinter needs a <em>PackageUrlGeneratorInterface</em> implementation to be
built, so we have to implement an adapter. And because we still want to work with
Symfony Routing Component as my first option, we will create the Symfony Adapter
for my specification.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * For the full copyright and license information, please view the LICENSE</span>
</span><span class='line'><span class="sd"> * file that was distributed with this source code.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * Feel free to edit as you please, and have fun.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @author Marc Morera &lt;yuhu@mmoreram.com&gt;</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Package\Adapter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Package\Specification\PackageUrlGeneratorInterface</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Routing\Generator\UrlGeneratorInterface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Class SymfonyUrlGeneratorAdapter</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">SymfonyUrlGeneratorAdapter</span> <span class="k">implements</span> <span class="nx">PackageUrlGeneratorInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var UrlGeneratorInterface</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Url generator</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$urlGenerator</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Construct method</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param UrlGeneratorInterface $urlGenerator Url generator</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">UrlGeneratorInterface</span> <span class="nv">$urlGenerator</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">urlGenerator</span> <span class="o">=</span> <span class="nv">$urlGenerator</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Generates a route given its name</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return string Route path</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">generateUrl</span><span class="p">(</span><span class="nv">$routeName</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">urlGenerator</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">generate</span><span class="p">(</span><span class="nv">$routeName</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This an adapter, my friends. Each adapter has one mission, and is just transform
the way we understand the method <code>generateUrl</code> must work (specification) to the
way each external project understands it (implementation). In this case, very
easy, our <code>generateUrl</code> is the same as Symfony Router Component&rsquo;s <code>generate</code>.</p>

<p>Symfony Component is now required by this adapter, but because we are not
required to use this adapter (Maybe we can use a dummy one for our tests, or a
mocked one), Symfony Component is not required by our package anymore, just
suggested.</p>

<p>Let&rsquo;s see another Adapter implementation, requiring another external library.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * For the full copyright and license information, please view the LICENSE</span>
</span><span class='line'><span class="sd"> * file that was distributed with this source code.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * Feel free to edit as you please, and have fun.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @author Marc Morera &lt;yuhu@mmoreram.com&gt;</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Package\Adapter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Package\Specification\PackageUrlGeneratorInterface</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">AnotherProject\UrlGeneratorInterface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Class SymfonyUrlGeneratorAdapter</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">SymfonyUrlGeneratorAdapter</span> <span class="k">implements</span> <span class="nx">PackageUrlGeneratorInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var UrlGeneratorInterface</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Url generator</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$urlGenerator</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Construct method</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param UrlGeneratorInterface $urlGenerator Url generator</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">UrlGeneratorInterface</span> <span class="nv">$urlGenerator</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">urlGenerator</span> <span class="o">=</span> <span class="nv">$urlGenerator</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Generates a route given its name</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return string Route path</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">generateUrl</span><span class="p">(</span><span class="nv">$routeName</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$routeName</span> <span class="o">=</span> <span class="s1">&#39;_&#39;</span> <span class="o">.</span> <span class="nv">$routeName</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">urlGenerator</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">anotherGenerateMethod</span><span class="p">(</span><span class="nv">$routeName</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both adapters would be placed in the <code>Adapter/</code> folder, and the final user
should be able to switch them and even implement new ones.</p>

<h2>From require to suggest</h2>

<p>With our changes, we can remove &ldquo;symfony/routing&rdquo; from the require block and add
it into the suggest block in <code>composer.json</code> file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="s">&quot;require&quot;</span><span class="p-Indicator">:</span> <span class="p-Indicator">{</span>
</span><span class='line'>    <span class="s">&quot;php&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;&gt;=5.4&quot;</span><span class="p-Indicator">,</span>
</span><span class='line'>    <span class="nv">...</span>
</span><span class='line'><span class="p-Indicator">}</span><span class="err">,</span>
</span><span class='line'><span class="s">&quot;suggest&quot;</span><span class="p-Indicator">:</span> <span class="p-Indicator">{</span>
</span><span class='line'>    <span class="s">&quot;symfony/routing&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;Required</span><span class="nv"> </span><span class="s">if</span><span class="nv"> </span><span class="s">using</span><span class="nv"> </span><span class="s">Routing</span><span class="nv"> </span><span class="s">adapter&quot;</span><span class="p-Indicator">,</span>
</span><span class='line'>    <span class="s">&quot;mmoreram/another-project&quot;</span><span class="p-Indicator">:</span> <span class="nv">Required if using AnotherProject Routing adapter&quot;</span>
</span><span class='line'><span class="p-Indicator">}</span><span class="err">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>We will only require the packages needed by the adapter we are using.</p>

<h2>What we win</h2>

<p>Much. We win maximum implementation flexibility and minimum coupling. Would be
wise to say that a PHP project should tend to this thought, but once again, it
depends on many factors.</p>

<h2>What we lose</h2>

<p>It Depends. If you want your project to be understandable by a lot of developing
knowledge levels, this architecture goes away from the comprehensibility of a
simple code. You also can lose by having lot of files, so you should respect
some kind of best practices code, to make people working on your project
comfortable dealing with it.</p>

<h2>Best practices</h2>

<p>I should talk about <em>Marc practices</em> instead of <em>Best practices</em>. I am used to
adding my adapters always in the folder <code>/Adapter/{PortName}/</code>, being <em>PortName</em>
the name of the port we are dealing with in camel case format. In this case, we
should add both adapters in <code>/Adapter/UrlGenerator/</code>.</p>

<p>Given this format we can determine what adapters we can use in our project in a
very agile way.</p>

<h2>Reference projects</h2>

<p>First project that comes in my mind when I think about Ports/Adapters is
<a href="https://github.com/KnpLabs/Gaufrette/tree/master/src/Gaufrette">Gaufrette</a>, a
filesystem abstraction layer with a lot of adapters implemented.</p>

<p>In <a href="https://github.com/elcodi/elcodi">Elcodi</a> we are actually using this
library and its really awesome how easy is using it.</p>

<p>We have also implemented internally some features using this architecture, for
example, the <a href="https://github.com/elcodi/elcodi/tree/master/src/Elcodi/Component/Geo/Adapter/Populator">Geo Schema Populator</a>,
a new feature under development that will allow you to populate all Geo schema
using some adapters. Right now only GeoData adapter is implemented.</p>

<p>Another example, the
<a href="https://github.com/elcodi/elcodi/tree/master/src/Elcodi/Component/Currency/Adapter/CurrencyExchangeRatesProvider">Currency Exchange Rates Populator</a>
with OpenExchangeRates implementation already done.</p>

<h2>Final thoughts</h2>

<p>Using ports and adapters is really a great tool for those who want to uncouple
from implementations and a great pattern if you develop open source. Open source
should satisfy as people as possible, so remember, specify and then implement.</p>

<p>Try it and then tell us your experience :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One section, one component]]></title>
    <link href="http://mmoreram.github.io/blog/2014/08/12/one-section-one-component/"/>
    <updated>2014-08-12T11:29:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2014/08/12/one-section-one-component</id>
    <content type="html"><![CDATA[<p><a href="http://mmoreram.github.io/blog/2014/08/07/symfony-walk-zaragoza-madrid/">Symfony Walk</a></p>

<p><img class="[class names]" src="http://mmoreram.github.io/images/zaragoza-madrid.png" title="[Zaragoza Madrid [Zaragoza Madrid]]" ></p>

<p>Symfony Walk will contain a total of 10 sections, and each one will have the
name of one Symfony Component. One of the sections will be named <em>Doctrine</em> (yes,
our big friend Doctrine) and last Component will be named like the project I am
so proud to work in, <a href="http://elcodi.io">Elcodi</a>.</p>

<ul>
<li><a href="http://symfony.com/doc/current/components/routing/index.html">Routing</a> Section</li>
<li><a href="http://symfony.com/doc/current/components/security/index.html">Security</a> Section</li>
<li><a href="http://symfony.com/doc/current/components/console/index.html">Console</a> Section</li>
<li><a href="http://symfony.com/doc/current/components/finder.html">Finder</a> Section</li>
<li><a href="http://doctrine-orm.readthedocs.org/en/latest/">Doctrine</a> Section</li>
<li><a href="http://symfony.com/doc/current/components/event_dispatcher/index.html">EventDispatcher</a> Section</li>
<li><a href="http://symfony.com/doc/current/components/http_kernel/index.html">HttpKernel</a> Section</li>
<li><a href="http://symfony.com/doc/current/components/form/index.html">Form</a> Section</li>
<li><a href="http://symfony.com/doc/current/components/dependency_injection/index.html">DependencyInjection</a> Section</li>
<li><a href="http://elcodi.io">Elcodi</a> Section</li>
</ul>


<p>Each day, after walking around 35 Km in about 6 hours, I will post a small
introduction about the component that names the current section. I&rsquo;ll talk also
about some scenarios that this component can be useful.</p>

<p>Happy Symfony Walk.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symfony Walk: Zaragoza - Madrid]]></title>
    <link href="http://mmoreram.github.io/blog/2014/08/07/symfony-walk-zaragoza-madrid/"/>
    <updated>2014-08-07T13:49:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2014/08/07/symfony-walk-zaragoza-madrid</id>
    <content type="html"><![CDATA[<p>The 2014 Madrid SymfonyCon is closer every day, and I have to admit that
I admire this community. A community that has been able to feed the php world
with valuable projects and better people.</p>

<p>I admire the synergies that are created in different repositories that make
Symfony one of the best options when developing any
web project, and the entire ecosystem that has been created around, an ecosystem
very healthy and social.</p>

<p>That&rsquo;s why I&rsquo;ll pay my own tribute the coming months.</p>

<h3>Symfony Walk 2014</h3>

<p>The goal is to walk a path to SymfonyCon Madrid with no more tools than a
backpack and good music. The principle of such route will be Zaragoza, so the
road will be a total of about 360 kilometers.</p>

<p>I will divide the challenge in 10 days plus one resting day. During the next few
days I will also define the final route and all resting points, where I will
spend nights.</p>

<p>My reasons are none other than a mixture of personal challenge of something I&rsquo;ve
wanted to do for a long time and my gratitude to this community for all
help I&rsquo;ve received indirectly.</p>

<p>As you know I work on a project called [Elcodi] (<a href="http://elcodi.io">http://elcodi.io</a>). we have
very clear which is our philosophy and the details that we care until the
last sighs of the project, and we know it&rsquo;s not easy.</p>

<p>We have overcome challenges as an <em>open source</em> project , we are overcoming
challenges as an <em>open source</em> project, and hopefully over the next few years we
should overcome greater challenges as <em>open source</em> project .</p>

<p>Well, I think the act of walking for 70 hours in 10 days is a good
representation of what needs hard work, effort and time, but finally, in the
bottom of the road, a great reward awaits your arrival.</p>

<p>In my case, the conference .</p>

<p>I&rsquo;ll post more details about my little adventure soon.</p>
]]></content>
  </entry>
  
</feed>
