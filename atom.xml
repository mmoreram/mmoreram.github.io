<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Because yes]]></title>
  <link href="http://mmoreram.com/atom.xml" rel="self"/>
  <link href="http://mmoreram.com/"/>
  <updated>2017-02-04T14:13:10+01:00</updated>
  <id>http://mmoreram.com/</id>
  <author>
    <name><![CDATA[Marc Morera]]></name>
    <email><![CDATA[yuhu@mmoreram.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[El peligro de hablar español en Catalunya]]></title>
    <link href="http://mmoreram.com/blog/2017/02/04/el-peligro-de-hablar-espanol-en-catalunya/"/>
    <updated>2017-02-04T12:24:00+01:00</updated>
    <id>http://mmoreram.com/blog/2017/02/04/el-peligro-de-hablar-espanol-en-catalunya</id>
    <content type="html"><![CDATA[<p>Odiado español.</p>

<p>Es muy posible que tras el
<a href="https://twitter.com/rosadiezglez/status/827236546491273216">sensacionalista Tweet</a>
de Rosa Díez, una mujer profundamente admirada y seguida por todo el pueblo
español, te hayas quedado con ganas de más. Recordemos que la señora Díez
reaccionaba de una forma muy natural en las redes sociales tras leer un artículo
de un medio de comunicación titulado &ldquo;El peligro de hablar en español en Estados
Unidos&rdquo;.</p>

<p>Para los que aún desconocéis dichos hechos, decir que ella pedía a gritos un
artículo semejante en relación con la persecución que sufre la gente en
Catalunya por hablar en español. Sí, has leído bien. Catalunya, Español,
Persecución.</p>

<p>Pues bien, les comentaré durante unas cuantas líneas de qué trata esta
persecución, cuales son algunos de los casos más delirantes ocurridos en estas
tierras colonizadas por los catalano-parlantes y les daré algunos consejos para
aquellos que decidan que Catalunya pueda ser un objetivo para su próximo safari
en vacaciones.</p>

<p>Agárrense bien al sillón, valientes curiosos, porque todo lo que lea a
continuación puede ser motivo de pérdida de conocimiento para pequeños y
mayores, y objeto de traumas perpetuos para los más sensibles.</p>

<p>Empiezo.</p>

<h3>Antiguamente</h3>

<p>Una vez conocí una persona llamada Juan. Juan era de familia emigrante durante
la época de la transición, y tras partir con sus padres de un pueblecillo
pequeño en el norte de Extremadura, llegaron a tierras inhóspitas en el extra
radio de Barcelona.</p>

<p>Por aquel entonces, la llamada ciudad de Badalona era el centro cultural de
Catalunya. Todo el mundo hablaba catalán antiguo, forjado en las oscuras cuevas
de los pueblos unidos del norte, y cualquier humano andante con habladurías que
no fueran en el idioma ario era objeto de persecución, dilapidación y extorsión
por parte de los integrantes de aquella cultura pseudoradical.</p>

<p>Todo cuanto Juan y su familia conoció en tierras lejanas fue miedo y soledad, y
aunque sus pensamientos permanecían permanentemente en su amado pueblo, ya
dejado atrás, su futuro les llamaba susurrante y provocador.</p>

<p><em>&ldquo;Veniu, estimats conciutadans. Integreu-vos i parleu en català&rdquo;</em></p>

<p><strong>Venid, amados ciudadanos. Integraos y hablad en catalán</strong>, les decía el
destino, amparado con el fino velo del desprecio hacia aquellos pobres humanos
diferentes y extraños. Ellos, asustados por aquella voz incomprensible de
palabras hechizadas, decidieron taparse los oídos por el miedo a volverse locos
y dementes. ¿Hasta cuándo podrían soportar esta situación? ¿Qué les deparaba la
vida?</p>

<p>Juan y su familia se desvanecieron en su oscura morada de Badalona, y sus
cuerpos yacieron escondidos e inevitablemente ignorados, como todo aquel
inconsciente que se atrevió a cruzar poniente sin hablar la lengua envenenada
del mismísimo señor de las tiniebles.</p>

<p>Lo recuerdo con cariño, y es que fueron buenos tiempos.</p>

<h3>Actualmente</h3>

<p>Esta bien podría ser una noticia de &ldquo;el país&rdquo;, y a usted, querido lector, no le
extrañaría demasiado descubrir una vez más que, en Catalunya, los seres
vivientes somos malvados con aquellos con los que diferimos en raza, lengua e
identidad.</p>

<p>Yo soy ciudadano de Badalona.</p>

<p>Hoy en día aún puedo oler el olor podrido de los cuerpos de aquellos que
perecieron en sus casas por miedo al rechazo de los catalanes de antaño. Y es
que antes era distinto. La gente proveniente de tierras lejanas era
inevitablemente valiente y no se doblegaba ante la inexistente tolerancia de los
indígenas locales. Se escondían y hablaban en silencio, en la oscuridad de las
velas, vigilantes. Ahora todo ha cambiado. Ahora no ofrecemos ningún tipo de
opción a los que se atreven a profanar nuestras ciudades y pueblos. Ahora uno ya
no puede escapar de nuestras garras perturbadoras, y todo el mundo es llamado a
la obediencia incondicional.</p>

<p>Ahora todo el mundo <strong>debe</strong> hablar catalán, y no hay sitio donde esconderse.
No lo hay.</p>

<p>Y lo digo con orgullo, nos sentimos poderosos y extremadamente superiores. Cada
palabra pronunciada de forma incorrecta nos repugna y castigamos aquellos que
desobedecen nuestra voluntad.</p>

<p>Y tu, nos deberías temer. Odiar. Admirar.</p>

<h3>Algunos Consejos</h3>

<p>Nuestros líderes, a modo de muestra de entendimiento con los pueblos
hispano-parlantes, han acordado con el estado Español unas visitas guiadas por
nuestras tierras. Algo parecido a un safari por tierras africanas, pero en lugar
de leones, tenemos a abuelos de Girona con barretina, en lugar de cebras,
castellers haciendo un 3 de 10 con forro y manilla y en lugar de ñus, tenemos a
chavales rapeando el diccionario de Pompeu Fabra con rimas asonantes.</p>

<p>Algunos consejos para los valiente que quieran visitar nuestra cultura.</p>

<ul>
<li>Recuerda, hablad bajito. Somos radicales y intolerantes por lo que toda
muestra de cultura que no sea la nuestra será despreciada, golpeada y
exterminada de forma instantánea.</li>
<li>Tal vez veas en algún momento una caja encima de una mesa, con una raja en su
parte superior y gente haciendo cola tras ella. Te informamos que la gente está
injuriando y profanando nuestros más sagrados principios constitucionales. Te
invitamos a que les lances piedras y nos avises. Nosotros procederemos a precintar
el recinto y a juzgar a los organizadores. Recuerda que somos <strong>MUY</strong> radicales.</li>
<li>Hay unas montañas llamadas Montserrat. Son sagradas y alguien que no conoce
nuestro idioma no puede acercarse a menos de 50km. Solo se puede acceder andando
y en los alrededores hay perros husmeando en busca de infieles. No tenemos
piedad alguna.</li>
<li>Una vez al año salimos con nuestras banderas y canciones a hacer apología al
terrorismo. Tiendas y contenedores son quemados por familias enteras, mientras
los más pequeños son entrenados para la <em>kale borroka</em> (palabras prestadas por
nuestros hermanos, el pueblo en las montañas, los Vascos).</li>
<li>Si véis a alguien que dice &ldquo;Goita&rdquo;, salid corriendo. Es posible que sea uno de
nuestros pueblerinos. Se conoce que son los más radicales, suelen ir con una hoz
en plan Muerte, y se toman la justícia y la venganza por cuenta propia.</li>
<li>No estéis en nuestras tierras más de 3 o 4 dias, o podríais acostumbraros, y
esto es algo que ni vosotros ni nosotros queremos.</li>
<li>Los niños son entrenados en las escuelas para no entender el castellano, por
lo que no les habléis, o podrían reaccionar muy violentamente.</li>
</ul>


<p>Para que luego digáis que no les avisamos alto y claro&hellip;
A usted, estimada Rosa Díaz, gracias por dar conciencia a sus ciudadanos. Su
trabajo nos ayuda a todos a estar alerta de nuestra realidad, a que la gente que
la lee nos odie más, y con razones, y en resúmen, no hace más que contribuir a
la construcción de una sociedad con criterio, recursos y conscientes de su
propia realidad.</p>

<p>Desde mi más profundo odio de catalán, gracias.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BLDD, un DD para dominarlos a todos]]></title>
    <link href="http://mmoreram.com/blog/2017/01/26/bldd-un-dd-para-dominarlos-a-todos/"/>
    <updated>2017-01-26T19:54:00+01:00</updated>
    <id>http://mmoreram.com/blog/2017/01/26/bldd-un-dd-para-dominarlos-a-todos</id>
    <content type="html"><![CDATA[<p><strong>BullshitLess Driven Development</strong></p>

<p>Esta es una carta para tí, pequeño saltamontes programador, que ayer descubriste
que un <em>if</em> es una instrucción muy molona que hace que puedas ejecutar un
pequeño trozo de código según una condición predeterminada, y que mañana
descubrirás muy probablemente qué es una función recursiva, qué es un objeto
y que Singleton es un patrón de diseño, o al menos esto dicen por allí&hellip;</p>

<p>Esta es una carta para tí, para que te acuerdes de ella en los momentos duros de
tu vida como programador y para que busques un punto de partida en esta
maravillosa corriente profesional, llena de letras verdes fosforito con
significado de victoria, de horas extras impagadas y desagradecidas y de bugs
indescifrables, más escondidos que la dignidad de los votantes del PP.</p>

<p>Sonríele a la vida, afortunado. Alabado sea tu futuro!</p>

<p>Y es que hoy, aquí, te quiero contar algunas situaciones que seguramente, tarde
o temprano, y más temprano que tarde, vivirás en alguna de tus futuras hazañas.
En estas situaciones hay monstruos, trampas mortales y hasta armas letales. Hay
religiones inconexas, dobles morales y lo peor de todo, gilipolleces como para
alimentar a medio Congo y sobrar para una cena de navidad donde toda Sierra
Leona esté invitada. Barra libre de Moët incluida.</p>

<p>Empecemos con algunas frasecillas del gremio&hellip;</p>

<h3>Esto está mal</h3>

<p>Si amigo.</p>

<p>Aunque no lo creas, todo cuanto hagas en tu vida será una verdadera mierda para
algunos. Da igual que lleves un día programando, o que tengas la muchas veces
inevitable presión de aquellos que te pagan el sueldo, o simplemente que no lo
sepas hacer mejor. No importa. Hagas lo que hagas, apestará a perro agusanado.</p>

<p>Y posiblemente lo esté. Posiblemente tu creación será pobre y con muchos fallos,
pero tenemos la suerte de que rodeados como estamos rodeados de almas
constructivas y caritativas, muy pocas veces un <em>&ldquo;Está mal&rdquo;</em> vendrá acompañado
de un <em>&ldquo;Si quieres me siento a tu lado y miramos como puede estar mejor&rdquo;</em>.</p>

<p>No te ofusques, no estás solo.</p>

<p>Somos la sociedad del <em>&ldquo;Tu no sabes&rdquo;</em> y no la del <em>&ldquo;Creo que puede mejorarse&rdquo;</em>,
y estamos tan acomplejados con nuestras mierdas, que necesitamos poner al
principio de nuestras frases un <strong>&ldquo;IMHO&rdquo;</strong> porque sino, puede que se note
demasiado que creemos que toda linea de código que no sale de nuestros muñones
es basura ipso facto.</p>

<p>Los más educados han decidido enmascarar toda esta realidad con una palabreja
de lo más interesante, y querido lector&hellip; grábatela en tu memoria desentrenada.</p>

<p>Legacy Code.</p>

<h3>Estos de producto&hellip;</h3>

<p>Otra de las frasecillas que corren por la autopista de lo insultante es <em>&ldquo;estos
de producto, que pesaos con los píxeles&rdquo;</em> o parecidas, normalmente con tono
burlesco y desafiante.</p>

<p>Si amigo, un clásico entre compañeros de departamento, muy habituales en
cualquier empresa que se precie donde cuiden un poco sus ventas. No todas las
empresas son tan modernas y liberales como para dejar a su libre albedrío
métricas de ventas y ingresos&hellip;</p>

<p>Ah&hellip; estos de producto que quieren jodernos la vida con chorradas como píxeles
para los frontales, con cambios en la web aparentemente inútiles, o con
integraciones con métodos de pago o de transporte. Cuando veas a toda esta
gentuza, escúpeles en la cara, porque no nos respetan, a nosotros, a los
programadores, a los que hacemos los proyectos que nos piden con tecnologías que
desconocemos porque son guasonas y molonas, a los que decidimos que el nuevo
proyecto de la empresa se hará con 378 capas distintas, a cada cual más inútil,
porque un tal Pepito de los Palotes con sombrero y cuyos fans llevaban el libro
de Clean Code tatuado en sus suaves nalgas, dijo que era lo último en
Hipsterismo, a pesar de no saber qué estamos haciendo y el porqué lo estamos
haciendo. A nosotros que hacemos un formulario en 5 días porque queremos que sea
compatible con la GameBoy advance, con la pantallita del microondas y con el
termostato de nuestra estufa. A nosotros que nadie nos impide estar todo el día
con la nariz enganchada a los grupos online con ciertos parecidos a bacanales.</p>

<p>A nosotros que somos tan responsables.</p>

<p>Te diré un secreto.
En voz bajita, que no nos oiga nadie.</p>

<p>Si ellos supieran cada una de las cagadas que hacemos en el código que nos pagan
por hacer, o si supieran cada una de las decisiones arquitecturales erróneas que
tomamos por el mero hecho de querer molar cantidad, estaríamos todos despedidos.
Todos.</p>

<p>Aunque supongo que preferimos decir &ldquo;Estos de producto&hellip;&rdquo;, aparentar que no tan
solo sabemos hacer un <em>foreach</em>, sino que también sabemos hacer el trabajo de
media compañía, y seguir con nuestras vidas con la cabeza bien alta, dejando un
rastro de Legacy Code, cual rastro en nuestras espaldas.</p>

<h3>En mi empresa hacemos&hellip;</h3>

<p>Esta es perla brillante, el zafiro de las frases, aunque para encontrarla
tendrás que esforzarte un poco y dejar que la luz del sol alumbre tu tersa tez
para salir de casa y relacionarte con otras personas de otras empresas.</p>

<p><strong>Ánimo.</strong></p>

<p>Y es que descubrirás que todas las otras empresas utilizan lo last de lo last.
Mierda de la buena en su stack de tecnologías y droga de la dura en sus últimas
incorporaciones (cuando no tienen un auténtico máquina en su departamento de
backend, tienen un exfacebook en su departamento de sistemas o un súper crack
como CTO llegado de las montañas de los elfos).</p>

<p>Todas las empresas están tan bien dotadas tecnológicamente y con unas plantillas
tan extremadamente potentes, que cuando entres en una empresa nueva, nunca,
repito, nunca, jamás de los jamases, tendrás la impresión de haber empezado a
trabajar en una escabechina llena de cadáveres, pudriéndose durante los últimos
10 años.</p>

<p>Nunca, en absoluto.</p>

<p>Y es que amigo, parece que entre que todo nuestro código es una mierda, y los
de producto están todo el día que si ponme este píxel, y ponme este banner,
resulta que no tenemos tiempo de hacerlo bien. Pero eh! no es porque seamos
todos unos auténticos chapuzas en la mayoría de los casos, no no, es porque no
hemos tenido <em>tiempo</em>.</p>

<h3>Es que resulta que Uncle Bob dice que&hellip;</h3>

<p>Rápido y preciso.</p>

<ul>
<li>¿Está aquí Uncle Bob?</li>
<li>¿Conoce Uncle Bob el proyecto?</li>
<li>No, ¿verdad?</li>
<li>Pues me importa una mierda lo que diga el tío Bob.</li>
</ul>


<p>Fin de la discusión.</p>

<h2>La clave de todo, BLDD</h2>

<p>Dicho esto, verás que el mundo es un lugar inhóspito, lleno de gente con pocas
ganas de ayudarte y con muchas de joderte y hundirte, pero aún así tu tienes que
hacer un <em>switch</em> porque dadas las circunstancias que sean no puedes o no sabes
hacerlo mejor, o tienes que hacer un proyecto con pocos días y por desgracia no
puedes hacerlo compatible con el manillar de tu bici.</p>

<p>Te presento, humildemente, el <strong>BLDD</strong>, abreviación de <strong>BullshitLess-Driven
Development</strong> (otra cosa que tienes que aprender es que aquí escribimos todos
con abreviaciones, en inglés aunque estén hablando dos de Albacete, y que debes
poner entre frase y frase la palabra <strong>Trade-off</strong>. Si no haces esto, no serás
aceptado por los grandes círculos).</p>

<p>El BLDD es una práctica muy sencilla, basada en el ignorar todas aquellas
frecuencias que emitan gilipolleces en directo. Lo que vendría a ser el clásico
mandar a esnifar plastidecor picado de toda la vida, pero con un nombre moderno
y casual, de estos que nos hacen sentir a nosotros muy top.</p>

<blockquote><p>Se recomienda primero hacer los tests, y luego implementar el BLDD. Si no lo
haces así, eres un mierda.</p></blockquote>

<p>Esta metodología contrarresta todas las demás que terminan en DD y es aplicable
la mayor parte del tiempo útil de tu vida.</p>

<ul>
<li>Que alguien te dice que tu proyecto debería tener tests primero? BLDD.</li>
<li>Que alguien te dice que estás muy acoplado a tu FW y solo quieres hacer tu
currículum? BLDD</li>
<li>Que alguien te dice que tu código es mierda y que él lo hace mejor en DDD?
<del>a este le rompes la boca</del> BLDD</li>
</ul>


<p>Ya ves, funciona cual navaja suiza. Lo bueno de esta práctica es que ten claro
que nunca nadie va a decir como debes practicarla. Un sinfín de fórmulas, cada
cual más original, pueden formar parte del elenco de posibilidades a la hora de
ejecutar el BLDD.</p>

<h2>Algunos consejos para terminar</h2>

<p>Para finalizar mi cookbook del buen programador, un escueto listado de ideas y
miniconsejos de jardinería para que vayas pensando.</p>

<ul>
<li>IMHO, si algún día haces una presentación en público, súbete el libro rojo de
DDD contigo, y al que se ponga en la primera fila y se ponga a mirar el móvil o
a dormirse, se lo tiras. Le va a doler. Mucho. Y si sigue durmiendo, recuerda
que aún tienes de otros colores&hellip;</li>
<li>IMHO, una conversación se acaba cuando alguien dice la palabra <em>Annotation</em>.</li>
<li>IMHO, para tener amigos en Twitter solo tienes que decir &ldquo;TDD is dead&rdquo;. Para
tener haters, también.</li>
<li>IMHO, los tests en tus proyectos es como el paro en españa. Lo importante
es el coverage, no la calidad de los cases.</li>
<li>IMHO, en Barcelona, de media los developers solemos cambiar de trabajo una vez
al año, con subida salarial de forma recurrente. A los 40 años estarás cobrando
120.000 euros y serás un fucking god en 20 lenguajes distintos. Seguirás sin
poner bien el puto nombre a una variable y pondrás los comentarios en español.</li>
<li>IMHO, a día de hoy, en enero de 2017 es mainstream el Event Sourcing. Si, si, está
práctica tan jodidamente útil en todo nuestro sector. Así que calculo que
aproximadamente en 2021, en alguna de las empresas en las que trabajes, te
encontrarás un conjunto de código intratable, ilegible y profundamente
indocumentado fruto de esta modilla. De nada.</li>
</ul>


<h2>Conclusiones</h2>

<p>Finalmente decirte que mucha suerte, que aprendas mucho, que leas mucho, que
preguntes y enseñes mucho, pero que nunca dejes que nadie te diga como tienes
que hacer las cosas (menos si alguien te aconseja que no utilizes Prestashop. En
este caso, hazle caso). Ten el suficiente criterio como para aceptar que muchas
de las formas de trabajar que escucharás en conferencias, charlas de amiguetes o
en hilos de Twitter ni tan solo sirven para tu proyecto.</p>

<p>Trabaja duro, persigue tus objetivos y acuérdate de comprarte muchos libros
técnicos, de sacar una foto cada vez que te compres uno y publicar en Twitter
algo como <em>&ldquo;Ya tengo plan para este fin de semana&rdquo;</em>.</p>

<p>Para todo lo demás, BLDD.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symfony Catalunya]]></title>
    <link href="http://mmoreram.com/blog/2016/03/03/symfony-catalunya/"/>
    <updated>2016-03-03T17:00:00+01:00</updated>
    <id>http://mmoreram.com/blog/2016/03/03/symfony-catalunya</id>
    <content type="html"><![CDATA[<p>Imagine yourself in front of the Barcelona&rsquo;s beach in July. It sounds good,
right? Then, continue imagining yourself with a great Symfony environment, with
a very cold beer, amazing people and even better topics to talk about.</p>

<p>Isn&rsquo;t it the best plan ever?</p>

<p>Well, if you feel that you need it, then you should continue reading this
post&hellip;</p>

<p>I&rsquo;m very very pleased to tell you that this plan is going to happen this summer.
The Symfony Barcelona Association is working very hard on this first edition of
<a href="http://symfony.cat">Symfony Catalunya</a>, an international Symfony event placed
in our city. This event is 100% in english and is going to be very focused on
how Symfony can help us in our day by day and in our jobs.</p>

<p><a href="http://symfony.cat"><img src="http://symfony.cat/images/symfony-catalunya-poster.png" alt="Symfony Catalunya 2016" /></a></p>

<p>What does it really mean? Let me explain you properly:</p>

<ul>
<li><strong>0 smoke</strong>. This doesn&rsquo;t mean that we will not talk about new concepts, like
React for example, but everything will be constructive and focused on your next
day work.</li>
<li><strong>New talks</strong>. Don&rsquo;t you feel that all events are populated with same talks year
after year? In this event you will find <strong>only</strong> new talks.</li>
<li><strong>Amazing speakers</strong>. Speakers are selected because their communication skills.
The speaker quality is as important as the talk quality, don&rsquo;t you think?</li>
<li>Community to Community. We will not make any money with that event. All earned
gains will be invested in you somehow.</li>
<li><strong>50 euros</strong> early bird ticket. <a href="http://symfony.cat/#tickets">Get yours</a> as soon
as possible and join us :)</li>
<li>Take some breath. 7 talks per day, one after another is never a good option.
With 4 talks per day you will be able to enjoy the city and the people.</li>
<li>Eat whatever you want, whenever you need. Your ticket doesn&rsquo;t include food,
but the venue is in front of great placed for having lunch and coffee.</li>
<li>Lighting talks. If you feel that you have something to show us, bring your 8
minutes speech.</li>
</ul>


<p>Of course, and because you&rsquo;re able to buy early bird tickets, we have published
4 of our 8 speakers in our website.</p>

<ul>
<li><a href="https://github.com/matthiasnoback">Matthias Noback</a></li>
<li><a href="https://github.com/acasademont">Albert Casademont</a></li>
<li><a href="https://github.com/weaverryan">Ryan Weaver</a></li>
<li><a href="https://github.com/jmikola">Jeremy Mikola</a></li>
</ul>


<h2>Companies</h2>

<p>Are you a company placed in some part of the world? Do you like Symfony? Then
this may interest you&hellip;</p>

<p>For only 300 euros you will be able to</p>

<ul>
<li>Put your logo everywhere. We will mention you in our media channels at least
once.</li>
<li>You will be able to add whatever you want in our Conference Attendee bag</li>
<li>You will get one free ticket for the conference</li>
<li>We will work very very hard to provide you an stand during the conference.</li>
<li>You will have the satisfaction to be helping the Symfony Environment, a very
important part if you are looking for Symfony developers</li>
</ul>


<p>We really appreciate companies sponsoring, and we strongly think that should
always be that cheaper.</p>

<h2>Communities</h2>

<p>Are you a PHP or Symfony community? Well, you can help us too by spreading the
word. In exchange of that, we will consider you part of our sponsoring group,
adding your logo in our list as well.</p>

<p>And is free!</p>

<p>How can you help us?
Well, for each new sponsor we have because of you, we will give you one free
ticket for the conference. You will be able to raffle this ticket among your
community.</p>

<h2>Join us</h2>

<p>Do you like that? Then&hellip;</p>

<ul>
<li><a href="http://symfony.cat/#tickets">Join Symfony Catalunya now!</a></li>
</ul>


<p>To be aware of our news, follow our Twitter account
(<a href="http://twitter.com/symfonycat">@symfonycat</a>) and say hello :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[you probably need bundle dependencies]]></title>
    <link href="http://mmoreram.com/blog/2016/02/09/you-probably-need-bundle-dependencies/"/>
    <updated>2016-02-09T12:23:00+01:00</updated>
    <id>http://mmoreram.com/blog/2016/02/09/you-probably-need-bundle-dependencies</id>
    <content type="html"><![CDATA[<p>This post tries to answer the Magnus Nordlander&rsquo;s
<a href="https://blog.fervo.se/blog/2016/02/07/bundle-deps/">blog post</a>, and to explain
why the <a href="https://github.com/mmoreram/symfony-bundle-dependencies">Symfony Bundle Dependencies</a>
is not just a personal project to fulfill my bundles dependencies, but a
practice we should implement in all our Symfony bundles as well.</p>

<p>Believe me, I had a big post to explain why people really need this bundle, but
I think that you don&rsquo;t need these words, but a simple and real example.</p>

<p>Magnus, you&rsquo;re right. Maybe soft dependencies between bundles could be a good
option, but you know what? You know why Symfony is one of the biggest PHP
projects ever? Because Symfony understands the real user needs, and furthermore,
fulfills them the best way.</p>

<p>Why I tell this? Because your &ldquo;You probably don&rsquo;t need bundle dependencies&rdquo;
should be &ldquo;You <strong>really</strong> need bundle dependencies, but you should work hard to
don&rsquo;t need them anymore&rdquo;.</p>

<p>Remember, software is real, with real developers, real projects and real needs.
We should take it in account as much as we can.</p>

<p>This is my example, from the most used bundle in the world, FOSUserBundle.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;fos_user.user_manager.default&quot;</span> <span class="na">class=</span><span class="s">&quot;FOS\UserBundle\Doctrine\UserManager&quot;</span> <span class="na">public=</span><span class="s">&quot;false&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;argument</span> <span class="na">type=</span><span class="s">&quot;service&quot;</span> <span class="na">id=</span><span class="s">&quot;security.encoder_factory&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;argument</span> <span class="na">type=</span><span class="s">&quot;service&quot;</span> <span class="na">id=</span><span class="s">&quot;fos_user.util.username_canonicalizer&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;argument</span> <span class="na">type=</span><span class="s">&quot;service&quot;</span> <span class="na">id=</span><span class="s">&quot;fos_user.util.email_canonicalizer&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;argument</span> <span class="na">type=</span><span class="s">&quot;service&quot;</span> <span class="na">id=</span><span class="s">&quot;fos_user.object_manager&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;argument&gt;</span>%fos_user.model.user.class%<span class="nt">&lt;/argument&gt;</span>
</span><span class='line'><span class="nt">&lt;/service&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I want you to focus on one single line.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;argument</span> <span class="na">type=</span><span class="s">&quot;service&quot;</span> <span class="na">id=</span><span class="s">&quot;security.encoder_factory&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can discuss about how good or bad this is, but I really ensure you that you
will find this in the 99,99% of all bundles. So maybe we need to change our mind
and start doing decoupled bundles (not agree in fact, it depends on the case),
but right now, hard bundle dependencies (composer and kernel) is something that
should be covered the best we can.</p>

<p>About your last question, well, your libraries will require some other libraries
and composer will make it happen, with an update and it&rsquo;s autoloader. But your
bundles will probably require dependencies as well, with composer and as well
with a library like that, that will tell the Kernel witch bundle should be
instanced as well to complain services dependencies.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Your packages dependencies]]></title>
    <link href="http://mmoreram.com/blog/2015/11/20/your-packages-dependencies/"/>
    <updated>2015-11-20T21:50:00+01:00</updated>
    <id>http://mmoreram.com/blog/2015/11/20/your-packages-dependencies</id>
    <content type="html"><![CDATA[<ul>
<li>A component should add as dependency all needed packages to have a complete
functionality</li>
<li>A bundle should add as dependency as well all these bundles that define other
services used in your own service definitions</li>
<li>Take care of your version policy. Being too restrictive reduces the
compatibility with other packages.</li>
</ul>


<h2>Responsibilities</h2>

<ul>
<li>Hi. I&rsquo;m Marc and I am an open source addict</li>
<li>Hi Marc, welcome!</li>
</ul>


<p>That is a reality in fact. I&rsquo;m part of this group of people that consider
themselves addicts to open source. Big part of our work is created to be shared
by everyone, and like Spider-man&rsquo;s uncle said once&hellip; &ldquo;With great power comes
great responsibility&rdquo;.</p>

<p>But what are those responsibilities we should take care of during our
development? What parts of our application should we really take care of and
which are more vulnerable over the time? Testing, documentation, clearness of
our code, abstraction, extension capabilities&hellip; we could talk about them all,
and for sure, each one can have enough material for an entire blog or a book.</p>

<p>In that case, I want to expose my personal experiences about what I learned over
the time by leading an open source project, several small open source bundles
and PHP libraries, and I want to do it by explaining how we should take care of
our Symfony bundles or PHP component dependencies.</p>

<h2>PHP Component Dependencies</h2>

<p>When we talk about PHP components, we talk about framework agnostic packages,
only coupled to the language itself, in that case PHP, and to some other
libraries. Having said that, we could start by trying to understand how the
components and bundles are split in some projects, for example
<a href="http://github.com/symfony/symfony">Symfony</a> or
<a href="http://github.com/elcodi/elcodi">Elcodi</a>. Both projects have components and
bundles, providing the chance to all frameworks to work with their business
logic.</p>

<ul>
<li>So do we place all the business logic in components?</li>
<li>Yes. The <em>why</em> of your project is placed in libraries. This will be your
service layer, and it should be covered with unit tests.</li>
</ul>


<p>In regard to dependencies, components should only have dependencies on other
components. But how can I discover what packages I really depend on? In that
case it&rsquo;s very simple, so we&rsquo;re not working with any kind of magic. Because our
packages are simple PHP classes, checking the usage of all external classes
should be enough to know on which libraries we depend.</p>

<p>In that case, I always write code with <code>use</code> statements, so is much easier to
check my external classes usage. Just by checking the first lines of all my
classes I can guess what packages I should add in my composer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">namespace</span> <span class="nx">Elcodi\Component\User\EventListener</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\Event\AuthenticationEvent</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Doctrine\Common\Persistence\ObjectManager</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Elcodi\Component\Cart\Entity\Interfaces\CartInterface</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Elcodi\Component\Cart\Wrapper\CartWrapper</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Elcodi\Component\User\Entity\Interfaces\CustomerInterface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Class UpdateCartWithUserListener</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UpdateCartWithUserListener</span>
</span></code></pre></td></tr></table></div></figure>


<p>This piece of code makes you depend on four packages at least. Please, don&rsquo;t
focus on the versions, but only on the libraries.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;require&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;php&quot;</span><span class="p">:</span> <span class="s2">&quot;*&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&quot;symfony/security&quot;</span><span class="p">:</span> <span class="s2">&quot;*&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;doctrine/common&quot;</span><span class="p">:</span> <span class="s2">&quot;*&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;elcodi/cart&quot;</span><span class="p">:</span> <span class="s2">&quot;*&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;elcodi/user&quot;</span><span class="p">:</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dependencies of Dependencies</h3>

<p>Your package must manage ALL of its dependencies, even if they are as well
dependencies of your dependencies.</p>

<ul>
<li>Your package A uses B and C.</li>
<li>Your package A requires B.</li>
<li>Package B requires C.</li>
<li>Then, your package A has both B and C. Enough.</li>
</ul>


<p>Well, that&rsquo;s not true at all, because you cannot depend never of the
dependencies of your dependencies. Maybe now they require a package, but maybe
this package won&rsquo;t be required by your dependency anymore in the future. In that
case, even if you still need it, your package will disappear from your vendor
folder.</p>

<ul>
<li>Your package A uses B and C.</li>
<li>Your package A requires B and C.</li>
<li>Package B requires C.</li>
<li>Then, your package A has both B and C.</li>
<li>Package B does not require C anymore.</li>
<li>You still have B and C.</li>
</ul>


<p>Remember that&hellip; Require <strong>ALL</strong> your dependencies. All of them! That can make
the difference.</p>

<h3>Adapters</h3>

<p>If our application is super decoupled from other libraries, and you have used
adapters for those integrations, then things change. Because the use of adapters
allows you to decouple from other packages literally, we should find another
mechanism to say&hellip; <em>hey, maybe you can depend on this package&hellip;</em>. Composer
proposes that mechanism, by using the <code>suggest</code> section.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;suggest&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;some/package&quot;</span><span class="p">:</span> <span class="s2">&quot;Use ^2.5 for integration with Some Package&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, this is not the only way of doing that. In this example we assume
that our package will offer all the adapters implementing an interface, and this
is just an option. In my case, I&rsquo;ve been working for so long with a library
called <a href="https://github.com/KnpLabs/Gaufrette">Gaufrette</a>, and I really enjoy the
way these kind of packages work.</p>

<blockquote><p>Some of you could say&hellip; oh, but by doing that, then you&rsquo;re not defining
dependencies but only suggestions (sounds the same as saying nothing, in
fact), but when we define a requirement is when our package cannot exist
without this package. When it is a MUST.</p></blockquote>

<p>Other kind of implementations don&rsquo;t take into account the possibility of using the
<code>suggest</code> section in composer, because they don&rsquo;t really solve the dependencies
problem. This implementation forces having 1+<code>n</code> packages, the first one
containing the interface and the common content, and the other <code>n</code> containing
each specific implementation, all of them requiring the first one as a
dependency and the specific third-party package.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;require&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;myself/core&quot;</span><span class="p">:</span> <span class="s2">&quot;*&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;some/package&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.5 &quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is much more heavy to maintain, and only works if you only offer one port
with <code>n</code> adapters in your package. In the case of Gaufrette, this could be a
reality, so they only offer one port with <code>n</code> adapters, but of course, having
this structure is more difficult to maintain.</p>

<h3>Versions</h3>

<p>That is a very complex topic. I will not talk about composer, but firstly, I
will share some basic concepts that are used a lot when defining dependencies
between packages.</p>

<ul>
<li><code>~2.5.4</code> means equal and bigger than <code>2.5.4</code> but smaller than <code>2.6</code></li>
<li><code>~2.5</code> means equal and bigger than <code>2.5.0</code> but smaller than <code>3.0.0</code></li>
<li><code>^2.5.4</code> means equal and bigger than <code>2.5.4</code> but smaller than <code>3.0.0</code></li>
<li><code>^2.5</code> means equal and bigger than <code>2.5.0</code> but smaller than <code>3.0.0</code></li>
</ul>


<p>The only thing I can say about that is that if your library aims to be usable by
a biggest community as possible, then please consider checking your dependencies
deeply, offering as much version-compatibility as possible.</p>

<p>The following composer requirements&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;require&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;php&quot;</span><span class="p">:</span> <span class="s2">&quot;5.4.2&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&quot;symfony/security&quot;</span><span class="p">:</span> <span class="s2">&quot;~2.7.3&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;doctrine/common&quot;</span><span class="p">:</span> <span class="s2">&quot;~2.7.3&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;elcodi/cart&quot;</span><span class="p">:</span> <span class="s2">&quot;~1.0.4&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;elcodi/user&quot;</span><span class="p">:</span> <span class="s2">&quot;~1.0.4&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>are more restrictive than the following ones&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;require&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;php&quot;</span><span class="p">:</span> <span class="s2">&quot;^5.3.9&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&quot;symfony/security&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.3&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;doctrine/common&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.3&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;elcodi/cart&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;elcodi/user&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.0&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, you should add requirement compliance as long as they really cover
your library needs. If you use Traits, then you should use <code>^5.4</code>, or if you&rsquo;re
using some Symfony features introduced in a specific version, then you become
dependent, at least, on this version</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;require&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;php&quot;</span><span class="p">:</span> <span class="s2">&quot;^5.4&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&quot;symfony/security&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.7&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;doctrine/common&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.3&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;elcodi/cart&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;elcodi/user&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.0&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Consider as well the compatibility with new major versions, as soon as they
confirm their roadmap strategy and feature list. In that case, we could add
compatibility with Symfony <code>^3.0</code> if we have removed all deprecated elements
from old versions, or PHP <code>^7.0</code> if we don&rsquo;t use any <code>^5.6</code> deprecated function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;require&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;php&quot;</span><span class="p">:</span> <span class="s2">&quot;^5.4|^7.0&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&quot;symfony/security&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.7|^3.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;doctrine/common&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.3|^3.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;elcodi/cart&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;elcodi/user&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.0&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is very important, because if you don&rsquo;t offer this kind of compatibility,
no one using your package will be able to evolve properly, and when I mean
someone using your package I mean anyone using any package that, recursively,
uses your package.</p>

<p>That can be tons of projects.</p>

<h2>Symfony bundle dependencies</h2>

<p>Once we have talked about PHP components, let&rsquo;s talk about Symfony bundles. This
is something much more complicated, because a Symfony Bundle is a PHP library
that is co-existing in a framework, so it is not as easy to check all our PHP
class dependencies.</p>

<p>The question we must ask ourselves when trying to resolve any Symfony bundle
dependency map is&hellip; <em>What do I really need to make this bundle work in any
Symfony project?</em></p>

<h3>Other bundles</h3>

<p>This is one of the things Symfony doesn&rsquo;t solve yet. How can a bundle depend on
another bundle, but not only in the composer layer but as well in the
application layer?</p>

<p>Well, there is a package for that (remember to <strong>star</strong> it if turns out useful
for you).</p>

<p><a href="https://github.com/mmoreram/symfony-bundle-dependencies">Symfony Bundle Dependencies</a></p>

<p>This package allows you to create bundles with other bundle dependencies very
easily. By using this package you will be able to say&hellip; <em>okay composer,
download this bundles, I need them to instantiate my bundle&hellip; and Symfony
application, as soon you instantiate my bundle, please, install these other
bundles as well before</em> without any need to modify the kernel. Of course, this
is only possible if the project works with that package as well.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\SymfonyBundleDependencies\DependentBundleInterface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * My Bundle</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MyBundle</span> <span class="k">implements</span> <span class="nx">DependentBundleInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Create instance of current bundle, and return dependent bundle namespaces</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return array Bundle instances</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">getBundleDependencies</span><span class="p">(</span><span class="nx">KernelInterface</span> <span class="nv">$kernel</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span>
</span><span class='line'>            <span class="s1">&#39;Another\Bundle\AnotherBundle&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;My\Great\Bundle\MyGreatBundle&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="k">new</span> <span class="nx">\Yet\Another\Bundle\YetAnotherBundle</span><span class="p">(</span><span class="nv">$kernel</span><span class="p">),</span>
</span><span class='line'>            <span class="k">new</span> <span class="nx">\Even\Another\Bundle\EvenAnotherBundle</span><span class="p">(</span><span class="nv">$kernel</span><span class="p">,</span> <span class="k">true</span><span class="p">),</span>
</span><span class='line'>        <span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the project is not using this package, then the behavior of your bundle won&rsquo;t
change at all.</p>

<h3>DIC Services</h3>

<p>To resolve all your bundle dependencies you need to take a look as well at your
Dependency Injection definition. Let&rsquo;s imagine we have a bundle with this
DIC definition.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">my_service</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">My\Service\Class</span>
</span><span class='line'>        <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="err">@</span><span class="l-Scalar-Plain">twig</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">my_other_service</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="err">@</span><span class="l-Scalar-Plain">event_dispatcher</span>
</span></code></pre></td></tr></table></div></figure>


<p>When Symfony tries to resolve this file, it needs as well all the definitions
of the arguments (dependencies). The bundles that have these definitions
automatically become your bundle dependencies.</p>

<p>The hard work here is to know which bundles have all these service definitions,
and that is not always that simple. In that case, for example&hellip; Which package
has the <code>@twig</code> service? We could think easily&hellip; well, <code>twig/twig</code> for sure has
the class we are injecting here.</p>

<p>And you&rsquo;re right, so if any of your classes, in that case <code>My\Service\Class</code>
needs a class from the package <code>twig/twig</code>, this package will have to be
required by your bundle.</p>

<p>But is that the real answer we need right now? Not at all. The question is not
which package provides me with the Twig class, but with the <code>@twig</code> service, and
this one is not <code>twig\twig</code> as this is only a PHP library, framework agnostic.</p>

<p>For this reason, we have a bundle called
<a href="http://github.com/symfony/TwigBundle">TwigBundle</a>. This bundle, as well as
other needed things, creates a new service called <code>twig</code>. This Bundle is
required not only because we need the code under our vendor folder, but also
because it has to be instantiated when our bundle is instantiated.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;require&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;symfony/twig-bundle&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.7&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you decide to work with the symfony bundle dependency package, then this code
is for you.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\SymfonyBundleDependencies\DependentBundleInterface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * My Bundle</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MyBundle</span> <span class="k">implements</span> <span class="nx">DependentBundleInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Create instance of current bundle, and return dependent bundle namespaces</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return array Bundle instances</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">getBundleDependencies</span><span class="p">(</span><span class="nx">KernelInterface</span> <span class="nv">$kernel</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span>
</span><span class='line'>            <span class="s1">&#39;Symfony\Bundle\TwigBundle\TwigBundle&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you don&rsquo;t use this package, then you should add the TwigBundle instance in
your AppKernel.</p>

<h3>Requiring the Framework</h3>

<p>How about this services file? What dependencies do you think your package has?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">my_service</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">My\Service\Class</span>
</span><span class='line'>        <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="err">@</span><span class="l-Scalar-Plain">event_dispatcher</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some people can say if quickly&hellip; the EventDispatcher is a requirement&hellip; but we
have the same problem as before. The Event Dispatcher is a Symfony component,
and has nothing to do with the exposure of their classes in the Symfony
Framework dependency injection definition.</p>

<p>Symfony provides as well a bundle called
<a href="https://github.com/symfony/framework-bundle">FrameworkBundle</a>. Its mission is,
in addition to creating all the working environment for your project (the
framework itself), to expose all needed services to the DIC. One of them is the
Event Dispatcher from the component (if you check the composer.json file of that
bundle you will discover that the symfony/event-dispatcher package is a
requirement).</p>

<p>So, some of your bundle services should require as well this bundle.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;require&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;symfony/framework-bundle&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.7|^3.0&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This bundle is almost always required by all bundles (at least, it should), so
make sure you&rsquo;re really tolerant with its version, or you will make your
bundle less usable than it could be.</p>

<h3>Symfony ^3.0.0</h3>

<p>Many packages are actually requiring a very restrictive version of Symfony. This
fact has not been a problem during the latest 4 years, but nowadays Symfony
<code>v3.0.0</code> is going to be a reality soon, so all these packages need to make two
easy things</p>

<ul>
<li>Check if your bundle introduces a Symfony <code>~2.8</code> deprecated feature.</li>
<li>If it does, update your bundle to avoid this deprecation</li>
<li>Update your requirements to work as well with Symfony <code>^3.0</code>.</li>
</ul>


<p>Check that your Symfony requirements then are still valid. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;require&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;symfony/framework-bundle&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.2|^3.0&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Applying this new requirement with Symfony <code>^3.0</code> maybe you had to use a new
feature that was introduced in Symfony <code>^2.7.3</code>. In that case, your
composer.json is invalid, and if you have covered your class with tests and you
run your tests with <code>--prefer-lowest</code>, then you will have some fails there.</p>

<p>You will have to update your dependency properly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;require&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;symfony/framework-bundle&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.7.3|^3.0&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Development Dependencies</h2>

<p>As you may already noticed, development dependencies are not loaded recursively.
This means that the <code>require-dev</code> block of your <code>require-dev</code> packages is
completely ignored.</p>

<p>In some way, this is great because you can define specifically what packages you
need for your development (testing, mostly), without being worried about all the
packages that require you.</p>

<p>In some other way, this can be bad&hellip; well, yes, you must know exactly all your
dependencies for testing (there should be only a few&hellip;), so in that case, just
make sure you know your application :)</p>

<h3>Requiring PHPUnit</h3>

<p>And then the question is&hellip; should I require PHPUnit or other testing libraries,
as well as lints and formatters?</p>

<p>Again, some people will tell you&hellip; don&rsquo;t do that! Your development and testing
deployment will require more disk and more resources for composer. Well, sure,
but if you depend on the pre-installed PHPUnit version, then you can have some
trouble when testing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;require-dev&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;fabpot/php-cs-fixer&quot;</span><span class="p">:</span> <span class="s2">&quot;1.4.2&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;mmoreram/php-formatter&quot;</span><span class="p">:</span> <span class="s2">&quot;1.1.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;phpunit/phpunit&quot;</span><span class="p">:</span> <span class="s2">&quot;4.5.0&quot;</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>I really need these versions. No others but these. For example, some lints can
add some logic, or even change it. Because we&rsquo;re responsible for our bundles,
components or code, we should trust as less as possible in what other people can
do to our dependencies (somehow we really trust a lot of packages by adding the
<code>^2.2</code> symbol, but in that case we do it not for us but for our users). In
testing mode, and because fortunately <code>require-dev</code> block is not recursive, we
can perfectly be restrictive with the version we want, and as long as we
want/need to change it&hellip; just do it :)</p>

<h2>Trust</h2>

<p>Trusting open source is something you cannot do blindly. Your project is your
business, and you need to know that is safe from third party version errors and
issues.</p>

<p>If you trust a package, like I do for example in Symfony, then use the
semantic version notation in your requirements. Believe that the community will
never allow back compatibilities breaks, or they will fix them all as soon as
possible when introduced.</p>

<p>If you trust a library because it is tested, but you don&rsquo;t trust their
version policy, then just block the version (knowing that this restricts the
compatibility with other packages), or make some push to this community for a
really semantic version policy.</p>

<p>If you don&rsquo;t trust a library at all, then don&rsquo;t use it. That simple.</p>

<h2>Conclusion</h2>

<p>So, that&rsquo;s it.</p>

<p>I highly recommend you, open source lover, to take as much care as possible of
your package dependencies. A healthy and useful package is a package used by
tons of people. Offer them some confidence and you will get a lot of feedback in
return.</p>

<p>Share your work as much as you can, and don&rsquo;t be afraid of your errors, they
will be your biggest reasons for being a better developer day after day, and
remember that all of us were inexperienced once.</p>

<p><em>Error is first step to success</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Composer install in CI]]></title>
    <link href="http://mmoreram.com/blog/2015/09/28/composer-install-in-ci/"/>
    <updated>2015-09-28T16:53:00+02:00</updated>
    <id>http://mmoreram.com/blog/2015/09/28/composer-install-in-ci</id>
    <content type="html"><![CDATA[<p>If you have a project with a lot of dependencies, then you might now what I am
talking about. We all love composer, but we all know as well that, at least with
current PHP versions, some composer.json are very heavy to compute and fulfill.
All this problems are reduced to time, and some CI engines, like Travis, only
allow a finite number of seconds (in Travis case, 20 minutes).</p>

<p>That&rsquo;s too much!</p>

<p>I found a solution (at least, I thought), but some days ago I saw that was not a
solution at all, but a workaround that only sometimes works properly. I will
explain exactly what&rsquo;s the point here.</p>

<h3>The problem</h3>

<p>My <code>composer.json</code> is very big and composer needs too much time to compute all
the dependencies. Reducing dependencies is not an option at all, so the only way
of reducing dependencies is by doing some refactoring.</p>

<p>Any final project needs a lot of dependencies, and even if your <code>composer.json</code>
file is small, you may need a dependency with a lot of dependencies.</p>

<h3>My solution (the bad one&hellip;)</h3>

<p>This solution is only wrong if you want to test your application under several
PHP versions. That&rsquo;s my case and could be yours&hellip;</p>

<p>Well. Computing the real dependencies in my environment seems a great solution,
right? I run <code>composer update</code> in my computer, I update the <code>composer.lock</code>
version in the repository, and then I only need to do <code>composer install</code>. What
I reduce here is the computing time of all recursive dependencies from 20+
minutes to less than 5 minutes.</p>

<p>That&rsquo;s great!</p>

<h3>Why this is a bad solution?</h3>

<p>Some projects have decided to increase the minimum PHP dependency only
increasing the minor version of the package (and is not wrong, is not BC break).
If your project believes in Semantic Version (semver), is usual to find these
pieces of composer blocks</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;require&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;php&quot;</span><span class="p">:</span> <span class="s2">&quot;&gt;5.4&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;symfony/symfony&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.7&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;doctrine/orm&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.5&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;some/package&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.3&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If my development environment uses PHP 5.5, then I will be able to work with
this composer requirements. Great. We update our dependencies, we update our
repository with the <code>composer.lock</code> file, and everything should work as
expected.</p>

<p>The problem here is that there is an scenario that we are not considering here,
and is that for sure, our <code>composer.lock</code> is the result of computing the
<code>composer.json</code> file in PHP 5.5, but this doesn&rsquo;t mean that same dependencies
will work as well in PHP 5.4.</p>

<p>Let&rsquo;s see the <code>some/package</code> composer definition in version 1.3.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;require&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;php&quot;</span><span class="p">:</span> <span class="s2">&quot;&gt;5.4&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;whatever/whatever&quot;</span><span class="p">:</span> <span class="err">*</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then, let&rsquo;s see the same composer file in version 1.4.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;require&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;php&quot;</span><span class="p">:</span> <span class="s2">&quot;&gt;5.5&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;whatever/whatever&quot;</span><span class="p">:</span> <span class="err">*</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As long as we create the <code>composer.lock</code> file in our development environment
(remember, with PHP 5.5), we will use version 1.4 of package <code>some/package</code>, but
this package version is not compatible with PHP 5.4.</p>

<p>What will happens is that, when we do <code>composer install</code> in your CI, composer
will throw an Exception. And that&rsquo;s always bad news.</p>

<h3>The good solution</h3>

<p>There&rsquo;s no good solution at all. In fact, there are only partial solutions, for
example generating the <code>composer.lock</code> file with the highest PHP version
allowed, but then, if you work with a dependency that forces a PHP version in
each version, this won&rsquo;t work at all.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;require&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;php&quot;</span><span class="p">:</span> <span class="s2">&quot;5.4&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;whatever/whatever&quot;</span><span class="p">:</span> <span class="err">*</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, the only way of doing that is by using <code>composer update</code> in your CI
platform. The good point is that you <strong>must</strong> take care of your <code>composer.json</code>
file&hellip;</p>

<h3>For libraries</h3>

<p>If you work with a library, then use the biggest dependency scope. This will
allow more users to use your library. Of course, you will increase the final
time of composer computation time, but is not your problem at all.</p>

<p>Of course, library composer dependencies should be as small as possible.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;require&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;php&quot;</span><span class="p">:</span> <span class="s2">&quot;&gt;5.4&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;whatever/whatever&quot;</span><span class="p">:</span> <span class="err">*</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>For final projects</h3>

<p>Final projects have the responsibility of reducing that scope, only allowing
explicitly highest versions. Of course, final projects can host big composer
structures (at least it&rsquo;s not a bad practice&hellip;), so in that case you will have
to work harder to reduce that file.</p>

<p>The problem here is not a problem at all, so it has no sense to test your final
application under several PHP versions, at least in your CI platform. Just test
it under your current PHP version, right?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;require&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;php&quot;</span><span class="p">:</span> <span class="s2">&quot;5.5&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;whatever/whatever&quot;</span><span class="p">:</span> <span class="err">^</span><span class="mf">1.5</span><span class="err">.</span><span class="mi">4</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symfony UG, be our friend]]></title>
    <link href="http://mmoreram.com/blog/2015/09/14/symfony-ug-be-our-friend/"/>
    <updated>2015-09-14T10:57:00+02:00</updated>
    <id>http://mmoreram.com/blog/2015/09/14/symfony-ug-be-our-friend</id>
    <content type="html"><![CDATA[<p>Symfony Barcelona UG have been looking some sponsors for a while, and we have
had a great response from the community. We are so proud and happy about that.</p>

<p>As a User Group, we want to be a community group for all the community, so from
today, you can be our UG friend :)</p>

<p>If you are a Symfony UG around the world and you want to be part of it, very
easy. Just send an email to
<a href="symfonybarcelona@gmail.com">symfonybarcelona@gmail.com</a> or just a simple tweet
with <a href="http://twitter.com/symfony_bcn">@symfony_bcn</a>. We will add your logo in
our website and you will appear in our next event.</p>

<p>Then, we will be friends :)</p>

<p>Please, share this post on your social networks, and help us making a better
world with tons of tiny and cute cats :)</p>

<p>Have a nice week!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symfony Barcelona Event, September 2015]]></title>
    <link href="http://mmoreram.com/blog/2015/09/07/symfony-barcelona-event-september-2015/"/>
    <updated>2015-09-07T21:38:00+02:00</updated>
    <id>http://mmoreram.com/blog/2015/09/07/symfony-barcelona-event-september-2015</id>
    <content type="html"><![CDATA[<p>It is a pleasure for me to announce that next September 22nd we will have a
great event in Barcelona. I&rsquo;ve talked many times about this local organization,
but this time is pretty different. I&rsquo;ll explain you.</p>

<p>This year Barcelona hosts the
<a href="https://events.drupal.org/barcelona2015">DrupalCon Europe 2015</a>, and this is
super exciting. Many people from around the world will visit our great and
amazing streets and will attend to a great and big event, related with Drupal,
Symfony and other interesting topics, always, related to the Drupal world.</p>

<p>This is very interesting from the point of view of Symfony, because as you may
know, new version of drupal, Drupal8, is build using some Symfony components.
This is one of the examples I refer when I talk about sharing technologies
between PHP projects and when I talk about open source, community and other
related topics. We&rsquo;ve seen these synergies between other PHP projects and
Symfony as well with Laravel, eZ Publish, Magento and Joomla (and many more,
indeed)</p>

<p>So, this is a call to all the community coming to Barcelona next September 21st.
We will host Fabien Potencier, the creator of Symfony, and Lukas Kahwe Smith, an
amazing and super active PHP developer, member, for example, of the PHP-FIG
group.</p>

<p><a href="http://symfony-barcelona.es">http://symfony-barcelona.es</a></p>

<p>Isn&rsquo;t it interesting? Indeed, but this is not all!</p>

<p>We are planning to overcome our last assistance record, which is 140 attendees.
This time, we want to fill an auditorium of 600 seats and show you what really
is Barcelona, and how amazing can be :)</p>

<p>Our sponsors are ready<br/>
The community is ready<br/>
The organization is ready<br/>
Only one thing is missing here&hellip;</p>

<p><strong>You!</strong></p>

<p><a href="http://symfony-barcelona.es#register">Join us now for free!</a> and please share
this post to allow everyone to know about it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EventListeners as collectors in Symfony]]></title>
    <link href="http://mmoreram.com/blog/2015/08/28/eventlisteners-as-collectors-in-symfony/"/>
    <updated>2015-08-28T12:04:00+02:00</updated>
    <id>http://mmoreram.com/blog/2015/08/28/eventlisteners-as-collectors-in-symfony</id>
    <content type="html"><![CDATA[<p>Some of my concerns during the last couple of years have been how to collect
data from all installed bundles using available tools in Symfony packages.
I say concerns because I don&rsquo;t really know if is there a tool for that.</p>

<p>Some people have told me that the
<a href="http://symfony.com/doc/current/components/event_dispatcher/introduction.html">EventDispatcher component</a>
can do this work greatly, but then I have the same question once and again&hellip; is
this component designed for such?</p>

<p>Let&rsquo;s review some tiny concepts here.</p>

<h2>Event immutability</h2>

<p>Try to think what really is an event. Something that happens. For example, I
wake up. Once I wake up, an event is dispatched called <code>mmoreram.wake_up</code>. This
event, of course, is immutable. Nothing can change the fact that I woke up, so
the event should be treated as an immutable object, with only reading actions.</p>

<p>One single property of the event is injected once is created. Did I wake up
rested enough for a new crazy day with all cool guys from my office?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">namespace</span> <span class="nx">Mmoreram</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\EventDispatcher\Event</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Marc woke up event</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MmoreramWakeUpEvent</span> <span class="k">extends</span> <span class="nx">Event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var boolean</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Marc woke up rested</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$rested</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Construct method</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @var boolean $rested Marc woke up rested</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$rested</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">rested</span> <span class="o">=</span> <span class="nv">$rested</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Get if Marc is rested enough</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return boolean Marc is rested enough</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">isRested</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">rested</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, no one should be able to change the value of rested, because no one
has the <strong>power</strong> to change the fact I woke up tired this night.</p>

<p>The main intention of an event is notify the world that something just happened,
so any extra implementation changing this paradigm should be avoided in order to
not corrupt the real meaning of the component.</p>

<p>Said that, and before continuing with the post&hellip; a question related to this
topic. Just make sure that you can take some time to think about that.</p>

<p>If we talk about decoupling between components&hellip; is the concept of <code>priority</code>
helpful? If any actor must know the priorities of all listeners in order to know
its own&hellip; then can we consider that all event listeners are really decoupled
between them? And how bad is that?</p>

<h2>Collector</h2>

<p>Let&rsquo;s figure out that the system need to collect some feelings when I wake up.
Let&rsquo;s figure out as well that we don&rsquo;t really care about how these feelings are
sorted, so the problem of priority is not a problem anymore: we can ignore it
completely.</p>

<p>We can change our event with this new implementation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">namespace</span> <span class="nx">Mmoreram</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\EventDispatcher\Event</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\Feeling</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Marc woke up event</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MmoreramWakeUpEvent</span> <span class="k">extends</span> <span class="nx">Event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var boolean</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Marc woke up rested</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$rested</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var Feeling[]</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Array of feelings</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$feelings</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Construct method</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @var boolean $rested Marc woke up rested</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$rested</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">rested</span> <span class="o">=</span> <span class="nv">$rested</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">feelings</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Add new feeling</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param Feeling $feeling New feeling to be added</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return $this Self object</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">addFeeling</span><span class="p">(</span><span class="nx">Feeling</span> <span class="nv">$feeling</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">feelings</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$feeling</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Get if Marc is rested enough</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return boolean Marc is rested enough</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">isRested</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">rested</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Get all feelings</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return Feeling[] Set of feelings</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getFeelings</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">feelings</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, in our domain we must dispatch this event one I really wake up (for
example a service called <code>MmoreramVitalActions</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\EventDispatcher\EventDispatcher</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\EventDispatcher\Event</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\MmoreramWakeUpEvent</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Marc vital actions</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MmoreramVitalActions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Marc wakes up</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return Feeling[] Set of feelings resulting of the action of waking up</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">wakeUp</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$rested</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">didMarcRestedProperly</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$eventDispatcher</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventDispatcher</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$event</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MmoreramWakeUpEvent</span><span class="p">(</span><span class="nv">$rested</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$dispatcher</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">dispatch</span><span class="p">(</span>
</span><span class='line'>                <span class="s1">&#39;mmoreram.wake_up&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nv">$event</span>
</span><span class='line'>            <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getFeelings</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Get if Marc rested properly</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return boolean Marc rested properly</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">function</span> <span class="nf">didMarcRestedProperly</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, after dispatching the event you should be able to get all
collected feelings. This means that the one in charge to fulfill this
information related to my feelings should be any event listener interested in
adding it&rsquo;s own related feeling.</p>

<p>For example, an Event Listener will have the responsibility to add a feeling
related to the temperature of my room.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\MmoreramWakeUpEvent</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Marc wake up event listener related to temperature.</span>
</span><span class='line'><span class="sd"> * This class is intended to add a feeling depending on local temperature</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">TemperatureMmoreramWakeUpEventListener</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Marc wakes up listener</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param MmoreramWakeUpEvent $event Marc wake up event</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return $this Self object</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">addTemperatureFeeling</span><span class="p">(</span><span class="nx">MmoreramWakeUpEvent</span> <span class="nv">$event</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$feeling</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getTemperatureFeeling</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">addFeeling</span><span class="p">(</span><span class="nv">$feeling</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Get feeling related to the temperature</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return Feeling Feeling related to temperature</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">function</span> <span class="nf">getTemperatureFeeling</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, you must add this event listener using tags in the Dependency
Injection Symfony configuration.</p>

<p><a href="http://symfony.com/doc/current/reference/dic_tags.html">Using tags for our listeners definition</a></p>

<p>At this point, you can see that maybe this is useful. This is a very easy and
fast collector implementation, but not enough good. The event is not immutable
anymore and you can change if from any event dispatcher, very far from the real
intention of the component.</p>

<h2>Solution</h2>

<p>I am using this approach in order to be as much pragmatic as possible. Of course
this works properly by adding an extra definition and documentation layer, but
I wonder if other people is concerned about that in Symfony.</p>

<p>I don&rsquo;t really think that yet another component called Collector would be
necessary at all unless there is an abstraction between both components (they
share some common things related to the fact of broadcasting and subscribing).</p>

<p>Of course, again, simple theory and personal thoughts brought to the community.
I will continue using this approach even knowing that should be solved using
another one as long as people understand it and is easy to work with.</p>

<p>Feedback and people thoughts will be appreciated, as always :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symfony in Barcelona]]></title>
    <link href="http://mmoreram.com/blog/2015/08/23/symfony-in-barcelona/"/>
    <updated>2015-08-23T17:22:00+02:00</updated>
    <id>http://mmoreram.com/blog/2015/08/23/symfony-in-barcelona</id>
    <content type="html"><![CDATA[<p>Barcelona, one of the best cities in the world.</p>

<p>For you, Symfony lover. Do you know where is Barcelona, right?
Well, this is a call for all Symfony lovers who want something special,
something really different. Amazing people, amazing food and tons and tons of
new experiences with one of the greatest Symfony Communities around the world.</p>

<iframe width="1280" height="720" src="http://www.youtube.com/embed/6DxX1DYHOlk?feature=player_detailpage&VQ=HD720" frameborder="0" allowfullscreen></iframe>


<p>A lot of companies are actually being built in this city, so we really want you
with us. No matter your Symfony expertise, no matter how good you really are&hellip;
in Barcelona only matters one simple thing&hellip; How good you want to be. If you
want to be one of the bests, then Barcelona can be your new home :)</p>

<p>If you want to know more about it, just send an email to Symfony Barcelona User
Group and you will be properly helped to move here with us. The group email is
<a href="&#x6d;&#x61;&#x69;&#108;&#116;&#x6f;&#x3a;&#115;&#121;&#109;&#102;&#x6f;&#x6e;&#x79;&#x62;&#x61;&#114;&#99;&#101;&#108;&#111;&#110;&#97;&#x40;&#x67;&#x6d;&#97;&#x69;&#108;&#46;&#99;&#x6f;&#x6d;">&#115;&#121;&#x6d;&#x66;&#x6f;&#x6e;&#x79;&#x62;&#x61;&#114;&#99;&#x65;&#x6c;&#111;&#x6e;&#97;&#64;&#x67;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;</a></p>

<p>You want to join us, but you don&rsquo;t know it yet :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Re-thinking Event Listeners]]></title>
    <link href="http://mmoreram.com/blog/2015/08/20/re-thinking-event-listeners/"/>
    <updated>2015-08-20T12:27:00+02:00</updated>
    <id>http://mmoreram.com/blog/2015/08/20/re-thinking-event-listeners</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s talk about Event Listeners.
Do you know what an Event Listener is?</p>

<p>Well, if you are used to working with Symfony, then you should know what is
intended for. If you don&rsquo;t, don&rsquo;t hesitate to take a look at the Symfony
documentation.</p>

<p>This post aims to start a small discussion about how an Event Listener should
look like if we really want to keep things decoupled.</p>

<h2>TL;DR</h2>

<ul>
<li>If we place our business logic inside the Event Listeners, we will not be able
to use this logic from other points, for example sending a &ldquo;Order created&rdquo; email
by hand from our Admin using a simple button.</li>
<li>What we could do is place ALL the logic inside a service that ONLY sends that
email, exposing a simple and documented api.</li>
<li>Then, considering that this service is injectable using any Dependency
Injection implementation, we can inject it into the Event Listener.</li>
<li>So, EventListeners are only a point of entry to your service layer</li>
</ul>


<h2>Using Event Listeners</h2>

<p>To understand what I am talking about, let&rsquo;s use an small example to make things
more clear&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Scenario: You buy something in an e-commerce, so, internally, your Cart became 
</span><span class='line'>an Order. Of course, and because user experience is important in that cases, you 
</span><span class='line'>want to send an email to the user with some Order information, so you need to 
</span><span class='line'>send an email to the Customer.
</span><span class='line'>
</span><span class='line'>Problem: You want to create this feature in a very decoupled way, of course. The
</span><span class='line'>e-commerce framework provides you that way, by proposing you an event once the
</span><span class='line'>Order is created. You can access the Order itself and the Customer.
</span><span class='line'>
</span><span class='line'>Solution: Create a new Event Listener object, subscribed to this event called
</span><span class='line'>order.oncreate, and sending that email.</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s see a small example about how this Event Listener should look like. We
will follow the simple way, only focusing about sending that email in a
decoupled way with the action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">OrderEmailEventListener</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * We send an email to the Customer once an order is created</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param OrderOnCreatedEvent $event Event</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">sendEmail</span><span class="p">(</span><span class="nx">OrderOnCreatedEvent</span> <span class="nv">$event</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$order</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getOrder</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$customer</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getCustomer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="sd">/**</span>
</span><span class='line'><span class="sd">         * Send the email</span>
</span><span class='line'><span class="sd">         */</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we could use this configuration in our bundle.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Event Listeners</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="l-Scalar-Plain">project.event_listener.order_created_email</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">My\Bundle\EventListener\OrderCreatedEmailEventListener</span>
</span><span class='line'>        <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="p-Indicator">{</span> <span class="nv">name</span><span class="p-Indicator">:</span> <span class="nv">kernel.event_listener</span><span class="p-Indicator">,</span> <span class="nv">event</span><span class="p-Indicator">:</span> <span class="nv">order.oncreate</span><span class="p-Indicator">,</span> <span class="nv">method</span><span class="p-Indicator">:</span> <span class="nv">sendEmail</span> <span class="p-Indicator">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So this could be a simple implementation. I&rsquo;ve been using it since the beginning
of times as this could be considered a good practice. But, during this time
doing more and more Event Listeners, some questions have come to my mind.</p>

<h2>Decoupling from the Event</h2>

<p>Let&rsquo;s consider that our project has an admin panel. Of course, we should be able
to send this email any time we need (for example, our email server was down
during the order conversion and we must re-send it). Is this possible with this
implementation?</p>

<p>Yes. Let&rsquo;s do this considering that we have injected our EventListener and this
one is accessible locally!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$event</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OrderCreatedEmailEventListener</span><span class="p">(</span>
</span><span class='line'>    <span class="nv">$order</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">$customer</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="nv">$orderCreatedEmailEventListener</span><span class="o">-&gt;</span><span class="na">sendEmail</span><span class="p">(</span><span class="nv">$event</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, this piece of code will really send the email&hellip; but is this
implementation enough right? I don&rsquo;t think so&hellip;</p>

<p>This Event should only be dispatched when the real event happens. It has no
sense to create a new <code>OrderEmailEventListener</code> instance without using the
event dispatcher. This means that, indeed, any Order has been created.</p>

<p>So first of all, creating a new Event out of turn, is not a good practice at
all.</p>

<p>For solving this, We could do that.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">OrderCreatedEmailEventListener</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * We send an email to the Customer once an order is created</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param OrderOnCreatedEvent $event Event</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">sendEmail</span><span class="p">(</span><span class="nx">OrderOnCreatedEvent</span> <span class="nv">$event</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$order</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getOrder</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$customer</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getCustomer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">sendOrderCreatedEmail</span><span class="p">(</span>
</span><span class='line'>            <span class="nv">$order</span><span class="p">,</span>
</span><span class='line'>            <span class="nv">$customer</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * We send an email to the Customer once an order is created, given the </span>
</span><span class='line'><span class="sd">     * order and the customer</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param OrderInterface    $order    Order</span>
</span><span class='line'><span class="sd">     * @param CustomerInterface $customer Customer</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">sendOrderCreatedEmail</span><span class="p">(</span>
</span><span class='line'>        <span class="nx">OrderInterface</span> <span class="nv">$order</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">CustomerInterface</span> <span class="nv">$customer</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="sd">/**</span>
</span><span class='line'><span class="sd">         * Send the email</span>
</span><span class='line'><span class="sd">         */</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then, we could do this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$orderCreatedEmailEventListener</span><span class="o">-&gt;</span><span class="na">sendOrderCreatedEmail</span><span class="p">(</span>
</span><span class='line'>    <span class="nv">$order</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">$customer</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Much better, right?
But is this good enough? No is not.</p>

<h2>Decoupling from the Listener</h2>

<p>We are using an instance of an Event Listener to send an email. Our analysis
could be exactly the same than before&hellip; Should we use an Event Listener even
when an event is not dispatched?</p>

<p>No we should not.</p>

<p>An Event Listener is an event listener. Listens one event, and that should be
all its work. So, we should never inject any event listener, anywhere. Let&rsquo;s do
some refactor here!</p>

<p>First of all, let&rsquo;s isolate our business logic in a new service. This service
will <strong>only</strong> do one thing; sending this email.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">OrderCreatedEmailSender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * We send an email to the Customer once an order is created, given the </span>
</span><span class='line'><span class="sd">     * order and the customer</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param OrderInterface    $order    Order</span>
</span><span class='line'><span class="sd">     * @param CustomerInterface $customer Customer</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">sendEmail</span><span class="p">(</span>
</span><span class='line'>        <span class="nx">OrderInterface</span> <span class="nv">$order</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">CustomerInterface</span> <span class="nv">$customer</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="sd">/**</span>
</span><span class='line'><span class="sd">         * Send the email</span>
</span><span class='line'><span class="sd">         */</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This service has only one mission. Sending this email, no matter what event
executes it, no matter its environment. So if we take a look at what the Event
Listener implementation should look like now&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">OrderCreatedEmailEventListener</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var OrderCreatedEmailSender</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Order created email sender</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$orderCreatedEmailSender</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Constructor</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param OrderCreatedEmailSender $orderCreatedEmailSender</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">OrderCreatedEmailSender</span> <span class="nv">$orderCreatedEmailSender</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">orderCreatedEmailSender</span> <span class="o">=</span> <span class="nv">$orderCreatedEmailSender</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * We send an email to the Customer once an order is created</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param OrderOnCreatedEvent $event Event</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">sendEmail</span><span class="p">(</span><span class="nx">OrderOnCreatedEvent</span> <span class="nv">$event</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$order</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getOrder</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$customer</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getCustomer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">orderCreatedEmailSender</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">sendEmail</span><span class="p">(</span>
</span><span class='line'>                <span class="nv">$order</span><span class="p">,</span>
</span><span class='line'>                <span class="nv">$customer</span>
</span><span class='line'>            <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we should refactor as well the way we have defined our service in the
DependencyInjection config file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Business layer</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="l-Scalar-Plain">project.business.order_created_email_sender</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">My\Bundle\Business\OrderCreatedEmailSender</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Event Listeners</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="l-Scalar-Plain">project.event_listener.order_created_email</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">My\Bundle\EventListener\OrderCreatedEmailEventListener</span>
</span><span class='line'>        <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="err">@</span><span class="l-Scalar-Plain">project.business.order_created_email_sender</span>
</span><span class='line'>        <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="p-Indicator">{</span> <span class="nv">name</span><span class="p-Indicator">:</span> <span class="nv">kernel.event_listener</span><span class="p-Indicator">,</span> <span class="nv">event</span><span class="p-Indicator">:</span> <span class="nv">order.oncreate</span><span class="p-Indicator">,</span> <span class="nv">method</span><span class="p-Indicator">:</span> <span class="nv">sendEmail</span> <span class="p-Indicator">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s all.
This example is so easy and simple, but I am sure that if you take a look at
your project, you will find a lot of logic inside your Event Listeners. Maybe
could be a good idea start moving all this logic out of the box, treating these
listeners as real entry points, like we do with our Commands, Controllers or
Twig extensions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Defeating Expression Language]]></title>
    <link href="http://mmoreram.com/blog/2015/05/18/defeating-expression-language/"/>
    <updated>2015-05-18T09:53:00+02:00</updated>
    <id>http://mmoreram.com/blog/2015/05/18/defeating-expression-language</id>
    <content type="html"><![CDATA[<p>How beautiful Expression Language definitions are, right? I mean, inserting that
complex expressions in a Dependency Injection configuration file is so nice and
fast if you need to inject the result of a method in a service (one of the
multiple examples we can see)</p>

<p>Let&rsquo;s see a simple example of how we use this library.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># My managers</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="l-Scalar-Plain">some_manager</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">This\Is\My\Manager</span>
</span><span class='line'>        <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="err">@</span><span class="l-Scalar-Plain">=service(&quot;another_manager&quot;).someCall(&quot;value&quot;)</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="err">@</span><span class="l-Scalar-Plain">=service(&quot;yet_another_manager&quot;).getInjectableInstance(parameter(&quot;my_parameter&quot;))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is not a bad idea, really, but because we are engineers and we should have
as much information as possible in order to be able to choose between the best
option, always, I will show you another way of defining this piece of code.</p>

<p>Let&rsquo;s do that!</p>

<h3>Factories</h3>

<p>Remember the <a href="http://mmoreram.com/blog/2013/12/23/factory-pattern-in-symfony2/">Factory pattern in Symfony2</a>
post I wrote some time ago? I talked about how this pattern can be implemented
in your Symfony projects.</p>

<p>Well, just for your information, most of your Expression Language definitions
can be nicely done using Factories.</p>

<p>Let&rsquo;s reproduce the same example using factories.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># My managers</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="l-Scalar-Plain">some_manager</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">This\Is\My\Manager</span>
</span><span class='line'>        <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="err">@</span><span class="l-Scalar-Plain">my_injectable_value</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="err">@</span><span class="l-Scalar-Plain">my_injectable_service</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">my_injectable_value</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">StdClass</span>
</span><span class='line'>        <span class="l-Scalar-Plain">factory</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="err">@</span><span class="l-Scalar-Plain">another_manager</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">someCall</span>
</span><span class='line'>        <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">value</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">my_injectable_service</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">This\Is\My\Injectable\Class</span>
</span><span class='line'>        <span class="l-Scalar-Plain">factory</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="err">@</span><span class="l-Scalar-Plain">yet_another_manager</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">getInjectableInstance</span>
</span><span class='line'>        <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="err">%</span><span class="l-Scalar-Plain">my_parameter%</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dependency</h3>

<p>Take a look and realise that we&rsquo;ve removed a package dependency from your
project, as you don&rsquo;t need <code>symfony/expression-language</code> anymore, and your DIC
definition will be easily exportable to another format if someday is needed.</p>

<h3>Reflexion</h3>

<p>Is Expression Language a bad choice? Well, only you should be able to know if
using this library is a good choice or not, because only you know your needs and
your resources, but every time you add a new Expression Language line, just ask
yourself&hellip;</p>

<p>Can I use simple DI definitions here? Is the only way I can do that?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crowdfunding Soundtrack - El Evento]]></title>
    <link href="http://mmoreram.com/blog/2015/05/08/crowdfunding-soundtrack-the-event/"/>
    <updated>2015-05-08T17:29:00+02:00</updated>
    <id>http://mmoreram.com/blog/2015/05/08/crowdfunding-soundtrack-the-event</id>
    <content type="html"><![CDATA[<blockquote><p>This post is written in Spanish, but I will translate it soon. Stay tuned for
the translation :D</p></blockquote>

<p>Finalmente, y después de unas semanas cociendo la idea, valorando pros y contras
y el impacto que puede tener en mi vida personal lo que os voy a contar, he
decidido tirar para delante la idea más estúpida que se me ha podido ocurrir en
los 29 años de edad que tengo.</p>

<p>En pocas palabras, a modo introductorio y declarativo.</p>

<p>La idea es hacer una iniciativa CrowdFunding durante un periodo de 3 meses y
conseguir el dinero suficiente para cumplir los siguientes objetivos.</p>

<ul>
<li>Dado una <a href="http://open.spotify.com/user/mmoreramerino/playlist/76u4iXLIFxO3PMFWfwYk5A">lista de spotify</a>
donde he agrupado mis temas favoritos de bandas sonoras, que una Orquestra
Sinfónica interprete los temas en un evento público.</li>
<li>Yo, por mi parte, estudiar durante un periodo de tiempo dirección de orquestra
básico. Evidentemente lo justo para entender los conceptos necesarios y
defenderme.</li>
<li>Dirigir yo, personalmente, uno de los temas.</li>
<li>Donar absolutamente todo el dinero que se recaude en el evento (entradas,
dinero que no se haya gastado después de la iniciativa) al desarrollo y la
investigación de la sordera. Aún estoy buscando organización, universidad o
instituto.</li>
<li>Cumplir uno de mis retos personales, y con ello, ayudar a que otros cumplan
los suyos.</li>
</ul>


<p>Si en este punto sigues leyendo sin pensar que estoy mal de la cabeza,
recapacita; lo estoy. Aún así, eso no debería impedir que uno haga lo que
realmente quiere hacer, pues <em>que seríamos sin sueños estúpidos, solo estúpidos
sin sueños</em>.</p>

<h2>Los temas musicales</h2>

<p>Podéis encontrar el enlace de la lista de Spotify en el parágrafo anterior (debo
decir que falta un track de &ldquo;La Roca&rdquo; inexistente en Spotify. A continuación
adjunto dicha lista.</p>

<ul>
<li>The chase &ndash; The Rock</li>
<li>I don&rsquo;t think now it the best time &ndash; Pirates of the Caribbean &ndash; At world&rsquo;s end</li>
<li>A dark knight &ndash; The dark knight</li>
<li>Flight &ndash; Man of Steel</li>
<li>Comming back around &ndash; How to train your dragon</li>
<li>Spectres in the fog &ndash; The last samurai</li>
<li>The all spark &ndash; Transformers</li>
<li>My name is Lincoln &ndash; The island</li>
<li>War &ndash; Pearl Harbor</li>
<li>Chevaliers de Sangreal &ndash; The Da Vinci Code</li>
<li>Sound the Buggle now &ndash; Spirit, Stallion of the Cimarron</li>
<li>Run Free &ndash; Spirit, Stallion of the Cimarron</li>
<li>The Wheat &ndash; Gladiator</li>
<li>The Battle &ndash; Gladiator</li>
</ul>


<p>Cada uno de estos temas compone la banda sonora de mi vida.</p>

<h2>Crowdfunding</h2>

<p>Algunos os preguntaréis&hellip; bueno Marc, y todo esto cuanto vale? Pues aún estoy
trabajando en ello, pero es bastante dinero. Calculo que alrededor de unos
200.000 euros para ser específicos.</p>

<p>No tengo aún muy claro como voy a configurar los niveles de colaboración
(hay distintos mínimos de aportaciones, y cada uno de ellos te proporciona un
retorno de cierto nivel. En este caso el retorno será reducido para maximizar el
volumen de donación final)</p>

<p>Lo que si tengo claro es el tipo de público al que va la iniciativa.</p>

<ul>
<li>Patrocinadores &ndash; Empresas que quieran hacer que esto sea posible. Serán los
niveles de patrocinio más altos.</li>
<li>Individuales &ndash; Todo aquel que quiera hacer una donación a la investigación y
quiera que el evento ocurra podrá hacerlo mediante dicho evento. A partir de uno
de los niveles de patrocinio, habrá entrada gratuita al evento.</li>
<li>Aportaciones &ndash; Fuera del evento crowdfunding también se aceptarán donaciones,
aunque es preferible que todas entren por el evento.</li>
</ul>


<h2>La plataforma</h2>

<p>Finalmente, y después de solucionar un dilema mental que tenía entre si hacerlo
internacional o local, he decidido ejecutar el evento a nivel español. Para esto
trataré de utilizar la plataforma <a href="http://www.verkami.com/">Verkami</a> dado que
tengo muy buenas referencias.</p>

<h2>El porqué</h2>

<p>En realidad, últimamente estoy hablando mucho de emprendedores y de intentar
todo aquello que crees que deberías intentar. La idea de hacer eventos me gusta
mucho, de hecho soy organizador de un evento en Barcelona bastante chulo, aunque
local, por el momento.</p>

<p>El hecho también que me guste la música hasta límites indecentes hace que quiera
poner toda la carne en el asador, sin preguntarme demasiado el porqué hago todo
esto. Creo ser un músico frustrado y siempre me quedará el intentar, por todos
los medios posibles e imposibles, cumplir alguno de mis hitos indiscutibles.</p>

<p>El dirigir una orquestra es uno de ellos. Desde hace muchos años.</p>

<p>Y como he dicho alguna vez, el mejor consejo que me han dado nunca en mi vida ha
sido &ldquo;No lo intentes&rdquo;, por lo que, haciendo caso omiso a las personas vacías de
locura, no lo voy a intentar, lo voy a hacer.</p>

<h2>Próximos pasos</h2>

<ul>
<li>En unos días voy a colgar la iniciativa en Verkami.</li>
<li>Hacer ruido. Mucho ruido. Demostrar que todo es posible.</li>
<li>Buscar organización o similar para donar todo el dinero ganado.</li>
<li>Trabajar bien el evento y todas las piezas componen organizar un
acontecimiento de estas características.</li>
<li>Encontrar un grupo de gente motivada con la idea que quiera ayudarme una vez
se cierre la iniciativa con resultado positivo.</li>
<li>Seguir trabajando en la idea, hasta el final.</li>
</ul>


<p>Si quieres estar actualizado sobre el evento, puedes seguir-me en
<a href="http://twitter.com/mmoreram">Twitter</a> o suscribirte a mi blog, desde donde voy
a escribir de forma periódica todas las actualizaciones sobre el evento.</p>

<p>Saludos a todos.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lazy Commands in Symfony]]></title>
    <link href="http://mmoreram.com/blog/2015/05/08/lazy-commands-in-symfony/"/>
    <updated>2015-05-08T11:04:00+02:00</updated>
    <id>http://mmoreram.com/blog/2015/05/08/lazy-commands-in-symfony</id>
    <content type="html"><![CDATA[<p>Have you ever had this scenario?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>php app/console doctrine:database:drop --force
</span><span class='line'><span class="nv">$ </span>php app/console doctrine:database:create
</span><span class='line'>
</span><span class='line'>    <span class="o">[</span>Doctrine<span class="se">\D</span>BAL<span class="se">\E</span>xception<span class="se">\C</span>onnectionException<span class="o">]</span>
</span><span class='line'>    An exception occured in driver: SQLSTATE<span class="o">[</span>42000<span class="o">]</span> <span class="o">[</span>1049<span class="o">]</span> Unknown database <span class="s1">&#39;mydatabase&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, it happens and I will tell you why.</p>

<h2>Command as a Service</h2>

<p>Since Symfony version 2.4 you can define your controllers and commands as
services. This is so useful as long as you need to treat your classes as much
decoupled as possible. You can check some information about how to define them
as services in
<a href="http://symfony.com/doc/current/cookbook/console/commands_as_services.html">Symfony Documentation</a>.</p>

<p>Then, let&rsquo;s figure out that our command is intended to check an entity from your
database. Of course, your command should be as empty as possible, placing all
your business logic inside your service layer (this is not the only strategy, of
course, but there is no strategy where you lace your logic inside your command).</p>

<p>Then, using commands as services, you will have this</p>

<ul>
<li>ObjectManager as a service (or Repository)</li>
<li>Your service, intended to do whatever you need to do, for example, check that
your entities are all enabled. Your ObjectManager or Repository will be injected
here</li>
<li>Your command, intended to work as the simple layer between your cli interface
and your service layer. Your service will be injected here.</li>
</ul>


<p>Given this schema, when we require this command through the DI Container, of
course a new Service instance will be created in order to inject it through the
command constructor, and the object will have to be created as well to be
injected inside the service.</p>

<p>It means create a new connection to the database. Fair enough till now :)</p>

<h2>Commands list</h2>

<p>Let me show you some lines of code. This method is placed in a class called
<code>Application</code> inside the bundle <code>FrameworkBundle</code>. This class is intended to add
the possibility of adding Commands as services in the main Application class of
Command Component.</p>

<p><a href="https://github.com/symfony/symfony/blob/2.7/src/Symfony/Bundle/FrameworkBundle/Console/Application.php">Symfony\Bundle\FrameworkBundle\Console\Application</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">protected</span> <span class="k">function</span> <span class="nf">registerCommands</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$container</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">kernel</span><span class="o">-&gt;</span><span class="na">getContainer</span><span class="p">();</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">kernel</span><span class="o">-&gt;</span><span class="na">getBundles</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$bundle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$bundle</span> <span class="nx">instanceof</span> <span class="nx">Bundle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$bundle</span><span class="o">-&gt;</span><span class="na">registerCommands</span><span class="p">(</span><span class="nv">$this</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$container</span><span class="o">-&gt;</span><span class="na">hasParameter</span><span class="p">(</span><span class="s1">&#39;console.command.ids&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$container</span><span class="o">-&gt;</span><span class="na">getParameter</span><span class="p">(</span><span class="s1">&#39;console.command.ids&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="nv">$id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$container</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="nv">$id</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oh, wait&hellip; what?</p>

<p>Register a command means instantiate it! So if we have a command with a service
injected which has an object manager injected&hellip; then we have a problem. If we
don&rsquo;t have the database created we will not be able to create it using the
Doctrine command.</p>

<p><em>~ironic~ Perfect scenario for deployment ~/ironic~</em></p>

<h2>Using Lazy services</h2>

<p>Of course we should find a solution for this scenario, in order to be able to
call this command when is needed.</p>

<p>When we define as lazy a service, this is not instanced when is injected, but
only when is accessed. You can find some information about lazy services in
<a href="http://symfony.com/doc/current/components/dependency_injection/lazy_services.html">Symfony Documentation</a>.</p>

<p>The point here is to define our service intended to work with the model as lazy.
The result will be that when we instance the Command, then a proxy object is
created and injected with all the service information.</p>

<p>Because our command will not be used as long as we don&rsquo;t need it, then the
service will not be instanced and the ObjectManager not created. We will be able
to list all the commands, and finally, call
<code>php app/console doctrine:database:create</code> properly.</p>

<h2>Implementation</h2>

<p>Some tips here&hellip;</p>

<ul>
<li>Why instancing all services when we just need them to be listed? Is it really
necessary? Doing than we are forcing some service to be defined as lazy just
because of it, and this is not and will never be a good practice.</li>
<li>If the command needs to be instanced to be listed, and assuming that this
information <del>should</del> could be cached, then, is it necessary to call the
constructor? We could get the class, build the object using <code>\ReflectionClass</code>
and request all the needed information.</li>
</ul>


<p>I invoke the community for some feedback on that. If this is really a need for
some people, we should do some push (and organize us for an implementation,
maybe) to change this implementation for next Symfony 3 version.</p>

<p>Feedback, feedback :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Montando a Pau Garcia-Milà]]></title>
    <link href="http://mmoreram.com/blog/2015/05/07/montando-a-pau-garcia-mila/"/>
    <updated>2015-05-07T02:58:00+02:00</updated>
    <id>http://mmoreram.com/blog/2015/05/07/montando-a-pau-garcia-mila</id>
    <content type="html"><![CDATA[<p>Hace apenas unas semanas, en un diario nacional español, aparecía un escrito
inquietante, al menos a simple vista, sobre algunos puntos discutibles alrededor
del ya más que conocido emprendedor Pau Garcia-Milà.</p>

<p><a href="http://www.eldiario.es/hojaderouter/emprendedores/pau_garcia-mila-emprendimiento-EyeOS-Bananity_0_369213079.html">Post original</a></p>

<p>Para los interesados, decir que el propio Pau respondió días más tarde en su
blog, respondiendo a ciertas afirmaciones.</p>

<p><a href="http://paugarciamila.com/desmontando-a-pau-garcia-mila/">Respuesta de Pau</a></p>

<p>En dicho escrito, se analizan algunos de los puntos importantes y críticos por
los que nuestro protagonista ha pasado durante los últimos años, dejando al
lector la tarea de leer a simple vista un gran elenco de comentarios de algunas
personas cuya opinión se les fue requerida, entiendo yo.</p>

<p>Antes de todo decir escuetamente que yo recuerdo a Pau en sus inicios, cuando
empezó a ser un personaje público. Añadir también que, tras un tiempo teniéndolo
en mi <em>top of mind</em> como referencia y recordándolo como
<em>simplemente, brillante</em>, y por alguna razón que no logré entender durante mucho
tiempo, pasó a ser mi <em>vende-humos</em> favorito.</p>

<blockquote><p>Éste no ha hecho nada. Solo habla de ideas. Yo también tengo muchas ideas!
Mirad! Un percebe con alas! Fundemos una empresa que se llame Engonga
associated y conquistemos el mundo. Ah, no, esperad, que con una idea uno no
tiene ni para empezar&hellip; Nada, vuelvo al mundo real, en mi sofá de pensar.</p></blockquote>

<p>Pero gracias a Dios, a veces en la vida te encuentras a grandes personas que te
bautizan de golpe como <em>ex-hater</em>, y te das cuenta que el odio es,
habitualmente, proporcional a la envidia, y quién mejor que una persona a la que
envidias para empezar a admirar.</p>

<p>He aquí mi pequeño paso hacia la redención relativa. Mi objetivo, la completa
madurez. :)</p>

<h3>Reflexiones</h3>

<p>En este post, y como persona emprendedora que creo ser, añado algunas respuestas
a comentarios del post original sin entrar demasiado al detalle.</p>

<blockquote><p>Ha empezado cosas, pero no ha terminado ninguna. Son habilidades distintas.
Creo que es un grandísimo comunicador y tiene éxito con eso, pero como
emprendedor no lo ha demostrado</p></blockquote>

<p>En realidad esta frase es la que más me duele a mi, como emprendedor que soy.
Hace un poco más de un año y medio que trabajo en un proyecto, y siento decir
que, por ahora, no he demostrado nada a nadie. ¿Eso me convierte en menos
emprendedor?</p>

<p>Trabajo un mínimo de 80 horas semanales en un proyecto de código libre de índole
internacional, llevo una comunidad de desarrolladores Web local cuyos eventos
son referenciados en todo el mundo, tengo unos cuantos proyectos personales
también de código libre utilizados en multitud de empresas reales, y en el
tiempo más libre de mi tiempo libre, soy ponente en eventos alrededor del globo.</p>

<p>¿Demostrado? Si se refiere a si he vendido alguna empresa por 20 millones de
euros, pues no&hellip; ¿Emprendedor? Hombre, pues creo que algo si, ¿no?</p>

<p>Debo decir con gran aplomo que ningún emprendedor tiene que demostrar nada a
nadie para serlo, y es que la palabra emprendedor, uno, se la gana con el
trabajo y el sudor, no con los éxitos (y menos midiendo los éxitos en cifras
o en rondas de inversión).</p>

<p>Emprendedor es el que crea sitios de trabajo, el que crea equipos sanos y
empresas con ideales humanos. Emprendedor es quien no se rinde a pesar de sus
innumerables fracasos. Emprendedor es el que tras un &ldquo;No lo vas a conseguir&rdquo; ve
un &ldquo;Debes conseguirlo&rdquo;.</p>

<p>Emprendedor es quien persigue lo que todo el mundo ha dejado por imposible.</p>

<p>Está claro que Pau es un gran comunicador y también está claro que ha tenido
éxito con ello, pero seamos realistas y no nos dejemos llevar por la envidia y
el descontrol: Un chico que a los 28 años ha tratado de levantar 3 empresas (la
cuarta recientemente) y haya vendido una, cuales fueran las condiciones de dicha
transacción y cuya información no me interesa en absoluto, absolutamente nadie
puede tacharle de no ser emprendedor (evidentemente mencionar sus libros,
charlas y todo el ecosistema que ha creado alrededor).</p>

<p>Yo me quito el sombrero, al menos, por haberlo intentado.</p>

<p>Pero está claro que es más simple y fácil entrar en la crítica destructiva y
sensacionalista. Nos alimenta mucho más el ego interior y nos hace sentir más
fuertes a nosotros, seres iluminados. Pero la realidad es que tras la fachada de
un comunicador como Pau hay, en la mayoría de los casos, una mente brillante y
un trabajo constante. Otra cosa es tener interés en conocer este trabajo y
valorarlo como se debe.</p>

<p>Que difícil es hacer esto.</p>

<blockquote><p>pero hay grandes emprendedores en España que son menos mediáticos. Mi
experiencia me dice que el éxito de un emprendedor es inversamente
proporcional a sus seguidores en Twitter. No suele ser mediático.</p></blockquote>

<p>El número de seguidores que tiene una persona en Twitter es directamente
proporcional a varios elementos, como el campo en que esta persona haya decidido
ser emprendedor (no es lo mismo un químico que un informático) o el carácter
comunicativo que dicha persona tenga en su personalidad (No es lo mismo una
persona expansiva y sociable que una persona itrovertida y tímida).</p>

<p>Algunos ejemplos rápidos.</p>

<ul>
<li>Bill Gates, co-fundador de Microsoft, <strong>21.8 millones</strong> de followers</li>
<li>Steve Wozniak, co-fundador de Apple, <strong>402 mil</strong> followers</li>
<li>Elon Musk, fundador de Tesla y PayPal, <strong>2.06 millones</strong> de followers</li>
<li>Jimmy Wales, fundador de Wikipedia, <strong>110 mil</strong> followers</li>
<li>Charles W. Hull, inventor de la impresora 3D (nada, es posible que solo
revolucione el modelo industrial en los próximos años)&hellip; <strong>0</strong> followers</li>
<li>Steve Chen, co-fundador de Youtube, <strong>3599</strong> followers</li>
</ul>


<p>Podría seguir, pero carece de sentido categorizar a estos emprendedores como
ejemplos de qué es tener poco éxito&hellip; Personas como ellas hacen que la sociedad
avance en campos como la medicina, la tecnología o el bienestar.</p>

<p>Evidentemente esto no quita que hay emprendedores de éxito abismal que, por
decisión propia, han preferido quedarse en segundo plano en temas sociales. Y
esta es una decisión igual de factible, correcta e indiscutible que cualquier
otra.</p>

<blockquote><p>Tenemos que animar con credibilidad. Lo bueno es que nos fijemos en los que ya
han tenido éxito, porque es lo que cuenta: si no, se genera la sensación de
que esto no es serio</p></blockquote>

<p>Comentario propio del que lo tuvo todo muy fácil.</p>

<p>Precisamente la gente necesita ver a personas que lo intentan a pesar de que las
cosas van en contra, y aceptar que fallar nos hace aún más humanos. La
credibilidad se demuestra con los caminos que uno hace a lo largo de su vida, la
credibilidad la marca la honestidad y la ley del esfuerzo, sea cual sea el
resultado final.</p>

<p>Adjudicar seriedad al grado de éxito es, a mi parecer, una falta de respeto para
los que aún no hemos conseguido nada, aún lo intentemos con todas nuestras
fuerzas. Y lo que me parece más grave, me parece una falta de respeto
innecesaria, un comentario fuera de lugar y una doctrina tóxica para una
sociedad desanimada y desorientada como es la nuestra.</p>

<p>Reflexión, por favor.</p>

<h3>Conclusión</h3>

<p>Emprendedor, no emprendedor. Da igual, lo importante para una sociedad es el
esfuerzo. Hable en público, tenga seguidores en Twitter o toque la pandereta con
los ojos cerrados y en sol sostenido, son elementos personales, injuzgables más
allá de uno mismo, y menos cuando el impacto social es positivo, mires por donde
lo mires.</p>

<p>Repito una frase con la que empezaba mi post dado que encuentro interesante y
reveladora.</p>

<blockquote><p>el odio es, habitualmente, proporcional a la envidia, y quién mejor que una
persona a la que envidias para empezar a admirar</p></blockquote>

<p>Mi consejo siempre es el mismo. Que el miedo a intentar cosas no os impida no
hacerlas, y que simplemente os hagan más cautos. No os dejéis llevar por la
mediocridad social a la hora de juzgar a personas que trabajan por su futuro y
sed críticos más allá de 4 medios de comunicación de intenciones puramente
marketinianas.</p>

<p>Dicho esto, sed felices y volad cometas.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visithor, testing your routes without pain]]></title>
    <link href="http://mmoreram.com/blog/2015/05/04/visithor/"/>
    <updated>2015-05-04T13:11:00+02:00</updated>
    <id>http://mmoreram.com/blog/2015/05/04/visithor</id>
    <content type="html"><![CDATA[<p>Do you like testing? I like testing. Well, in fact I like testing once I have
understood how the engine I am using works. Until this moment, everything is a
completely disaster.</p>

<p>And because this learning curve, many of my personal projects have reached an
MVP without any type of testing environment. And sincerely, I don&rsquo;t really like
this scenario.</p>

<p>Many years ago I was thinking about a <strong>simple</strong> and fast tool to test specific
routes, expecting specific HTTP codes and providing an easy environment of
ensuring properly your HTTP layer.</p>

<p>So&hellip; I present you <a href="http://github.com/visithor/visithor">Visithor</a>, a PHP based
library that provides you this functionality, with a simple configuration
definition and a very easy way of installation.</p>

<p>Let&rsquo;s see an example.</p>

<h2>Execute Visithor</h2>

<p>With this lines of code you will download Visithor, ready to be used.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone git@github.com:visithor/visithor.git
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>visithor
</span><span class='line'><span class="err">$</span>
</span><span class='line'><span class="nv">$ </span>build/visithor.phar
</span></code></pre></td></tr></table></div></figure>


<p>You can download it as a global executable</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone git@github.com:visithor/visithor.git
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>visithor
</span><span class='line'><span class="nv">$ </span>cp build/visithor.phar /usr/local/bin/visithor
</span><span class='line'><span class="err">$</span>
</span><span class='line'><span class="nv">$ </span>visithor
</span></code></pre></td></tr></table></div></figure>


<h2>Creating your configuration</h2>

<p>As easy as it seems. This is a random configuration file with a random set of
urls. If your <code>visithor.yml</code> file is placed in the same folder than you are,
then you don&rsquo;t have to specify its location. Otherwise, please use the
<em>[&mdash;config|-c]</em> option.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># This value can be a simple HTTP Code or an array of acceptable HTTP Codes</span>
</span><span class='line'>    <span class="c1"># - 200</span>
</span><span class='line'>    <span class="c1"># - [200, 301]</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="l-Scalar-Plain">http_codes</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">200</span><span class="p-Indicator">,</span> <span class="nv">302</span><span class="p-Indicator">]</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">urls</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># By default, is there is no specified HTTP Code, then default one is used</span>
</span><span class='line'>    <span class="c1"># as the valid one</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">http://google.es</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">http://elcodi.io</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># There are some other formats available as well</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="p-Indicator">[</span><span class="nv">http</span><span class="p-Indicator">:</span><span class="nv">//shopery.com</span><span class="p-Indicator">,</span> <span class="nv">200</span><span class="p-Indicator">]</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="p-Indicator">[</span><span class="nv">http</span><span class="p-Indicator">:</span><span class="nv">//mmoreram.com</span><span class="p-Indicator">,</span> <span class="p-Indicator">[</span><span class="nv">200</span><span class="p-Indicator">,</span> <span class="nv">302</span><span class="p-Indicator">]]</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="p-Indicator">[</span><span class="nv">http</span><span class="p-Indicator">:</span><span class="nv">//nonexistingurl.com</span><span class="p-Indicator">,</span> <span class="p-Indicator">[</span><span class="nv">200</span><span class="p-Indicator">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, the execution result is <em>0</em></p>

<h2>Executing Visithor</h2>

<p>Once you have it installed and you have a configuration file, let&rsquo;s see what
happens!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">$ visithor visithor:go</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Visithor by Marc Morera and contributors.</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Configuration read from /var/www/my/project</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">OK [200] http://google.es</span>
</span><span class='line'><span class="l-Scalar-Plain">OK [200] http://elcodi.io</span>
</span><span class='line'><span class="l-Scalar-Plain">OK [200] http://shopery.com</span>
</span><span class='line'><span class="l-Scalar-Plain">OK [200] http://mmoreram.com</span>
</span><span class='line'><span class="l-Scalar-Plain">KO [404] http://nonexistingurl.com</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Time</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1002 ms, Memory</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">15.5Mb</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, we have an error. We expect a <code>200</code> code when we call
<code>http://nonexistingurl.com</code> but the real response is <code>404</code>, so it fails. Then,
the execution result is <em>1</em>.</p>

<h2>Integrations</h2>

<p>You can integrate Visithor with your Symfony projects right now. I expect some
other integrations will be available soon.</p>

<ul>
<li><a href="http://github.com/Visithor/VisithorBundle">VisithorBundle</a></li>
</ul>


<p>If you use this bundle, then you will be able to define your routes not with the
final path but with the route name and a bunch of parameters, as it is shown
here.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># This value can be a simple HTTP Code or an array of acceptable HTTP Codes</span>
</span><span class='line'>    <span class="c1"># - 200</span>
</span><span class='line'>    <span class="c1"># - [200, 301]</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="l-Scalar-Plain">http_codes</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">200</span><span class="p-Indicator">,</span> <span class="nv">302</span><span class="p-Indicator">]</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">urls</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># This Bundle adds some extra formats</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="p-Indicator">[</span><span class="nv">store_homepage</span><span class="p-Indicator">,</span> <span class="nv">200</span><span class="p-Indicator">]</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="p-Indicator">[[</span><span class="nv">store_category_products_list</span><span class="p-Indicator">,</span> <span class="p-Indicator">{</span><span class="s">&#39;slug&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;women-shirts&#39;</span><span class="p-Indicator">,</span> <span class="s">&#39;id&#39;</span><span class="p-Indicator">:</span> <span class="nv">1</span><span class="p-Indicator">}],</span> <span class="nv">200</span><span class="p-Indicator">]</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="p-Indicator">[[</span><span class="nv">store_category_products_list</span><span class="p-Indicator">,</span> <span class="p-Indicator">{</span><span class="s">&#39;slug&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;another-name&#39;</span><span class="p-Indicator">,</span> <span class="s">&#39;id&#39;</span><span class="p-Indicator">:</span> <span class="nv">1</span><span class="p-Indicator">}],</span> <span class="nv">302</span><span class="p-Indicator">]</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="p-Indicator">[[</span><span class="nv">store_homepage</span><span class="p-Indicator">,</span> <span class="p-Indicator">{</span><span class="nv">_locale</span><span class="p-Indicator">:</span> <span class="nv">es</span><span class="p-Indicator">}]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This project is being so useful for me, I expect it will be for you as well :)</p>

<h2>Travis</h2>

<p>Of course, you can add Visithor in your travis tests suite. You can use the
[&mdash;format|-f] option to change the format and use <em>dots</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">bin/behat -fprogress --tags=&quot;~javascript&quot;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">bin/phpunit -c app</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">bin/visithor --format=dots visithor:go</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Behat and data-test]]></title>
    <link href="http://mmoreram.com/blog/2015/04/25/behat-and-data-test/"/>
    <updated>2015-04-25T16:31:00+02:00</updated>
    <id>http://mmoreram.com/blog/2015/04/25/behat-and-data-test</id>
    <content type="html"><![CDATA[<p>Tests should be as robust as possible.</p>

<p>I think you will agree with me with that phrase. If your tests are too coupled
with your implementation, a simple modification of your code will need the
modification of your tests, and that&rsquo;s so annoying, right?</p>

<p>I&rsquo;ve using Behat for the last months in my projects, and as soon as you dominate
the tool it becomes really useful to make sure that any future refactoring or
change will break these user stories you have already defined and tested.</p>

<p>So, thinking about coupling I saw this method in Behat implementation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Presses button with specified id|name|title|alt|value.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @When /^(?:|I )press &quot;(?P&lt;button&gt;(?:[^&quot;]|\\&quot;)*)&quot;$/</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">pressButton</span><span class="p">(</span><span class="nv">$button</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What do you think? Do you think that this method helps people to really decouple
the tests from their implementation? I don&rsquo;t really think so&hellip; Let me explain.</p>

<h3>Design v Test</h3>

<p>My question is&hellip; should the frontend of your website be aware of the how your
Behat tests are built? In my opinion, <strong>nope</strong>.</p>

<p>Your tests should live in a simple layout on top of your application, emulating
some cases and ensuring that your users will be able to do what they should be
able to.</p>

<p>Said this, you cannot build your tests depending on final implementation. So,
whats the problem there?</p>

<h3>HTML Properties</h3>

<p>Dear backend. Between you and me&hellip; we have nothing to do with some html
properties, and you know that&hellip; This is the frontend world and we have nothing
to say about that :)</p>

<p>So why referring to html property <code>id</code> in your Behat cases? It has no sense
indeed. You will need to change <strong>all</strong> your tests every time your frontend
says&hellip; <em>refactoring time!!</em>, and we have no enough time for this, right?</p>

<p>So&hellip; first property strikethrough.</p>

<h3>Translations</h3>

<p>Dear backend (again, yes). Between you and me&hellip; we have neither nothing to do
with translations, and we both know as well that translations is something
really changeable (that means evolving&hellip; so yes, that are good news indeed), so
how about coupling your fantastic tests to translations?</p>

<p>How do you really know that your submission button copy will be always <code>send</code>?
What if someone thinks that is better <code>submit</code>? The point is that you <strong>don&rsquo;t</strong>
know that, and you will never do.</p>

<p>If you don&rsquo;t want to do that, please, don&rsquo;t use <code>title</code>, <code>alt</code> nor <code>value</code>. All
these html properties are very used to changing if you use them properly, so if
you have your site in several countries with some modifications, you will not be
able to reuse any scenario.</p>

<p>Bad choice again.</p>

<h3>Symfony Forms</h3>

<p>We still have the <code>name</code> property, a very important property for forms and
references inside your DOM. In fact, too much important to be an starting point
for your test cases.</p>

<p>For example, you can fill a value in a Symfony Form input, but you know what?
Symfony Forms define themselves how their forms are named, in order to know how
to build them again after submitting them.</p>

<p>If you use <code>name</code> property, and for example you have different teams for
developing your applications and for testing them, you will add an extra and
useless coupling layer between them. This means more <em>points of failure</em> and, at
the end, less agility.</p>

<p>Not valid.</p>

<h3>So what?</h3>

<p>Well, this is a <em>problem</em> really easy to solve. Have you ever meet the property
<code>data-test</code>? You can build any property starting with <code>data-</code> and will be okay.
So, in that case you can safely reference your elements using it.</p>

<ul>
<li>Your front-ends have nothing to do with it. They will see <code>data-test</code> and will
know that they belong to the testing layer. Then, they will ignore it, and even
if they decide to refactor a page, they will preserve this property (if they
can and want, of course) and your tests will not have any reason to expire.</li>
<li>Your tests will have nothing to do with translation, product people and other
tactical nor strategical changes.</li>
<li>People of your team will now have a unique way of referencing visible elements
of your application.</li>
</ul>


<p>That&rsquo;s so nice!</p>

<h3>Implementation</h3>

<p>Well, after this analysis, I propose to add <code>data-test</code> in all pre-defined
selectors in order to allow people to uncouple from implementation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Presses button with specified id|name|title|alt|value|data-test.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @When /^(?:|I )press &quot;(?P&lt;button&gt;(?:[^&quot;]|\\&quot;)*)&quot;$/</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">pressButton</span><span class="p">(</span><span class="nv">$button</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Please, I would like to have some feedback, specially if you are used to working
with Behat or any kind of Behavioral Testing Tool.</p>

<p>Thanks and enjoy your day!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflexiones de un pequeño emprendedor]]></title>
    <link href="http://mmoreram.com/blog/2015/04/05/reflexiones-de-un-pequeno-emprendedor/"/>
    <updated>2015-04-05T01:58:00+02:00</updated>
    <id>http://mmoreram.com/blog/2015/04/05/reflexiones-de-un-pequeno-emprendedor</id>
    <content type="html"><![CDATA[<p>Ya hace un poco más de un año que estoy a bordo de este proyecto llamado Elcodi.
Para los que no conozcáis el proyecto, solo unas simples pistas&hellip;</p>

<ul>
<li>E-commerce</li>
<li><a href="https.//symfony.com">Symfony</a></li>
<li><a href="https://github.com/elcodi/elcodi">Elcodi</a></li>
</ul>


<p>Hace bastantes semanas que tenía ganas de formular una entrada al blog de
éste índole. Normalmente intento hacer mis posts en inglés, pero me pareció
adecuado hacer éste en español, dado que lo hago desde una perspectiva más de
emprendedor que no de técnico.</p>

<blockquote><p>Debo decir brevemente que no me gusta la palabra &ldquo;emprendedor&rdquo;. Durante los
últimos años se le ha dado un significado demasiado Trending y se le ha
asociado a figuras de visibilidad pública. Desde mi punto de vista,
emprendedor es aquel que se desvive por su trabajo, sea cual sea, y que lo
entiende como una forma de vida. Utilizaré esta palabra desde esta perspectiva</p></blockquote>

<p>Os quiero contar de forma bastante breve lo que, después de éste tiempo,
considero son algunos puntos importantes de un emprendedor.
Considerando que soy una persona formada de forma pura en el mundo técnico y que
he experimentado una transición un poco brusca hacia el mundo de la
emprendeduría empresarial, quiero dejar claro que estos son mis puntos de vista
dada mi trayectoria, por lo que es probable que algunos no sean mundialmente
compartidos por todos.</p>

<h3>La Idea</h3>

<p>Tengo la sensación que se le asigna demasiado valor a la idea. Como se suele
decir, la idea no vale <strong>nada</strong>. Una semilla tal vez, nada más. El auténtico valor
reside en considerar ésta misma idea importante durante el tiempo adecuado. El
mérito está en mantener la expectativa y la motivación en su punto más álgido lo
suficiente como para que la ejecución tome la mínima forma como para que sea
algo real.</p>

<p>Es en este punto es donde te das cuenta que lo más fácil en realidad fue tener
dicha idea, y que lo más cómodo hubiera sido dejar de lado la motivación para
hacer algo más significativo a corto plazo.</p>

<p>El auténtico emprendedor entiende de raíz que dicho esfuerzo, con su parte
proporcional y proporcionada de suerte, ayuda y café, siempre acaba siendo más
rentable para todo el mundo a largo plazo.</p>

<h3>El Desarrollo</h3>

<p>Todo proceso que te lleva de la mano de ésta idea amorfa hasta la definición y
ejecución de la misma requiere un esfuerzo que, en la mayoría de los casos, te
aísla de forma inconsciente de todo lo demás.</p>

<blockquote><p>Quien dice emprendedor, dice luchador
Luchador cuya soledad le invade en su lucha
Y en medio del silencio oye su respiración
Y entiende su existencia</p></blockquote>

<p>Es un gran ejercicio de descubrimiento personal. Te das cuenta de lo que puedes,
de los que sabes y de lo que eres capaz. Y cuando crees que no puedes saber más,
te das cuenta que apenas sabes nada. Aprendes a aprender mientras aprendes a
desaprender.</p>

<p>Hasta aquí un intento descarado y fracasado de poesía. Ahora vuelvo a la simple
y terrenal prosa, más digna de mi focalizado potencial&hellip;</p>

<p>Ha sido el año más duro y a la vez delicioso de mi carrera profesional. He
aprendido a lidiar con mentes completamente distintas a la mía, y esto me ha
dado cierta capacidad de análisis teniendo múltiples puntos de vista, muy
necesario para cualquiera con alguna aspiración empresarial.</p>

<p>Debo decir que a día de hoy sigo sin entender muchas cosas, algo que me hace
seguir siendo lo suficiente ingenuo como para estar demasiado ilusionado por
todo.</p>

<p>De todas formas, el camino sigue, y espero poder seguir teniendo este análisis
absolutamente positivo año tras año&hellip; significará que seguiré en mi lucha por
buscar algo realmente grande, aún habiéndolo encontrado.</p>

<h3>Las Ganas</h3>

<p>Y en éste camino, debo reconocer que el concepto <em>ganas</em>, mundialmente
conocido por <em>motivación</em>, suele experimentar un movimiento sinusoidal más
típico de una montaña rusa del siglo XXI.</p>

<p>Mi único apunte sobre este tema, y es algo que yo he llegado a aprender con el
tiempo, es que una buena técnica para poder sobrevivir a todo esto es teniendo
en cuenta que tu cabeza no tiene siempre la razón. Me refiero a que hay días en
los que los pensamientos negativos parecen la única materia generada por tu
astuto cerebro.</p>

<p>Bien, ignóralo.</p>

<p>¿Días de estos en que, literalmente lo ves todo negro? Bien, quédate en
casa, tómate un respiro y descansa. Te darás cuenta que ignorando estos
pensamientos darás paso de nuevo a otros mejores. Seguro que el día siguiente
puedes seguir como si nada.</p>

<p>Debo decir que a mi me funciona. Mis ganas suelen regenerarse después de un alto
desgaste debido a una frenética entrega o a una época difícil.</p>

<h3>El Equipo</h3>

<p>Y a todo esto hay que añadirle el ingrediente más importante.</p>

<p>El equipo.</p>

<p>De manual. Esta frase suele salir de forma prefabricada de la boca de cualquier
persona que quiera ser algo trending. De todas formas, siempre he pensado que
había otra forma de hacer las cosas que se saliera un poco de la tradicional a
la que nos tienen acostumbrados.</p>

<p>Debo decir que soy de ideas fuertes, y desde que salí de la carrera y durante
mi <em>corta</em> trayectoria profesional me he cruzado con líderes y con jefes. Debo
añadir de forma categórica que hubiera seguido a los líderes hasta los confines
del fracaso, mientras que no hubiera dedicado un solo segundo a buscar el éxito
al lado de ningún jefe.</p>

<p>Y es que los líderes hacen girar el mundo. O dicho mejor, los líderes hacen que
todos hagamos girar el mundo de una forma optimista y valiente.</p>

<p>Dicho esto, y tras haberme cruzado con un poco de todo, decidí que era hora de
poner a prueba mis teorías. El mejor equipo hace la mejor empresa, y para que
sea así, la mejor empresa debe tener el mejor equipo. Y debo reconocer que, si
de por sí no es nada fácil buscar gente para un equipo potente, menos lo es si
tienes en cuenta ciertos parámetros de convivencia, motivación y encaje.</p>

<p>Con el tiempo me he dado cuenta que algo merece gran cantidad de mi fuerza vital
y esfuerzo es buscar un equipo con el que pasar las horas disfrutando de mi
trabajo. Éste equipo será tu mano derecha y tu mano izquierda. Será tu apoyo en
los mejores y peores momentos, y será tu mayor crítico cuando necesites de una
voz sincera y dura.</p>

<p>Mi equipo.</p>

<p>El mejor equipo del mundo.</p>

<h3>Conclusión</h3>

<p>Como podéis ver, y termino, Elcodi es un proyecto sano. Debo reconocer que estoy
abrumado por el equipo humano que tenemos en la empresa. Nuestra máxima
prioridad es que en el día a día del equipo sea lo más agradable posible, y que
el trabajo se convierta en algo realmente fascinante.</p>

<p>Por mi parte estoy satisfecho por todo, con perspectivas de incalculable valor y
rodeado de, literalmente, los mejores compañeros de viaje que uno podría tener.</p>

<p>Mucha suerte y mucha fuerza a todos los que habéis decidido que el camino más
largo y duro es el que mejor encaja en vuestra vida. Os mando mi energía y mis
mayores deseos de éxito.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PDD Manifesto]]></title>
    <link href="http://mmoreram.com/blog/2015/01/10/pdd-manifesto/"/>
    <updated>2015-01-10T18:40:00+01:00</updated>
    <id>http://mmoreram.com/blog/2015/01/10/pdd-manifesto</id>
    <content type="html"><![CDATA[<p>Hi everyone.</p>

<p>I&rsquo;ve been talking about PDD for a while. Pragmatism-Driven Development, a
methodology that takes in account the development environment and the
circumstances before of deciding the tools and the architectural decisions of
your projects.</p>

<p><a href="http://mmoreram.com/blog/2014/10/26/pdd-pragmatic-driven-development-english/">Pragmatic Driver Development</a></p>

<p>Some people asked me for the manifesto. And because I think that some people
will appreciate another way of doing things more realistic, I started the first
draft of that manifesto some time ago.</p>

<p>After discussions with the ecosystem where I work, finally, I can release the
first version of the manifesto.</p>

<p>These are just some ideas, not a dogma, so please, don&rsquo;t use them as the only
way of doing things, making the same mistake again and again.</p>

<p>I will appreciate as well your constructive comments, so the real objective of
that kind of things are, indeed, to make people more comfortable with their
projects.</p>

<p>The more useful projects, the more knowledge shared, the more fun for everyone.</p>

<p>Be happy!</p>

<h2>PDD Manifesto</h2>

<h3>Good practices</h3>

<ul>
<li>All good practice is only good if it is.</li>
<li>A good practice is good, indeed, if the executor knows it enough.</li>
<li>Otherwise, a good practice becomes always a bad practice; Ipso Facto.</li>
</ul>


<h3>Bad practices</h3>

<ul>
<li>All bad practice can be accepted, if, and only if, is well known by the executor.</li>
<li>Knowing them means to have a strict control of your current bad practices.</li>
<li>The absence of this control turns any bad practice in a poorly executed project.</li>
</ul>


<h3>Analyzing</h3>

<ul>
<li>Every project must be analyzed according to needs and own tools.</li>
<li>Accepting that these needs and tools are static is accepting their failure.</li>
<li>Starting a project destined to fail is the worst practice of all.</li>
</ul>


<h3>Evolving</h3>

<ul>
<li>These needs can change along the time, so the tools have to change as well.</li>
<li>Internal and staff training is essential for the evolution of a team, and therefore a project.</li>
<li>All components of such team must evolve to self-acceptance and practice of good practices.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SymfonyWalk - c'est fini]]></title>
    <link href="http://mmoreram.com/blog/2014/11/25/symfony-walk-ends/"/>
    <updated>2014-11-25T12:13:00+01:00</updated>
    <id>http://mmoreram.com/blog/2014/11/25/symfony-walk-ends</id>
    <content type="html"><![CDATA[<p>90Km walked in 3 days. And it&rsquo;s over.</p>

<p>I&rsquo;ve been walking through amazing and gorgeous places during the last 3 days. I
had in mind going to Madrid, but I&rsquo;ve had two important problems.</p>

<ul>
<li>My feet. This is one of my problems. My feet. What&rsquo;s wrong with you?!</li>
<li>The next section was 42km, through the mountain and with any place where to
sleep. No hotels, no hostels, no nice people offering her house. It should not
be a problem, but the real problem has one single name. -6 degrees at night. I
cannot expose myself for sleeping on the street with that cold. All next
sections are like that, after 30-40km walking, nowhere to sleep.</li>
</ul>


<p>I feel disappointed with myself. I had so many expectations I could do that, but
I cannot put myself in danger 1 week before one of my most important moments on
my entirely professional life, to be a speaker in the SymfonyCon, in Madrid. My
fault.</p>

<p>But things happen. And what I wanted to demonstrate to myself is that I can do
that. Yes, sure, with more or less preparation&hellip; but I can do that. Because the
most difficult part of this things is trying them. And then, once tried, you can
fail. Lot of times. You will fail. Even if you don&rsquo;t expect that, you will fail.
But failing is just the beginning of success.</p>

<p>I will stay here, in the middle of nothing, since the SymfonyCon starts. Resting
and enjoying something different than Barcelona. The real world.</p>

<p>I want to thank all the people around the world that has encouraged me on this
event. I&rsquo;ll try again soon. Once and again till I achieve my goal. And once
achieved, I will go on with another goal. Because this is life, my friends, goal
after goal.</p>

<p>Looking forward to see you all in Madrid, this is going to be a great great
event.</p>

<p>PD: Ryan, my friend, I will also take a plane XD</p>
]]></content>
  </entry>
  
</feed>
