<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Because yes]]></title>
  <link href="http://mmoreram.github.io/atom.xml" rel="self"/>
  <link href="http://mmoreram.github.io/"/>
  <updated>2014-04-28T18:35:15+02:00</updated>
  <id>http://mmoreram.github.io/</id>
  <author>
    <name><![CDATA[Marc Morera]]></name>
    <email><![CDATA[yuhu@mmoreram.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Camino hacia Drupal8]]></title>
    <link href="http://mmoreram.github.io/blog/2014/04/28/camino-hacia-drupal8/"/>
    <updated>2014-04-28T16:27:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2014/04/28/camino-hacia-drupal8</id>
    <content type="html"><![CDATA[<p>Debo reconocer que 12 horas de avión son muchas horas. Sobretodo porque, aún
teniendo formas de distraerse ( Asumo de raiz que no se puede dormir&hellip; Podría
enumerar infinidad de razones&hellip; niños gritando, llorando o jugando, asientos
muy pequeños para la gente alta como yo&hellip; ) el reconocido JetLag desgasta toda
la semana posterior al viaje.</p>

<p>El tema es que, a pesar de todo, cuando la razón del viaje no es otra que
conocer compañeros nuevos, conocer una comunidad, una cultura, un país, una
gastronomía, unas costumbres&hellip; cuando la razón es mucho más que un simple
viaje de placer, estas horas pesadas pasan a ser lo de menos.</p>

<p>Hoy he vuelto de México tras una maravillosa semana en el DF, exactamente en el
DrupalCamp México 2014. Mi misión, hablar de Symfony a una comunidad que todavía
no lo tiene claro, viendo como su proyecto evoluciona a otro nivel.</p>

<p>Os pongo en contexto.</p>

<p>Drupal es un proyecto escrito en PHP4. Como wordpress, su core y su filosofía
se basas en un sistema de módulos instalables, reemplazando lo que nosotros
llamamos <em>Event Layer</em> por los ya mas que personalmente olvidados <em>Hooks</em>.
El código está lleno de los llamados Drupalismos, un término creado y designado
a los <em>Coding Standards</em>, tanto en su forma como en su estructura en el cual se
basa todo el proyecto.</p>

<p>Personalmente, muy mejorable.</p>

<p>Quiero aclarar de raiz que todo lo que añado a continuación es una simple
opinión. Mi punto de vista sobre el contexto social que se vive en todo el
continente latinoamericano, y en toda la comunidad Drupal.</p>

<p>Siguiendo con el contexto, la versión estable de drupal actual es la 7. Drupal7
es, ha sido y será la última major release Drupal en lenguaje PHP4,
así que en la nueva versión, Drupal8, algunos módulos de Symfony2 se añadirán
como dependencias. Encontramos algo tan útil como el EventDispatcher ( En
Drupal8 aún coexistirán tanto los Hooks como el EventDispatcher, y en la versión
Drupal9, los hooks se eliminarán de forma completa y permanente ), el Routing,
el HttpFoundation, el HttpKernel, el DependencyInjection&hellip;</p>

<p>Al parecer tal decisión ha dividido la comunidad en dos.</p>

<p>Por un lado tenemos la gente que no quiere pasar a Drupal8, alegando complejidad
demasiado elevada en la transición y un BC completo en ambas versiones. En este
colectivo se ha fundado el proyecto <a href="http://backdropcms.org/">Backdrop</a>, un CMS
evolucionado de Drupal7, con la misma filosofía de arquitectura, y con un cambio
en la forma de trabajar ( Sistema de releases, de features ) y por consiguiente,
con una comunidad estructurada.</p>

<p>Por otro lado tenemos a los que ven a Drupal8 como una posibilidad para
renovarse, para aventurarse en lo desconocido, aprender y resolver aquella deuda
técnica que han generado durante tanto años, apostando tal vez demasiado por la
flexibilidad que propone Drupal desde hace tiempo.</p>

<p>Yo les conocí, a ambos, en el mismo lugar.</p>

<p>En este post quiero defender la evolución de un colectivo, la evolución de
personas que muy honradamente quieren ganarse la vida, y a la par, aprender a
programar utilizando las últimas tendencias en diseño, los patrones más
innovadores, apostando por un modelo sostenible, colaborativo y
completamente escalable.</p>

<p>Yo creo en el crecimiento personal como parte de un crecimiento superior, el de
una comunidad. Les conocí en el Camp y me transmitieron ganas de aprender, ganas
de adquirir conocimientos que, aparentemente, tanto cuesta adquirir. Tengo que
admitir que defender el primer colectivo es una cuestión de mediocridad muy
lícita ( como toda alternativa en el momento que, almenos a uno, le soluciona
un problema ). Defender el mero hecho de no evolucionar, me hace reflexionar
en que tal vez no se den cuenta que solo ellos son capaces de cambiar
el mundo, y estando en sus manos este cambio tan grande, deciden quedarse con lo
que &ldquo;ya funciona&rdquo;. El &ldquo;ya está bien, para que cambiarlo&rdquo; no forma parte de
mi filosofía profesional, y por lo tanto, es imposible que llegue a lidiar
con ella.</p>

<p>Todo gran cambio requiere de un gran sacrificio. Todo gran aprendizaje requiere
un gran cambio, por lo que sacrificarte solo aporta nutrirse de nuevas opciones,
herramientas para el buen escultor, cuya ambición no es otra que tallar la
figura perfecta.</p>

<p>Señores de <em>backdrop</em>, ustedes solo quieren seguir dotando a una comunidad
gigante con un palo de madera para tallar figuras renacentistas. Me parece
ridículo. Me parece prehistórico.</p>

<p>El hombre tuvo que aprender a hacer fuego de una simple rama, y ahora somos una
sociedad avanzada, en gran parte, por que podemos iluminar una habitación oscura
de la forma más primitiva.</p>

<p>Señores de <em>backdrop</em>, ustedes quieren seguir aceptando que PHP4 es válido, y no
lo es. Si fuera por PHP4, si fuera por la negación de la evolución cuando la POO
apareció antaño, hoy en día seríamos incapaces de hablar de Dependency
Injection, de arquitecturas hexagonales y de patrones de diseño avanzados, cuya
función desde el mismo día de su proposición no ha sido otra que hacer
evolucionar al pensador, al escultor, al programador.</p>

<p>Y creo que lo ha conseguido, con creces.</p>

<p>Y es que todo ser humano es simple. Si damos opciones, elige mal. Si proponemos
efectivamente el hecho de seguir siendo mediocre, el ser humano verá en esta
opción su zona de comfort, y no evolucionará.</p>

<p>Por qué no utilizan esta energía para mover masas? Por qué no utilizan esta
fuerza que tan bien utilizan en quejarse, para ser el referente de un pueblo en
su camino hacia un nuevo punto de partida?</p>

<p>Finalmente, un mensaje al desarrollador Drupal indeciso. ¿Por qué teniendo
herramientas para hacer catedrales magníficas, se empeñan en hacer chozas de
madera? ¿Por qué no pasar al siguiente nivel?</p>

<p>Pues exactamente están en esta posición. ¿Acaso se creen que se hallarán solos en
este mar llamado desconocimiento? Tienen la oportunidad de crecer juntos como
comunidad hacia un objetivo común, mejorar, sea como sea. Yo no lo pensaría mas
de dos veces&hellip;</p>

<p>Sean valientes, interés es el pretexto del conocimiento y del éxito, así que les
animo a que den una oportunidad al progreso, a su capacidad, a que
Drupal8 y Symfony sean su tarjeta de embarque para su éxito personal y
profesional, así como un acceso directo a una comunidad proactiva y
colaborativa.</p>

<p>Aquí estaremos los que ya hemos sufrido para que su camino sea un poco más leve.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elcodi, una nueva aventura en Symfony2]]></title>
    <link href="http://mmoreram.github.io/blog/2014/04/17/elcodi/"/>
    <updated>2014-04-17T12:46:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2014/04/17/elcodi</id>
    <content type="html"><![CDATA[<p>Ciertos cambios están por llegar. Y parece ser que son cambios buenos. Llevo
unas cuantas semanas sin escribir en el blog, y la verdad es que me sabe mal.
Me gusta contar cosas que me van sucediendo en la empresa. Problemas que nos
vamos encontrando y soluciones que se me van ocurriendo. El problema es que
llevo unos meses muy centrado en el proyecto que justo hoy lanzamos al mundo.
Es un proyecto inicialmente de desarrolladores para desarrolladores, centrado en
cubrir necesidades reales de los developers destinados a diseñar y
programar ecommerces.</p>

<p>Es cierto que tenemos muchísimas plataformas y opciones para desarrollar
ecommerces alrededor del mundo. Podría enumerar unos cuantos, y probablemente
todos tengan unas métricas y unos KPIs magníficos.</p>

<p>Los problemas de estas plataformas es que son completamente B2B, por lo que tienen sentido cuando
el usuario final simplemente debe tener una buena interfaz de administración,
de instalación y de configuración; y que cuando los departamentos técnicos quieren
desarrollar, tanto horizontalmente ( nuevas funcionalidades de
aquello que ya se está utilizando, o simplemente customizar ) como verticalmente
( nuevas funcionalidades ), estas plataformas B2B se quedan
cortas, por lo que la empresa tiene que desembolsar una cantidad enorme de
dinero en un refáctoring, o simplemente, se debe empezar a todar el código
existente, ensuciándolo y haciendo peligrar su integridad.</p>

<p>Estas plataformas no suelen estar testeadas, por lo que cada línea que se añade
es una línea potencialmente dañina para todo el sistema, con lo que cada
desarrollo sobre estas plataformas suelen derivar en problemas colaterales
en la propia experiencia de usuario.</p>

<p>Desde mi punto de vista, en los tiempos que corren, esto es inaceptable.</p>

<p>Nosotros proponemos una plataforma pensada para los desarrolladores, pensada
y profundamente reflexionada. Esto no implica que el código deba estar bien
en una primera instancia, simplemente nuestra declaración de intenciones es
llevar el proyecto a un punto donde las empresas puedan confiar en el proyecto
para construir el suyo propio.</p>

<p>Os presentamos <a href="http://elcodi.io">Elcodi</a>.</p>

<p>En un planteamiento dividido en fases, justo estamos naciendo. Tenemos muy claro
cual es nuestro roadmap, por lo que en los próximos meses se desarrollaran las
principales features a nivel de core, así como la robustez necesaria como para
poder lidiar con colaboradores externos, que les guste el proyecto en su estado
inicial y que quieran acomparnos en este viaje, destinado a mejorar el estilo de
vida de los developers.</p>

<p>La plataforma está basada en Symfony2, y siguiendo la filosofía definida por el
propio framework, hemos enfocado la mayor parte de la arquitectura utilizando
una fuerte capa de eventos, desacoplando la mayoría de comportamientos y
componentes completamente.</p>

<p>Si eres programador Symfony, te propongo que almenos le eches un vistazo.
Verás errores, mil cosas a desarrollar y mil cosas a mejorar, pero como todo
proyecto, nuestra mayor ambición es la propia construcción del mismo, por lo que
es cuestión de meses, ganas y desarrollo.</p>

<p>Otro de nuestros objetivos es llegar a construir una buena documentación.
Tenemos esencialmente tres líneas de documentación en mente. Por un lado</p>

<p>queremos transmitir a los demás nuestra filosofía. La dirección que, sin duda
alguna, tomará el proyecto, independientemente de la implementación que este
adquiera en un momento dado. Es importante definir esto inicialmente porque al
final nos vincula muchísimo al target al que vamos destinados.</p>

<p>La documentación es algo lento, también sujeta a colaboraciones, y en principio
estará inicialmente solo en inglés.</p>

<p>Finalmente decir que elcodi.com es una empresa en plena expansión. Tenemos
buenas previsiones de crecimiento por lo que tenemos una garantía que lo que hoy
con tanta ilusión estamos empezando, no dejará de crecer.</p>

<p>Queremos que sea útil, queremos que nuestra propuesta esté a juicio de todo el
mundo y que saque vuestras críticas mas constructivas, solo así podremos
realmente hacer un proyecto interesante para todos.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom controller annotations]]></title>
    <link href="http://mmoreram.github.io/blog/2014/02/11/custom-controller-annotations/"/>
    <updated>2014-02-11T20:21:00+01:00</updated>
    <id>http://mmoreram.github.io/blog/2014/02/11/custom-controller-annotations</id>
    <content type="html"><![CDATA[<p>The goal is easy: To provide a very intuitive and easy way of creating
controller annotations in Symfony2.</p>

<p><a href="https://github.com/mmoreram/ControllerExtraBundle">ControllerExtraBundle</a>
is both a set of annotations and a platform for creating new custom ones.
Actually, the bundle can create a new Entity, like ParamConverter does, with in
this case is just an empty Entity. The bundle also can create FormTypes, Forms
and FormViews with several options. Can also automate the doctrine <code>flush()</code>
action after the method execution or log something before / after every desired
action.</p>

<p>Bundle is still being tested in production environments, all feedback will be
very very useful.</p>

<p>Let&rsquo;s see how can we create our Annotations.</p>

<ul>
<li>Annotation</li>
<li>Resolver</li>
<li>Definition</li>
<li>Registration</li>
</ul>


<h2>Annotation</h2>

<p>The annotation object. You need to define the fields your custom annotation
will contain.
Must extends <code>Mmoreram\ControllerExtraBundle\Annotation\Abstracts\Annotation</code>
abstract class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">My\Bundle\Annotation</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\ControllerExtraBundle\Annotation\Abstracts\Annotation</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Entity annotation driver</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @Annotation</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MyCustomAnnotation</span> <span class="k">extends</span> <span class="nx">Annotation</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var string</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Dummy field</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$field</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Get Dummy field</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return string Dummy field</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getField</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">field</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Resolver</h2>

<p>Once you have defined your own annotation, you have to resolve how this
annotation works in a controller. You can manage this using a Resolver. Must
extend <code>Mmoreram\ControllerExtraBundle\Resolver\Interfaces\AnnotationResolverInterface;</code>
abstract class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">My\Bundle\Resolver</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Request</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\ControllerExtraBundle\Resolver\Interfaces\AnnotationResolverInterface</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Mmoreram\ControllerExtraBundle\Annotation\Abstracts\Annotation</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * MyCustomAnnotation Resolver</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MyCustomAnnotationResolver</span> <span class="k">implements</span> <span class="nx">AnnotationResolverInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Specific annotation evaluation.</span>
</span><span class='line'><span class="sd">     * This method MUST be implemented because is defined in the interface</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param Request          $request    Request</span>
</span><span class='line'><span class="sd">     * @param Annotation       $annotation Annotation</span>
</span><span class='line'><span class="sd">     * @param ReflectionMethod $method     Method</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return MyCustomAnnotationResolver self Object</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">evaluateAnnotation</span><span class="p">(</span>
</span><span class='line'>                                        <span class="nx">Request</span> <span class="nv">$request</span><span class="p">,</span>
</span><span class='line'>                                        <span class="nx">Annotation</span> <span class="nv">$annotation</span><span class="p">,</span>
</span><span class='line'>                                        <span class="nx">ReflectionMethod</span> <span class="nv">$method</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="sd">/**</span>
</span><span class='line'><span class="sd">         * You can now manage your annotation.</span>
</span><span class='line'><span class="sd">         * You can acced to its fields using public methods.</span>
</span><span class='line'><span class="sd">         * </span>
</span><span class='line'><span class="sd">         * Annotation fields can be public and can be acceded directly,</span>
</span><span class='line'><span class="sd">         * but is better for testing to use getters; they can be mocked.</span>
</span><span class='line'><span class="sd">         */</span>
</span><span class='line'>        <span class="nv">$field</span> <span class="o">=</span> <span class="nv">$annotation</span><span class="o">-&gt;</span><span class="na">getField</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="sd">/**</span>
</span><span class='line'><span class="sd">         * You can also access to existing method parameters.</span>
</span><span class='line'><span class="sd">         * </span>
</span><span class='line'><span class="sd">         * Available parameters are:</span>
</span><span class='line'><span class="sd">         * </span>
</span><span class='line'><span class="sd">         * # ParamConverter parameters ( See `resolver_priority` config value )</span>
</span><span class='line'><span class="sd">         * # All method defined parameters, included Request object if is set.</span>
</span><span class='line'><span class="sd">         */</span>
</span><span class='line'>        <span class="nv">$entity</span> <span class="o">=</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">attributes</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;entity&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="sd">/**</span>
</span><span class='line'><span class="sd">         * And you can now place new elements in the controller action.</span>
</span><span class='line'><span class="sd">         * In this example we are creating new method parameter</span>
</span><span class='line'><span class="sd">         * called $myNewField with some value</span>
</span><span class='line'><span class="sd">         */</span>
</span><span class='line'>        <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">attributes</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span>
</span><span class='line'>            <span class="s1">&#39;myNewField&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="k">new</span> <span class="nv">$field</span><span class="p">()</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This class will be defined as a service, so this method is computed just
before executing current controller. You can also subscribe to some kernel
events and do whatever you need to do ( You can check
<code>Mmoreram\ControllerExtraBundle\Resolver\LogAnnotationResolver</code> for some
examples.</p>

<h2>Definition</h2>

<p>Once Resolver is done, we need to define our service as an Annotation
Resolver. We will use a custom <code>tag</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">parameters</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Resolvers</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="l-Scalar-Plain">my.bundle.resolvers.my_custom_annotation_resolver.class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">My\Bundle\Resolver\MyCustomAnnotationResolver</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Resolvers</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="l-Scalar-Plain">my.bundle.resolvers.my_custom_annotation_resolver</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="err">%</span><span class="l-Scalar-Plain">my.bundle.resolvers.my_custom_annotation_resolver.class%</span>
</span><span class='line'>        <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="p-Indicator">{</span> <span class="nv">name</span><span class="p-Indicator">:</span> <span class="nv">controller_extra.annotation</span> <span class="p-Indicator">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Registration</h2>

<p>We need to register our annotation inside our application. We can just do it in
the <code>boot()</code> method of <code>bundle.php</code> file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">My\Bundle</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Bundle\Bundle</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Doctrine\Common\Annotations\AnnotationRegistry</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * MyBundle</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ControllerExtraBundle</span> <span class="k">extends</span> <span class="nx">Bundle</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Boots the Bundle.</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">boot</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$kernel</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">container</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;kernel&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">AnnotationRegistry</span><span class="o">::</span><span class="na">registerFile</span><span class="p">(</span><span class="nv">$kernel</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">locateResource</span><span class="p">(</span><span class="s2">&quot;@MyBundle/Annotation/MyCustomAnnotation.php&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Et voilà!</em>  We can now use our custom Annotation in our project controllers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cache clear en Symfony2]]></title>
    <link href="http://mmoreram.github.io/blog/2014/01/03/cache-clear-en-symfony2/"/>
    <updated>2014-01-03T15:11:00+01:00</updated>
    <id>http://mmoreram.github.io/blog/2014/01/03/cache-clear-en-symfony2</id>
    <content type="html"><![CDATA[<p>Vacía la caché de Symfony, y la vuelve a crear (sino se especifica lo contrario)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>php app/console cache:clear <span class="o">[</span>--no-warmup<span class="o">]</span> <span class="o">[</span>--no-optional-warmers<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Curioso comando existente en el framework Symfony2 desde sus inicios, y poco
utilizado por los proyectos. En realidad, he visto pocos proyectos que utilizen
este comando en los scripts de deploy, por lo que lo más habitual que veremos es
el clásico</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rm -Rf app/cache/*
</span></code></pre></td></tr></table></div></figure>


<p>Pero es correcta esta práctica? Aunque parezca la forma más ágil de limpiar
cache, tengamos en cuenta que Symfony2 tiene procesos internos que muchos de
nosotros desconocemos por completo. Cuando ejecutamos el comando para vaciar
caché ( con la opción <code>--no-warmup</code> ) no tan solo vaciamos el directorio caché
sino que el framework ejecuta el método <code>clear()</code> de todos los servicios que
implementan la interface
<code>Symfony\Component\HttpKernel\CacheClearer\CacheClearerInterface</code> cuya
definición incorporen el tag <code>kernel.cache_clearer</code>.</p>

<p>En otras palabras.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">my_cache_clearer</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Acme\MainBundle\Cache\MyClearer</span>
</span><span class='line'>        <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="p-Indicator">{</span> <span class="nv">name</span><span class="p-Indicator">:</span> <span class="nv">kernel.cache_clearer</span> <span class="p-Indicator">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Encontraréis mas información y especificación de estos tags
<a href="http://symfony.com/doc/current/reference/dic_tags.html#kernel-cache-clearer">aqui</a>.</p>

<h2>Reflexión</h2>

<p>En realidad es importante fijarse en la opción <code>--no-warmup</code> ya que es la que
cambia el comportamiento del comando. Cuando trabajamos en entornos de
producción, necesitamos que, en tiempo de deploy, nuestra aplicación tenga el
mínimo tiempo de downtime. Esto se consigue reduciendo al máximo el tiempo en
que una caché está vacía.</p>

<h3>Tabla básica de tiempos</h3>

<blockquote><ul>
<li>[1]   Repository status: S1, Cache status: C1</li>
<li>[1-3] Deploy S1 &ndash;> S2</li>
<li>[3-4] Clear cache C1 from /cache</li>
<li>[4-7] Warm up new cache C2 into /cache_new</li>
<li>[7-8] Swap cache C1 &ndash;> C2. Rename /cache_new to /cache</li>
<li>[8]   Repository status: S2, Cache status: C2</li>
</ul>
</blockquote>

<h3>Problema 1</h3>

<p>Entre los tiempos 3 y 8, tenemos que /cache está vacía. Tenemos que tener en
cuenta que estamos en un entorno de producción, por lo que mientras hacemos el
proceso de deployment, nuestros servidores deben estar sirviendo peticiones en
todo momento.</p>

<p>Dado este caso, cada una de las peticiones se dará cuenta que la caché está
vacía, por lo que intentará volverla a montar desde cero. Deberíamos tener en
cuenta, entonces, que entre los tiempos 3 y 8, nuestro servicio estará caido.</p>

<p>De este análisis sacamos que debemos minimizar al máximo el tiempo pasado entre
el clear de la caché a invalidar y el switch a la nueva, o sea, reducir este
intervalo en el que nuestra caché está vacía.</p>

<p>Hace pocos dias propuse un
<a href="https://github.com/symfony/symfony/pull/9930">PR a FrameworkBundle</a> para
gestionar esto.</p>

<p>Lo único que hace es cambiar el orden entre el warm up de la nueva caché y el
clear de la vieja.</p>

<blockquote><ul>
<li>[1]   Repository status: S1, Cache status: C1</li>
<li>[1-3] Deploy S1 &ndash;> S2</li>
<li>[3-6] Warm up new cache C2 into /cache_new</li>
<li>[6-7] Clear cache C1 from /cache</li>
<li>[7-8] Swap cache C1 &ndash;> C2. Rename /cache_new to /cache</li>
<li>[8]   Repository status: S2, Cache status: C2</li>
</ul>


<p>Downtime 2</p></blockquote>

<p>En este punto podemos ver que la ventana que separa el clear de la caché antigua
y el switch con la nueva solo es de dos unidades de tiempo, entre los tiempos 6
y 8. Ahora se nos plantea otro problema.</p>

<h3>Problema 2</h3>

<p>Hemos minimizado al máximo el tiempo de switch entre las dos caches, pero
seguimos teniendo una ventana de 5 unidades de tiempo entre que el repositorio
está en un estado S2 y la caché en un estado C1.</p>

<blockquote><p>Real downtime 5</p></blockquote>

<p>En realidad, dado este análisis solo podríamos actuar de una sola forma, y es
trabajar con un deployment paralelo ( como hace el warmup del cache:clear ).
Esto significa que nunca deployamos sobre nuestra instalación activa</p>

<blockquote><ul>
<li>[1]   Repository status: S1, Cache status: C1 en /project</li>
<li>[1-8] Deployment Repository + cache:clear en /project_warmup</li>
<li>[8]   Repository status: S2, Cache status: C2 en /project_warmup</li>
<li>[8-9] Swap repository S1 &ndash;> S2. Rename /project to /project_warmup</li>
</ul>


<p>Downtime: 0</p></blockquote>

<h3>Problema 3</h3>

<p>En este caso es probable que nuestro proceso de deploy nos modifique elementos
externos, como puede ser ( y probablemente sea ) <code>mysql</code>. Entonces tendremos una
ventana bastante grande donde el modelo deployado en mysql que haga S2 no se
asemeje al modelo Doctrine de S1.</p>

<blockquote><p>Downtime: X</p></blockquote>

<p>So what? Como lo hacéis vosotros? Ya es por sondear un poco hacia donde tira la
gente&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Factory pattern in Symfony2]]></title>
    <link href="http://mmoreram.github.io/blog/2013/12/23/factory-pattern-in-symfony2/"/>
    <updated>2013-12-23T12:10:00+01:00</updated>
    <id>http://mmoreram.github.io/blog/2013/12/23/factory-pattern-in-symfony2</id>
    <content type="html"><![CDATA[<h2>The pattern.</h2>

<p>The factory pattern gives responsibility to create some instances of certain
types to a class called factory. All possible classes that can instantiate the
factory should always implement an interface, so we will be able to call certain
methods, whether the class is. Let&rsquo;s see an specific and usable example.</p>

<p>First of all, we have an interface called LoggerInterface. Is just an interface
so just define all methods that implementations must implement.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">My\Bundle\Namespace</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Interface for all loggers</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">interface</span> <span class="nx">LoggerInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Logs message given as parameter</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param string $message Message to log</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return LoggerInterface self Object</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">log</span><span class="p">(</span><span class="nv">$message</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the one hand we have an implementation called FileLogger. This class just
write given messages in a file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;/</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">My\Bundle\Namespace</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">My\Bundle\Namespace\LoggerInterface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * This class logs into specific file</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">FileLogger</span> <span class="k">implements</span> <span class="nx">LoggerInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="sd">/**</span>
</span><span class='line'><span class="sd">    * @var file path</span>
</span><span class='line'><span class="sd">    *</span>
</span><span class='line'><span class="sd">    * File path</span>
</span><span class='line'><span class="sd">    */</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$filepath</span> <span class="o">=</span> <span class="s1">&#39;/tmp/myfile.log&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Logs message given as parameter</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param string $message Message to log</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return FileLogger self Object</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">log</span><span class="p">(</span><span class="nv">$message</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">file_put_contents</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">filepath</span><span class="p">,</span> <span class="nv">$message</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And on the other hand we have a ScreenLogger, that just echoes message as it
comes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;/</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">My\Bundle\Namespace</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">My\Bundle\Namespace\LoggerInterface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * This class logs into specific file</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ScreenLogger</span> <span class="k">implements</span> <span class="nx">LoggerInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Logs message given as parameter</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param string $message Message to log</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return FileLogger self Object</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">log</span><span class="p">(</span><span class="nv">$message</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="nv">$message</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Given a project we may want to specify using configurarion which Logger we want
to use. Since we want to work with dependency injection component offered by
Symfony2 framework, and any class where we will use our Logger is responsible
for knowing as each instance of our Loggers, we need to create a Factory that
is responsible for taking the setting you have specified, return us an
instance of the class we want.</p>

<p>Given this configuration</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># /app/config/config.yml</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">logger</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">screen</span>
</span></code></pre></td></tr></table></div></figure>


<p>We define our factory service. As <code>type</code> configuration value is a free text
value, if value do not references any Logger type we will throw an exception.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">My\Bundle\Namespace</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * This class is just a Logger factory</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">LoggerFactory</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Create staticly desired Logger</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param string $type Type of Logger to create</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return LoggerInterface Logger instance</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">public</span> <span class="k">function</span> <span class="nf">get</span><span class="p">(</span><span class="nv">$type</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$instance</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="nv">$type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">case</span> <span class="s1">&#39;screen&#39;</span><span class="o">:</span>
</span><span class='line'>                <span class="nv">$instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScreenLogger</span><span class="p">();</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">case</span> <span class="s1">&#39;file&#39;</span><span class="o">:</span>
</span><span class='line'>                <span class="nv">$instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FileLogger</span><span class="p">();</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nx">BadLoggerDefinitionException</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$instance</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And Factory dependency injection definition.. As factory must not be instanced
to create a Logger ( <code>get</code> method is static ) we must use <code>factory_class</code> to
define the Factory namespace.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># /my/bundle/Namespace/Resources/config/services.yml</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">my.logger</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">My\Bundle\Namespace\LoggerInterface</span>
</span><span class='line'>        <span class="l-Scalar-Plain">factory_class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">My\Bundle\Namespace\LoggerFactory</span>
</span><span class='line'>        <span class="l-Scalar-Plain">factory_method</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">get</span>
</span><span class='line'>        <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">logger_type</span><span class="p-Indicator">:</span> <span class="err">%</span><span class="l-Scalar-Plain">logger.type%</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">my.service</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">My\Bundle\Namespace\MyService</span>
</span><span class='line'>        <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">my_logger</span><span class="p-Indicator">:</span> <span class="err">@</span><span class="l-Scalar-Plain">my.logger</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Prototyping</h2>

<p>Let&rsquo;s take a look at Symfony2 component
<a href="http://symfony.com/doc/current/components/finder.html">Finder</a> class. We have a
class named Manager that uses this class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">My\Bundle\Namespace</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Finder\Finder</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * This class is just a manager</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Manager</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Do something</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">doSomething</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$finder</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Finder</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$finder</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">files</span><span class="p">()</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">in</span><span class="p">(</span><span class="nx">__DIR__</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Placing this <code>new Finder</code> inside Manager class, we assume that Manager has
responsability to know how <code>Finder</code> must be built. This creates dependency
between both objects, and that&rsquo;s wrong. So the point is that we should inject a
new instance of <code>Finder</code> each time we call doSomething.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">My\Bundle\Namespace</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Finder\Finder</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * This class is just a manager</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Manager</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var Finder</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Finder</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$finder</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Construct method</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param Finder $finder Finder</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">Finder</span> <span class="nv">$finder</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">finder</span> <span class="o">=</span> <span class="nv">$finder</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Do something</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">doSomething</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">finder</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">files</span><span class="p">()</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">in</span><span class="p">(</span><span class="nx">__DIR__</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And how do we resolve this problem using Dependency Injection? Is as easy as
creating a new service using Finder as class, with prototype scope.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># /my/bundle/Namespace/Resources/config/services.yml</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">my.finder</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Symfony\Component\Finder\Finder</span>
</span><span class='line'>        <span class="l-Scalar-Plain">scope</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">prototype</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">my.manager</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">My\Bundle\Namespace\Manager</span>
</span><span class='line'>        <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">my_finder</span><span class="p-Indicator">:</span> <span class="err">@</span><span class="l-Scalar-Plain">my.finder</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we tale a look at <code>Finder</code> class we shall notice that have a static factory
method inside. If we use Factory pattern using this method, we will instanciate
a new <code>Finder</code> object the first time, but not the others.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symfony2]]></title>
    <link href="http://mmoreram.github.io/blog/2013/12/18/symfony-rocks/"/>
    <updated>2013-12-18T19:01:00+01:00</updated>
    <id>http://mmoreram.github.io/blog/2013/12/18/symfony-rocks</id>
    <content type="html"><![CDATA[<p>No es de extrañar que alguien llegue a considerarme un pequeño obsesionado de
Symfony. Y dado que toda obsesión es mala, puedo asegurar que lo mío no es
obsesión, sino predilección, estima y adulación. Y es que realmente todo mi
desarrollo profesional en estos momentos gira alrededor de esta tecnología,
siendo más que una tecnología una forma de vida, de pensar y de solucionar
ciertos problemas. Lo curioso es que no tan solo enfocados a entornos web,
sino a entornos puramente tecnologicos.</p>

<p>Asi como muchas tecnologías tan solo requieren de un buen manual estructurado y
simplificado, con esto no basta cuando deseas trabajar en un framework de estas
características. Y es que saber trabajar en equipo de forma ordenada, pautada y
comunicativa es algo demasiado básico como para ser descuidada. Reflexionando,
la comunidad Symfony2 a día de hoy es monstruosa. Y creciendo. Por algo será.</p>

<p>Issues abiertas, comentadas, revisadas y resueltas cada día es lo que
escandaliza positivamente de un framework en el que en cada release se posiciona
como número uno para los proyectos más ambiciosos y escalables. Y cada linea de
código pasa a ser una linea objetivamente esencial y perfecta. Tal vez la
palabra que lo define es Arte.</p>

<p>Y es que el camino de este framework puede estar bastante difuminado en el
horizonte, pero si una cosa está clara es que tenemos Symfony para rato, y eso
me anima a crecer como desarrollador para tener capacidad de comprender poco a
poco cada trozo de código, cada feature y cada implementación.</p>

<p>A nivel de arquitectura la verdad es que tiene su que. Muchísimos patrones son
utilizados en simbiosis con metodologias de toda la vida. Cada componente esta
desacoplado tanto como sea posible de los demás, y está documentado bastante
bien ( la comunidad sigue desarrollando la misma documentación a la par que el
propio código, lo cual aporta crecimiento a la par ). Aprender Symfony2 y saber
utilizarlo más allá que &ldquo;Funcionar, funciona&rdquo; te aporta a medio y largo plazo un
conocimiento muy extenso, no tanto de la estructura de clases y de
funcionalidades del propio framework, sino también una capacidad de análisis y
de respuesta a ciertos problemas, utilizando de forma funcional estos patrones
aprendidos y utilizados de forma recurrente.</p>

<p>Y es que los patrones de arquitectura utilizados en este framework son bastante
esenciales en la mente de cualquier buen programador que se precie. Simplemente
se trata de buscar como los demás han solucionado ciertos problemas específicos,
utilizando términos como CompilerPass, Tags o Dependency Injection.</p>

<p>Para empezar, <a href="http://symfony.com/">Symfony</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flushing Doctrine2 entities]]></title>
    <link href="http://mmoreram.github.io/blog/2013/10/11/flushing-doctrine2-entities/"/>
    <updated>2013-10-11T10:11:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2013/10/11/flushing-doctrine2-entities</id>
    <content type="html"><![CDATA[<p>Given this example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$spain</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Country</span><span class="p">;</span>
</span><span class='line'><span class="nv">$spain</span><span class="o">-&gt;</span><span class="na">setName</span><span class="p">(</span><span class="s1">&#39;spain&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$entityManager</span><span class="o">-&gt;</span><span class="na">persist</span><span class="p">(</span><span class="nv">$spain</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$france</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Country</span><span class="p">;</span>
</span><span class='line'><span class="nv">$france</span><span class="o">-&gt;</span><span class="na">setName</span><span class="p">(</span><span class="s1">&#39;france&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$entityManager</span><span class="o">-&gt;</span><span class="na">persist</span><span class="p">(</span><span class="nv">$france</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$entityManager</span><span class="o">-&gt;</span><span class="na">flush</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we flush without defining any kind of parameter, all entities managed by
EntityManager with changes will be flushed.<br/>
To flush a specific entity managed by EntityManager we can just pass the entity
as a parameter in the flush method</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$spain</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Country</span><span class="p">;</span>
</span><span class='line'><span class="nv">$spain</span><span class="o">-&gt;</span><span class="na">setName</span><span class="p">(</span><span class="s1">&#39;spain&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$entityManager</span><span class="o">-&gt;</span><span class="na">persist</span><span class="p">(</span><span class="nv">$spain</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$france</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Country</span><span class="p">;</span>
</span><span class='line'><span class="nv">$france</span><span class="o">-&gt;</span><span class="na">setName</span><span class="p">(</span><span class="s1">&#39;france&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$entityManager</span><span class="o">-&gt;</span><span class="na">persist</span><span class="p">(</span><span class="nv">$france</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * At this point, I only want to flush $spain</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="nv">$entityManager</span><span class="o">-&gt;</span><span class="na">flush</span><span class="p">(</span><span class="nv">$spain</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>To flush an array of entities managed by EntityManager we can pass the array as
a parameter in the flush method</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$spain</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Country</span><span class="p">;</span>
</span><span class='line'><span class="nv">$spain</span><span class="o">-&gt;</span><span class="na">setName</span><span class="p">(</span><span class="s1">&#39;spain&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$entityManager</span><span class="o">-&gt;</span><span class="na">persist</span><span class="p">(</span><span class="nv">$spain</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$france</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Country</span><span class="p">;</span>
</span><span class='line'><span class="nv">$france</span><span class="o">-&gt;</span><span class="na">setName</span><span class="p">(</span><span class="s1">&#39;france&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$entityManager</span><span class="o">-&gt;</span><span class="na">persist</span><span class="p">(</span><span class="nv">$france</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$germany</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Country</span><span class="p">;</span>
</span><span class='line'><span class="nv">$germany</span><span class="o">-&gt;</span><span class="na">setName</span><span class="p">(</span><span class="s1">&#39;germany&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$entityManager</span><span class="o">-&gt;</span><span class="na">persist</span><span class="p">(</span><span class="nv">$germany</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * At this point, I only want to flush $spain</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="nv">$entityManager</span><span class="o">-&gt;</span><span class="na">flush</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="nv">$spain</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">$france</span><span class="p">,</span>
</span><span class='line'><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, how about flushing an ArrayCollection of entities? Lets take a look at the
UnitOfWork code where contains this logic.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$entity</span> <span class="o">===</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">computeChangeSets</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="k">elseif</span> <span class="p">(</span><span class="nb">is_object</span><span class="p">(</span><span class="nv">$entity</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">computeSingleEntityChangeSet</span><span class="p">(</span><span class="nv">$entity</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">elseif</span> <span class="p">(</span><span class="nb">is_array</span><span class="p">(</span><span class="nv">$entity</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$entity</span> <span class="k">as</span> <span class="nv">$object</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">computeSingleEntityChangeSet</span><span class="p">(</span><span class="nv">$object</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Considering that ArrayCollection is an object, this code should be changed to
this code to also accept ArrayCollection and all iterable objects.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$entity</span> <span class="o">===</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">computeChangeSets</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="k">elseif</span> <span class="p">(</span><span class="nb">is_array</span><span class="p">(</span><span class="nv">$entity</span><span class="p">)</span> <span class="o">||</span> <span class="nv">$entity</span> <span class="nx">instanceof</span> <span class="nx">IteratorAggregate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$entity</span> <span class="k">as</span> <span class="nv">$object</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">computeSingleEntityChangeSet</span><span class="p">(</span><span class="nv">$object</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="k">elseif</span> <span class="p">(</span><span class="nb">is_object</span><span class="p">(</span><span class="nv">$entity</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">computeSingleEntityChangeSet</span><span class="p">(</span><span class="nv">$entity</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inverse associations in Doctrine2 models]]></title>
    <link href="http://mmoreram.github.io/blog/2013/10/09/inverse-associations-in-doctrine2-models/"/>
    <updated>2013-10-09T11:37:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2013/10/09/inverse-associations-in-doctrine2-models</id>
    <content type="html"><![CDATA[<p>Lets take a look some basic example about simple Doctrine2 relation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Country</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @ORM\Entity</span>
</span><span class='line'><span class="sd"> * @ORM\Table(name=&quot;countries&quot;)</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Country</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var ArrayCollection</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @ORM\OneToMany(targetEntity=&quot;Province&quot;, mappedBy=&quot;country&quot;)</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$provinces</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Constructor</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">provinces</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ArrayCollection</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Add province</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param Province $province Province to add</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return Country self Object</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">addProvince</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">provinces</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$province</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Province</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @ORM\Entity</span>
</span><span class='line'><span class="sd"> * @ORM\Table(name=&quot;provinces&quot;)</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Province</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var Country</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @ORM\ManyToOne(targetEntity=&quot;Country&quot;, inversedBy=&quot;provinces&quot;)</span>
</span><span class='line'><span class="sd">     * @ORM\JoinColumn(name=&quot;country_id&quot;, referencedColumnName=&quot;id&quot;, nullable=false)</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$country</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Set Country</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param Country $country Country</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return Province self Object</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">setCountry</span><span class="p">(</span><span class="nx">Country</span> <span class="nv">$country</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">country</span> <span class="o">=</span> <span class="nv">$country</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Get the country</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return Country</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getCountry</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">country</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The reason for this post is to try to understand the direct impact of making an
inversed relationship when we allocate a new province in a country.
Given the model we have in the first instance, and given this piece of
controller</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$country</span> <span class="o">=</span> <span class="nv">$this</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">entityManager</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">getRepository</span><span class="p">(</span><span class="s1">&#39;AcmeCoreBundle:Country&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">findBy</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$province</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Province</span><span class="p">();</span>
</span><span class='line'><span class="nv">$province</span><span class="o">-&gt;</span><span class="na">setCountry</span><span class="p">(</span><span class="nv">$country</span><span class="p">);</span>
</span><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">entityManager</span><span class="o">-&gt;</span><span class="na">persist</span><span class="p">(</span><span class="nv">$province</span><span class="p">);</span>
</span><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">entityManager</span><span class="o">-&gt;</span><span class="na">flush</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, when we assign the Country to the new Province, and given that the
owning side of the association is Province, when you flush, the association
persists in database, so that in future reference, we would have the desired
results.<br/>
The &ldquo;problem&rdquo; exists because our <code>EntityManager</code> works with internal cache.
If after this assignment, and in the same request, we need to return all the
provinces of the Country, in particular the Country with id 1, the returned
collection will not contain the new Province if this data is already cached.
This is because we have not perfomed reversed assignment. There are two ways of
solving this.</p>

<h3>Model owns the responsability of double assignment</h3>

<p>We can resolve this giving model the responsability of double assignment.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Province</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @ORM\Entity</span>
</span><span class='line'><span class="sd"> * @ORM\Table(name=&quot;provinces&quot;)</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Province</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var Country</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @ORM\ManyToOne(targetEntity=&quot;Country&quot;, inversedBy=&quot;provinces&quot;)</span>
</span><span class='line'><span class="sd">     * @ORM\JoinColumn(name=&quot;country_id&quot;, referencedColumnName=&quot;id&quot;, nullable=false)</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$country</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Set Country</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param Country $country Country</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return Province self Object</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">setCountry</span><span class="p">(</span><span class="nx">Country</span> <span class="nv">$country</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">country</span> <span class="o">=</span> <span class="nv">$country</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="sd">/**</span>
</span><span class='line'><span class="sd">         * We perform inversed assignment</span>
</span><span class='line'><span class="sd">         */</span>
</span><span class='line'>        <span class="nv">$country</span><span class="o">-&gt;</span><span class="na">setProvince</span><span class="p">(</span><span class="nv">$this</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Get the country</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return Country</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getCountry</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">country</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This has a good side and bad. On the one hand, is a completely transparent
process so that the model handles internally to manage their relationships.
It allows the driver to disengage completely from the model.
On the other hand, we must bear in mind that <strong>will</strong> always done this inverse
relationship. This can be a plus for a project, unless handled very large
amounts of data.<br/>
To give an example, we can imagine a Country with a million provinces.
When charging Country in memory, while not run the <code>getProvinces ()</code> and since
we work with lazy loading, we will have no memory problem. The problem comes
when you add a new province to Country. As a collection, to add an item,
doctrine do something like <code>getProvinces()</code> and then make
`$provinces[] = $province;&lsquo;.  Keep in mind that loading in memory up to 1
million entities without any need is a non desired behaviour.</p>

<h3>Controller ( each one ) owns the responsability of double assignment</h3>

<p>In this case, controller need to perform inversed assignment.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$country</span> <span class="o">=</span> <span class="nv">$this</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">entityManager</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">getRepository</span><span class="p">(</span><span class="s1">&#39;AcmeCoreBundle:Country&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">findBy</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$province</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Province</span><span class="p">();</span>
</span><span class='line'><span class="nv">$province</span><span class="o">-&gt;</span><span class="na">setCountry</span><span class="p">(</span><span class="nv">$country</span><span class="p">);</span>
</span><span class='line'><span class="nv">$country</span><span class="o">-&gt;</span><span class="na">addProvince</span><span class="p">(</span><span class="nv">$province</span><span class="p">);</span>
</span><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">entityManager</span><span class="o">-&gt;</span><span class="na">persist</span><span class="p">(</span><span class="nv">$province</span><span class="p">);</span>
</span><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">entityManager</span><span class="o">-&gt;</span><span class="na">flush</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will choose if is the best option, so you have an idea about if all
provinces are used later. If are used and a million Provinces are loaded,
you will have the same problem as first case, but has nothing to do about
this&hellip;</p>

<p>My conclusion would be something like &hellip; Know your model and scope, and give
responsibilities accordingly.</p>

<p>What do you think?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic routes in Symfony2]]></title>
    <link href="http://mmoreram.github.io/blog/2013/10/01/dynamic-routes-in-symfony2/"/>
    <updated>2013-10-01T18:30:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2013/10/01/dynamic-routes-in-symfony2</id>
    <content type="html"><![CDATA[<p>Given that most times we need to associate a static route entry with a method of
a controller, it is normal for Symfony developers are used to working with the
annotation @Route of FrameworkExtraBundle.</p>

<p>In some cases, it will be interesting or necessary to work with the router to
generate dynamic routes. This means that any bundle can generate a route from a
service, defining both the name of the route as all the information necessary
for the resolution of the route.</p>

<p>Consider the following example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Mmoreram\AcmeBundle\Router</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Config\Loader\LoaderInterface</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Config\Loader\LoaderResolverInterface</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Routing\Route</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Routing\RouteCollection</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Acme dynamic router</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">AcmeRoutesLoader</span> <span class="k">implements</span> <span class="nx">LoaderInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var boolean</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Route is loaded</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$loaded</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Loads a resource.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param mixed  $resource The resource</span>
</span><span class='line'><span class="sd">     * @param string $type     The resource type</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return RouteCollection</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @throws RuntimeException Loader is added twice</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">load</span><span class="p">(</span><span class="nv">$resource</span><span class="p">,</span> <span class="nv">$type</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">loaded</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nx">\RuntimeException</span><span class="p">(</span><span class="s1">&#39;Do not add this loader twice&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$routes</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RouteCollection</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="sd">/**</span>
</span><span class='line'><span class="sd">         * url(&#39;controller_name&#39;) will point AcmeController:methodAction()</span>
</span><span class='line'><span class="sd">         */</span>
</span><span class='line'>        <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;controller_name&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">Route</span><span class="p">(</span><span class="s1">&#39;controller/route&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>            <span class="s1">&#39;_controller&#39;</span>   <span class="o">=&gt;</span>  <span class="s1">&#39;AcmeBundle:Acme:method&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">)));</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">loaded</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$routes</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Returns true if this class supports the given resource.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param mixed  $resource A resource</span>
</span><span class='line'><span class="sd">     * @param string $type     The resource type</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return boolean This class supports the given resource</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">supports</span><span class="p">(</span><span class="nv">$resource</span><span class="p">,</span> <span class="nv">$type</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s1">&#39;acme&#39;</span> <span class="o">===</span> <span class="nv">$type</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Gets the loader resolver.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return LoaderResolverInterface A LoaderResolverInterface instance</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getResolver</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Sets the loader resolver.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param LoaderResolverInterface $resolver A LoaderResolverInterface</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">setResolver</span><span class="p">(</span><span class="nx">LoaderResolverInterface</span> <span class="nv">$resolver</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In method <code>supports()</code>, <code>$type</code> value can be any desired value, and only should
be defined once in all project.</p>

<p>As any service, we must define this class in dependency injection with specific
tag.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">acme.routes.loader</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Mmoreram\AcmeBundle\Router\AcmeRoutesLoader</span>
</span><span class='line'>        <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="p-Indicator">{</span> <span class="nv">name</span><span class="p-Indicator">:</span> <span class="nv">routing.loader</span> <span class="p-Indicator">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And finally we just need to make our project know where to build our route, so
in <code>routing.yml</code> file we must add these lines.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">acme_routes</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">resource</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">.</span>
</span><span class='line'>    <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">acme</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>At this point, type value must be the same as defined in Router service.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First commit]]></title>
    <link href="http://mmoreram.github.io/blog/2013/10/01/first-commit/"/>
    <updated>2013-10-01T18:00:00+02:00</updated>
    <id>http://mmoreram.github.io/blog/2013/10/01/first-commit</id>
    <content type="html"><![CDATA[<p>This is the first commit of this blog</p>
]]></content>
  </entry>
  
</feed>
